{
    "name": "Notebook",
    "documentation": {
        "sections": [
            {
                "content": "This module offers functionalities akin to a notebook page.\n\nThe primary entry point is  <mkapi-api-link nav=\"@nav/api/Notebook.NotebookPage\" semantic=\"class\">NotebookPage</mkapi-api-link> , which serves as a wrapper for parsing markdown content.\n\nThe markdown source can contain a series of executable cells, including:\n\n*   <mkapi-api-link nav=\"@nav/api/Notebook.JsCellView\" semantic=\"class\">JsCellView</mkapi-api-link> : Run JavaScript snippets.\n\n*   <mkapi-api-link nav=\"@nav/api/Notebook.MdCellView\" semantic=\"class\">MdCellView</mkapi-api-link> : Run Markdown snippets, eventually including references to JavScript variables.\n\n*   <mkapi-api-link nav=\"@nav/api/Notebook.PyCellView\" semantic=\"class\">PyCellView</mkapi-api-link> : Run python snippets in the browser using\n   <a target=\"_blank\" href=\"https://pyodide.org/en/stable/\">pyodide</a>.\n\n*   <mkapi-api-link nav=\"@nav/api/Notebook.InterpreterCellView\" semantic=\"class\">InterpreterCellView</mkapi-api-link> : Run code snippets using a given backend interpreter for a given language.\n\n*   <mkapi-api-link nav=\"@nav/api/Notebook.WorkerCellView\" semantic=\"class\">WorkerCellView</mkapi-api-link> : Run code snippets in\n   <a target=\"_blank\" href=\"https://developer.mozilla.org/fr/docs/Web/API/Web_Workers_API\">Web Workers</a>.\n\nCells are identified within the Markdown source using specific DOM elements, respectively  `js-cell` ,  `md-cell` ,\n `py-cell` ,  `interpreter-cell`  and  `worker-cell`  for the above list.\n\nCells feature attributes provided with the DOM element,\nrefer to the associated  <mkapi-api-link nav=\"@nav/api/Notebook.JsCellAttributes\" semantic=\"type-alias\">JsCellAttributes</mkapi-api-link> ,  <mkapi-api-link nav=\"@nav/api/Notebook.MdCellAttributes\" semantic=\"type-alias\">MdCellAttributes</mkapi-api-link> ,  <mkapi-api-link nav=\"@nav/api/Notebook.PyCellAttributes\" semantic=\"type-alias\">PyCellAttributes</mkapi-api-link> ,\n <mkapi-api-link nav=\"@nav/api/Notebook.InterpreterCellAttributes\" semantic=\"type-alias\">InterpreterCellAttributes</mkapi-api-link>  and  <mkapi-api-link nav=\"@nav/api/Notebook.WorkerCellAttributes\" semantic=\"type-alias\">WorkerCellAttributes</mkapi-api-link> .\n\n\n<note level=\"hint\">\nIt is possible to register custom cells using  <mkapi-api-link nav=\"@nav/api/Notebook.State.CellsFactory\" semantic=\"attribute\">State.CellsFactory</mkapi-api-link> .\n</note>\n\nThe entry point of the module is the  <mkapi-api-link nav=\"@nav/api/Notebook.NotebookPage\" semantic=\"class\">NotebookPage</mkapi-api-link> ; most of the implementation logic regarding synchronization\nis included in the  <mkapi-api-link nav=\"@nav/api/Notebook.State\" semantic=\"class\">State</mkapi-api-link>  class.\n\n**Example**\n\n<js-cell cell-id=\"example\">\nconst version = \"{{mkdocs-version}}\"\n\nconst { MkDocs } = await webpm.install({\n    esm:[  `mkdocs-ts#${version} as MkDocs` ],\n    css: [\n        'bootstrap#5.3.3~bootstrap.min.css',\n         `mkdocs-ts#${version}~assets/mkdocs-light.css` ,\n        'fontawesome#5.12.1~css/all.min.css',\n    ]\n})\nconst NotebookModule = await MkDocs.installNotebookModule()\nconst src =  `\n### Hello world\n\n<js-cell>\ndisplay('Hello World')\n</js-cell>\n`\nconst navigation = {\n    name: 'Notebook',\n    layout: ({router}) => new NotebookModule.NotebookPage({\n        src,\n        router,\n    }),\n}\nconst router = new MkDocs.Router({\n    navigation,\n    browserClient: (p) => new MkDocs.MockBrowser(p)\n})\n\nconst app = new MkDocs.DefaultLayout.Layout({\n    router,\n    name: 'Demo App',\n})\n\ndisplay(app)\n</js-cell>\n\n<cell-output cell-id=\"example\" full-screen=\"true\" style=\"aspect-ratio: 1 / 1; min-height: 0px;\">\n</cell-output>",
                "contentType": "markdown",
                "semantic": {
                    "role": "",
                    "labels": [],
                    "attributes": {},
                    "relations": {}
                }
            }
        ]
    },
    "path": "mkdocs-ts/Notebook",
    "navPath": "@nav/api/",
    "attributes": [
        {
            "name": "defaultCellAttributes",
            "semantic": {
                "role": "global",
                "labels": [],
                "attributes": {},
                "relations": {}
            },
            "documentation": {
                "sections": [
                    {
                        "content": "",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "defaultCellAttributes",
            "navPath": "@nav/api/Notebook.defaultCellAttributes",
            "code": {
                "filePath": "src/lib/notebook/notebook-page.ts",
                "declaration": "defaultCellAttributes: CellCommonAttributes = {\n    lineNumbers: false,\n    readOnly: false,\n}",
                "implementation": "",
                "startLine": 31,
                "endLine": 32,
                "references": {
                    "defaultCellAttributes": "@nav/api/Notebook.defaultCellAttributes",
                    "CellCommonAttributes": "@nav/api/Notebook.CellCommonAttributes"
                }
            }
        }
    ],
    "types": [
        {
            "name": "CellHeaderView",
            "documentation": {
                "sections": [
                    {
                        "content": "Represents the view of a cell's header.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "CellHeaderView",
            "navPath": "@nav/api/Notebook.CellHeaderView",
            "attributes": [
                {
                    "name": "children",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Children of the element.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "CellHeaderView.children",
                    "navPath": "@nav/api/Notebook.CellHeaderView.children",
                    "code": {
                        "filePath": "src/lib/notebook/cell-views.ts",
                        "declaration": "public readonly children: ChildrenLike",
                        "implementation": "",
                        "startLine": 256,
                        "endLine": 257,
                        "references": {
                            "children": "@nav/api/Notebook.CellHeaderView.children",
                            "ChildrenLike": "/apps/@rx-vdom/doc/latest?nav=/api.ChildrenLike"
                        }
                    }
                },
                {
                    "name": "class",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Classes associated to the view.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "CellHeaderView.class",
                    "navPath": "@nav/api/Notebook.CellHeaderView.class",
                    "code": {
                        "filePath": "src/lib/notebook/cell-views.ts",
                        "declaration": "public readonly class = `${CellHeaderView.CssSelector} pb-1`",
                        "implementation": "",
                        "startLine": 255,
                        "endLine": 256,
                        "references": {
                            "class": "@nav/api/Notebook.CellHeaderView.class"
                        }
                    }
                },
                {
                    "name": "tag",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The tag of the element, equivalent to the  `tagName`  property of  `HTMLElement` .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "CellHeaderView.tag",
                    "navPath": "@nav/api/Notebook.CellHeaderView.tag",
                    "code": {
                        "filePath": "src/lib/notebook/cell-views.ts",
                        "declaration": "public readonly tag = 'div'",
                        "implementation": "",
                        "startLine": 251,
                        "endLine": 252,
                        "references": {
                            "tag": "@nav/api/Notebook.CellHeaderView.tag"
                        }
                    }
                },
                {
                    "name": "CssSelector",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Component's class name for CSS query.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "CellHeaderView.CssSelector",
                    "navPath": "@nav/api/Notebook.CellHeaderView.CssSelector",
                    "code": {
                        "filePath": "src/lib/notebook/cell-views.ts",
                        "declaration": "static readonly CssSelector = 'mknb-CellHeaderView'",
                        "implementation": "",
                        "startLine": 250,
                        "endLine": 251,
                        "references": {
                            "CssSelector": "@nav/api/Notebook.CellHeaderView.CssSelector"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/notebook/cell-views.ts",
                "declaration": "export class CellHeaderView implements VirtualDOM<'div'>",
                "implementation": "export class CellHeaderView implements VirtualDOM<'div'> {\n    /**\n     * Component's class name for CSS query.\n     */\n    static readonly CssSelector = 'mknb-CellHeaderView'\n    public readonly tag = 'div'\n    /**\n     * Classes associated to the view.\n     */\n    public readonly class = `${CellHeaderView.CssSelector} pb-1`\n    public readonly children: ChildrenLike\n    public readonly cellId: string\n    public readonly state: State\n\n    /**\n     *\n     * @param params\n     * @param params.state Cell's owning state.\n     * @param params.cellId Cell unique ID.\n     */\n    constructor(params: { state: State; cellId: string }) {\n        Object.assign(this, params)\n        this.children = [\n            child$({\n                source$: this.state.cellsStatus$[this.cellId].pipe(\n                    distinctUntilChanged(),\n                ),\n                vdomMap: (s: CellStatus) => {\n                    if (['success', 'pending', 'executing'].includes(s)) {\n                        return { tag: 'div' }\n                    }\n                    const classList =\n                        s === 'ready' ? 'fa-play' : 'fa-fast-forward'\n                    return {\n                        tag: 'button',\n                        class: `btn btn-sm btn-light fas text-success ${classList}`,\n                        onclick: () => this.state.execute(this.cellId),\n                    }\n                },\n            }),\n        ]\n    }\n}",
                "startLine": 246,
                "endLine": 289,
                "references": {
                    "CellHeaderView": "@nav/api/Notebook.CellHeaderView",
                    "State": "@nav/api/Notebook.State",
                    "ChildrenLike": "/apps/@rx-vdom/doc/latest?nav=/api.ChildrenLike",
                    "VirtualDOM": "/apps/@rx-vdom/doc/latest?nav=/api.VirtualDOM"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "CellTagsView",
            "documentation": {
                "sections": [
                    {
                        "content": "Represents the tag of a  <mkapi-api-link nav=\"@nav/api/Notebook.CellView\" semantic=\"class\">CellView</mkapi-api-link>  (read-only or not, the language, *etc.*).",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "CellTagsView",
            "navPath": "@nav/api/Notebook.CellTagsView",
            "attributes": [
                {
                    "name": "children",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Children of the element.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "CellTagsView.children",
                    "navPath": "@nav/api/Notebook.CellTagsView.children",
                    "code": {
                        "filePath": "src/lib/notebook/cell-views.ts",
                        "declaration": "public readonly children: ChildrenLike",
                        "implementation": "",
                        "startLine": 304,
                        "endLine": 305,
                        "references": {
                            "children": "@nav/api/Notebook.CellTagsView.children",
                            "ChildrenLike": "/apps/@rx-vdom/doc/latest?nav=/api.ChildrenLike"
                        }
                    }
                },
                {
                    "name": "class",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Classes associated to the view.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "CellTagsView.class",
                    "navPath": "@nav/api/Notebook.CellTagsView.class",
                    "code": {
                        "filePath": "src/lib/notebook/cell-views.ts",
                        "declaration": "public readonly class = `${CellTagsView.CssSelector} px-2 text-secondary d-flex align-items-center`",
                        "implementation": "",
                        "startLine": 302,
                        "endLine": 303,
                        "references": {
                            "class": "@nav/api/Notebook.CellTagsView.class"
                        }
                    }
                },
                {
                    "name": "style",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Style associated to the view.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "CellTagsView.style",
                    "navPath": "@nav/api/Notebook.CellTagsView.style",
                    "code": {
                        "filePath": "src/lib/notebook/cell-views.ts",
                        "declaration": "public readonly style = {\n        position: 'absolute' as const,\n        top: '0px',\n        right: '0px',\n    }",
                        "implementation": "",
                        "startLine": 308,
                        "endLine": 309,
                        "references": {
                            "style": "@nav/api/Notebook.CellTagsView.style"
                        }
                    }
                },
                {
                    "name": "tag",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The tag of the element, equivalent to the  `tagName`  property of  `HTMLElement` .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "CellTagsView.tag",
                    "navPath": "@nav/api/Notebook.CellTagsView.tag",
                    "code": {
                        "filePath": "src/lib/notebook/cell-views.ts",
                        "declaration": "public readonly tag = 'div'",
                        "implementation": "",
                        "startLine": 298,
                        "endLine": 299,
                        "references": {
                            "tag": "@nav/api/Notebook.CellTagsView.tag"
                        }
                    }
                },
                {
                    "name": "CssSelector",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Component's class name for CSS query.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "CellTagsView.CssSelector",
                    "navPath": "@nav/api/Notebook.CellTagsView.CssSelector",
                    "code": {
                        "filePath": "src/lib/notebook/cell-views.ts",
                        "declaration": "static readonly CssSelector = 'mknb-CellTagsView'",
                        "implementation": "",
                        "startLine": 297,
                        "endLine": 298,
                        "references": {
                            "CssSelector": "@nav/api/Notebook.CellTagsView.CssSelector"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/notebook/cell-views.ts",
                "declaration": "export class CellTagsView implements VirtualDOM<'div'>",
                "implementation": "export class CellTagsView implements VirtualDOM<'div'> {\n    /**\n     * Component's class name for CSS query.\n     */\n    static readonly CssSelector = 'mknb-CellTagsView'\n    public readonly tag = 'div'\n    /**\n     * Classes associated to the view.\n     */\n    public readonly class = `${CellTagsView.CssSelector} px-2 text-secondary d-flex align-items-center`\n\n    public readonly children: ChildrenLike\n    /**\n     * Style associated to the view.\n     */\n    public readonly style = {\n        position: 'absolute' as const,\n        top: '0px',\n        right: '0px',\n    }\n\n    /**\n     *\n     * @param params\n     * @param params.cellStatus$ Current cell status.\n     * @param params.reactive$ Whether the cell is reactive.\n     * @param params.language Cell's owning state.\n     * @param params.cellAttributes Cell attributes.\n     */\n    constructor(params: {\n        cellStatus$: Observable<CellStatus>\n        reactive$: Observable<boolean>\n        language: Language\n        cellAttributes: CellCommonAttributes\n    }) {\n        const lang: Record<Language, string> = {\n            javascript: 'js',\n            markdown: 'md',\n            python: 'py',\n            unknown: '?',\n        }\n        this.children = [\n            {\n                tag: 'i',\n                class: attr$({\n                    source$: params.cellStatus$,\n                    vdomMap: (status) => {\n                        switch (status) {\n                            case 'pending':\n                                return 'fas fa-clock me-1'\n                            case 'executing':\n                                return 'fas fa-cog fa-spin me-1'\n                            default:\n                                return ''\n                        }\n                    },\n                }),\n            },\n            {\n                tag: 'div',\n                class: params.cellAttributes.readOnly\n                    ? 'fas fa-lock me-1'\n                    : 'fas fa-pen me-1',\n            },\n            {\n                tag: 'div',\n                class: attr$({\n                    source$: params.reactive$,\n                    vdomMap: (reactive) => (reactive ? 'fas fa-bolt me-1' : ''),\n                }),\n            },\n            {\n                tag: 'div',\n                class: 'text-secondary',\n                innerText: lang[params.language],\n            },\n        ]\n    }\n}",
                "startLine": 293,
                "endLine": 372,
                "references": {
                    "CellTagsView": "@nav/api/Notebook.CellTagsView",
                    "CellCommonAttributes": "@nav/api/Notebook.CellCommonAttributes",
                    "CellStatus": "@nav/api/Notebook.CellStatus",
                    "Language": "@nav/api/Notebook.Language",
                    "Observable": "https://rxjs.dev/guide/observable",
                    "ChildrenLike": "/apps/@rx-vdom/doc/latest?nav=/api.ChildrenLike",
                    "VirtualDOM": "/apps/@rx-vdom/doc/latest?nav=/api.VirtualDOM"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "CellView",
            "documentation": {
                "sections": [
                    {
                        "content": "Represents the view of a cell.\nIt includes:\n*  An  <mkapi-api-link nav=\"@nav/api/Notebook.CellHeaderView\" semantic=\"class\">header</mkapi-api-link> .\n*  The  <mkapi-api-link nav=\"@nav/api/Notebook.SnippetEditorView\" semantic=\"class\">code editor</mkapi-api-link> .\n*  The  <mkapi-api-link nav=\"@nav/api/Notebook.OutputsView\" semantic=\"class\">outputs container</mkapi-api-link> .",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "CellView",
            "navPath": "@nav/api/Notebook.CellView",
            "attributes": [
                {
                    "name": "children",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Children of the element.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "CellView.children",
                    "navPath": "@nav/api/Notebook.CellView.children",
                    "code": {
                        "filePath": "src/lib/notebook/cell-views.ts",
                        "declaration": "public readonly children: ChildrenLike",
                        "implementation": "",
                        "startLine": 100,
                        "endLine": 101,
                        "references": {
                            "children": "@nav/api/Notebook.CellView.children",
                            "ChildrenLike": "/apps/@rx-vdom/doc/latest?nav=/api.ChildrenLike"
                        }
                    }
                },
                {
                    "name": "class",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Classes associated to the view.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "CellView.class",
                    "navPath": "@nav/api/Notebook.CellView.class",
                    "code": {
                        "filePath": "src/lib/notebook/cell-views.ts",
                        "declaration": "public readonly class = `${CellView.CssSelector} border-start ps-1`",
                        "implementation": "",
                        "startLine": 104,
                        "endLine": 105,
                        "references": {
                            "class": "@nav/api/Notebook.CellView.class"
                        }
                    }
                },
                {
                    "name": "tag",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The tag of the element, equivalent to the  `tagName`  property of  `HTMLElement` .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "CellView.tag",
                    "navPath": "@nav/api/Notebook.CellView.tag",
                    "code": {
                        "filePath": "src/lib/notebook/cell-views.ts",
                        "declaration": "public readonly tag = 'div'",
                        "implementation": "",
                        "startLine": 99,
                        "endLine": 100,
                        "references": {
                            "tag": "@nav/api/Notebook.CellView.tag"
                        }
                    }
                },
                {
                    "name": "CssSelector",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Component's class name for CSS query.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "CellView.CssSelector",
                    "navPath": "@nav/api/Notebook.CellView.CssSelector",
                    "code": {
                        "filePath": "src/lib/notebook/cell-views.ts",
                        "declaration": "static readonly CssSelector = 'mknb-CellView'",
                        "implementation": "",
                        "startLine": 98,
                        "endLine": 99,
                        "references": {
                            "CssSelector": "@nav/api/Notebook.CellView.CssSelector"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/notebook/cell-views.ts",
                "declaration": "export class CellView implements VirtualDOM<'div'>",
                "implementation": "export class CellView implements VirtualDOM<'div'> {\n    /**\n     * Component's class name for CSS query.\n     */\n    static readonly CssSelector = 'mknb-CellView'\n    public readonly tag = 'div'\n    public readonly children: ChildrenLike\n    /**\n     * Classes associated to the view.\n     */\n    public readonly class = `${CellView.CssSelector} border-start ps-1`\n\n    public readonly cellId: string\n    public readonly state: State\n    public readonly options: MdCellAttributes | JsCellAttributes\n    /**\n     *\n     * @param params\n     * @param params.editorView The code editor view to encapsulate.\n     * @param params.cellId The cell unique ID.\n     * @param params.language The language of the cell.\n     * @param params.state The state managing the cell.\n     * @param params.cellAttributes The cell's attributes.\n     */\n    constructor(params: {\n        cellId: string\n        language: Language\n        editorView: AnyVirtualDOM\n        cellAttributes: MdCellAttributes | JsCellAttributes\n        reactive$: Observable<boolean>\n        state: State\n    }) {\n        Object.assign(this, params)\n        const backgrounds: Record<CellStatus, string> = {\n            ready: 'mkdocs-bg-info',\n            pending: 'mkdocs-bg-info',\n            executing: 'mkdocs-bg-info',\n            success: 'mkdocs-bg-success',\n            error: 'mkdocs-bg-danger',\n            unready: '',\n        }\n\n        const class$ = attr$({\n            source$: this.state.cellsStatus$[this.cellId],\n            vdomMap: (status) => backgrounds[status],\n            wrapper: (d) => `ps-1 ${d}`,\n        })\n        const style$ = attr$({\n            source$: this.state.cellsStatus$[this.cellId],\n            vdomMap: (status) => {\n                return ['unready', 'pending'].includes(status)\n                    ? { opacity: 0.4 }\n                    : { opacity: 1 }\n            },\n            wrapper: (d) => ({\n                ...d,\n                position: 'relative',\n            }),\n        })\n        const editorView = {\n            tag: 'div' as const,\n            style: style$,\n            class: class$,\n            children: [\n                params.editorView,\n                new CellTagsView({\n                    cellStatus$: this.state.cellsStatus$[this.cellId],\n                    reactive$: params.reactive$,\n                    language: params.language,\n                    cellAttributes: params.cellAttributes,\n                }),\n            ],\n        }\n        const outputsView = child$({\n            source$: this.state.executing$[this.cellId].pipe(\n                filter(\n                    (executing) =>\n                        !this.state.deportedOutputsViews.includes(\n                            this.cellId,\n                        ) && executing,\n                ),\n            ),\n            vdomMap: () => {\n                return new OutputsView({\n                    output$: this.state.outputs$[this.cellId],\n                })\n            },\n        })\n        const errorsView = child$({\n            source$: this.state.errors$[this.cellId],\n            vdomMap: (error) => {\n                return error ? new ErrorView({ error }) : EmptyDiv\n            },\n        })\n\n        this.children = [\n            new CellHeaderView({\n                state: this.state,\n                cellId: this.cellId,\n            }),\n            editorView,\n            outputsView,\n            errorsView,\n        ]\n    }\n}",
                "startLine": 94,
                "endLine": 200,
                "references": {
                    "CellView": "@nav/api/Notebook.CellView",
                    "CellCommonAttributes": "@nav/api/Notebook.CellCommonAttributes",
                    "JsCellAttributes": "@nav/api/Notebook.JsCellAttributes",
                    "Language": "@nav/api/Notebook.Language",
                    "State": "@nav/api/Notebook.State",
                    "AnyVirtualDOM": "/apps/@rx-vdom/doc/latest?nav=/api.AnyVirtualDOM",
                    "Observable": "https://rxjs.dev/guide/observable",
                    "ChildrenLike": "/apps/@rx-vdom/doc/latest?nav=/api.ChildrenLike",
                    "VirtualDOM": "/apps/@rx-vdom/doc/latest?nav=/api.VirtualDOM"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "DeportedOutputsView",
            "documentation": {
                "sections": [
                    {
                        "content": "Represents deported outputs view.\n\nThey are typically included from a DOM definition with tag name  `cell-output`  in MarkDown content,\nsee  <mkapi-api-link nav=\"@nav/api/Notebook.DeportedOutputsView.FromDom\" semantic=\"method\">DeportedOutputsView.FromDom</mkapi-api-link> .",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "DeportedOutputsView",
            "navPath": "@nav/api/Notebook.DeportedOutputsView",
            "attributes": [
                {
                    "name": "children",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Children of the element.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "DeportedOutputsView.children",
                    "navPath": "@nav/api/Notebook.DeportedOutputsView.children",
                    "code": {
                        "filePath": "src/lib/notebook/deported-outputs-view.ts",
                        "declaration": "public readonly children: ChildrenLike",
                        "implementation": "",
                        "startLine": 34,
                        "endLine": 35,
                        "references": {
                            "children": "@nav/api/Notebook.DeportedOutputsView.children",
                            "ChildrenLike": "/apps/@rx-vdom/doc/latest?nav=/api.ChildrenLike"
                        }
                    }
                },
                {
                    "name": "class",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Classes associated to the view.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "DeportedOutputsView.class",
                    "navPath": "@nav/api/Notebook.DeportedOutputsView.class",
                    "code": {
                        "filePath": "src/lib/notebook/deported-outputs-view.ts",
                        "declaration": "public readonly class: string = DeportedOutputsView.CssSelector",
                        "implementation": "",
                        "startLine": 33,
                        "endLine": 34,
                        "references": {
                            "class": "@nav/api/Notebook.DeportedOutputsView.class"
                        }
                    }
                },
                {
                    "name": "mode$",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The current display mode.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "DeportedOutputsView.mode$",
                    "navPath": "@nav/api/Notebook.DeportedOutputsView.mode$",
                    "code": {
                        "filePath": "src/lib/notebook/deported-outputs-view.ts",
                        "declaration": "public readonly mode$ = new BehaviorSubject<OutputMode>('normal')",
                        "implementation": "",
                        "startLine": 46,
                        "endLine": 47,
                        "references": {
                            "mode$": "@nav/api/Notebook.DeportedOutputsView.mode$",
                            "OutputMode": "@nav/api/Notebook.OutputMode",
                            "BehaviorSubject": "https://www.learnrxjs.io/learn-rxjs/subjects/subject"
                        }
                    }
                },
                {
                    "name": "output$",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The channel in which views are emitted when running the associated cell.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "DeportedOutputsView.output$",
                    "navPath": "@nav/api/Notebook.DeportedOutputsView.output$",
                    "code": {
                        "filePath": "src/lib/notebook/deported-outputs-view.ts",
                        "declaration": "public readonly output$: Observable<Output>",
                        "implementation": "",
                        "startLine": 39,
                        "endLine": 40,
                        "references": {
                            "output$": "@nav/api/Notebook.DeportedOutputsView.output$",
                            "Output": "@nav/api/Notebook.Output",
                            "Observable": "https://rxjs.dev/guide/observable"
                        }
                    }
                },
                {
                    "name": "style",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The style associated with the element. Typically, for a static value:\n ```typescript\n{\n     tag: 'div',\n     style: {\n         backgroundColor: 'blue'\n     }\n}\n``` \nFor more details on hyphenated properties, see  <mkapi-ext-link href=\"/apps/@rx-vdom/doc/latest?nav=/api.CSSAttribute\">CSSAttribute</mkapi-ext-link> .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "DeportedOutputsView.style",
                    "navPath": "@nav/api/Notebook.DeportedOutputsView.style",
                    "code": {
                        "filePath": "src/lib/notebook/deported-outputs-view.ts",
                        "declaration": "public readonly style: CSSAttribute",
                        "implementation": "",
                        "startLine": 41,
                        "endLine": 42,
                        "references": {
                            "style": "@nav/api/Notebook.DeportedOutputsView.style",
                            "CSSAttribute": "/apps/@rx-vdom/doc/latest?nav=/api.CSSAttribute"
                        }
                    }
                },
                {
                    "name": "tag",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The tag of the element, equivalent to the  `tagName`  property of  `HTMLElement` .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "DeportedOutputsView.tag",
                    "navPath": "@nav/api/Notebook.DeportedOutputsView.tag",
                    "code": {
                        "filePath": "src/lib/notebook/deported-outputs-view.ts",
                        "declaration": "public readonly tag = 'div'",
                        "implementation": "",
                        "startLine": 28,
                        "endLine": 29,
                        "references": {
                            "tag": "@nav/api/Notebook.DeportedOutputsView.tag"
                        }
                    }
                },
                {
                    "name": "CssSelector",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Component's class name for CSS query.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "DeportedOutputsView.CssSelector",
                    "navPath": "@nav/api/Notebook.DeportedOutputsView.CssSelector",
                    "code": {
                        "filePath": "src/lib/notebook/deported-outputs-view.ts",
                        "declaration": "static readonly CssSelector = 'mknb-DeportedOutputsView'",
                        "implementation": "",
                        "startLine": 27,
                        "endLine": 28,
                        "references": {
                            "CssSelector": "@nav/api/Notebook.DeportedOutputsView.CssSelector"
                        }
                    }
                },
                {
                    "name": "FromDomAttributes",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Defines the methods to retrieve constructor's arguments from the DOM element  `cell-output`  within\nMarkDown content.\n\n<note level='warning'>\nBe mindful of the conversion from  `camelCase`  to  `kebab-case` .\n</note>",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "DeportedOutputsView.FromDomAttributes",
                    "navPath": "@nav/api/Notebook.DeportedOutputsView.FromDomAttributes",
                    "code": {
                        "filePath": "src/lib/notebook/deported-outputs-view.ts",
                        "declaration": "static readonly FromDomAttributes = {\n        cellId: (e: HTMLElement) => e.getAttribute('cell-id'),\n        defaultContent: (e: HTMLElement) => e.textContent ?? '',\n        fullScreen: (e: HTMLElement) =>\n            e.getAttribute('full-screen') === 'true',\n        style: (e: HTMLElement) => parseStyle(e.getAttribute('style') ?? ''),\n        class: (e: HTMLElement) => e.getAttribute('class') ?? '',\n        inlined: (e: HTMLElement) => e.getAttribute('inlined') === 'true',\n    }",
                        "implementation": "",
                        "startLine": 56,
                        "endLine": 57,
                        "references": {
                            "FromDomAttributes": "@nav/api/Notebook.DeportedOutputsView.FromDomAttributes",
                            "HTMLElement": "https://www.typescriptlang.org/docs/handbook/dom-manipulation.html",
                            "CSSAttribute": "/apps/@rx-vdom/doc/latest?nav=/api.CSSAttribute"
                        }
                    }
                }
            ],
            "callables": [
                {
                    "name": "constructor",
                    "documentation": {
                        "sections": [
                            {
                                "content": "Initialize a new instance.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            },
                            {
                                "title": "Arguments",
                                "content": "\n*  **class**: Classes added to this element. It does not apply to the  `defaultContent`  view.\n*  **defaultContent**: The default content (as Markdown) displayed before an output is emitted from\n `output$` .\n*  **fullScreen**: Whether to add a menu to allow expanding the output.\n*  **inlined**: If  `true` , adjust the display mode to fit as an inlined element within a text.\nWhen inlined, the option  `fullScreen`  is not enabled.\n*  **output$**: Observable over the outputs to display.\n*  **style**: Style to apply to this element. It does not apply to the  `defaultContent`  view.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "arguments",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "DeportedOutputsView.constructor",
                    "navPath": "@nav/api/Notebook.DeportedOutputsView.constructor",
                    "code": {
                        "filePath": "src/lib/notebook/deported-outputs-view.ts",
                        "declaration": "constructor(params: {\n    defaultContent: string\n    output$: Observable<Output>\n    fullScreen?: boolean\n    style?: CSSAttribute\n    class?: string\n    inlined?: boolean\n})",
                        "implementation": "constructor(params: {\n    defaultContent: string\n    output$: Observable<Output>\n    fullScreen?: boolean\n    style?: CSSAttribute\n    class?: string\n    inlined?: boolean\n}) {\n    this.output$ = params.output$\n    if (params.inlined) {\n        this.style = { display: 'inline-block' }\n    }\n    const outputs$ = new BehaviorSubject<Output[]>([])\n    this.output$.subscribe((out: Output) => {\n        if (out === undefined) {\n            outputs$.next([])\n            return\n        }\n        outputs$.next([...outputs$.value, out])\n    })\n    const style$: AttributeLike<CSSAttribute> = attr$({\n        source$: outputs$,\n        vdomMap: (outputs): CSSAttribute => ({\n            backgroundColor: 'rgb(255,255,255)',\n            ...(outputs.length === 0 ? {} : params.style),\n        }),\n    })\n    const class$: AttributeLike<string> = attr$({\n        source$: combineLatest([this.mode$, outputs$]),\n        vdomMap: ([mode, outputs]) => {\n            if (outputs.length === 0) {\n                return ''\n            }\n            const fwdClass = params.class ?? ''\n            return mode === 'normal'\n                ? fwdClass\n                : `p-2 border rounded h-75 w-75 mx-auto ${fwdClass} overflow-auto`\n        },\n    })\n    const contentView: VirtualDOM<'div'> = {\n        tag: 'div' as const,\n        style: style$,\n        class: class$,\n        children: sync$({\n            source$: outputs$.pipe(\n                map((outputs) =>\n                    outputs.filter((out) => out !== undefined),\n                ),\n            ),\n            policy: 'sync',\n            vdomMap: (output) => output,\n        }),\n        onclick: (ev) => {\n            ev.stopPropagation()\n        },\n    }\n    if (params.inlined) {\n        this.children = [contentView]\n        return\n    }\n\n    const headerView: ChildLike = child$({\n        source$: outputs$,\n        vdomMap: (outputs) => {\n            if (!params.fullScreen || outputs.length === 0) {\n                return { tag: 'div' }\n            }\n            return {\n                tag: 'div',\n                class: 'w-100 d-flex pb-1',\n                children: [\n                    { tag: 'div', class: 'flex-grow-1' },\n                    {\n                        tag: 'button',\n                        class: 'btn btn-sm btn-light fas fa-expand fv-pointer',\n                        onclick: () => {\n                            this.mode$.next('fullscreen')\n                        },\n                    },\n                ],\n            }\n        },\n    })\n    const defaultView: ChildLike = child$({\n        source$: outputs$,\n        vdomMap: (outputs) =>\n            outputs.length === 0\n                ? Dependencies.parseMd({ src: params.defaultContent })\n                : { tag: 'div' },\n    })\n\n    const displayModeStyle$: AttributeLike<CSSAttribute> = attr$({\n        source$: this.mode$,\n        vdomMap: (mode) => {\n            return mode === 'normal'\n                ? {\n                      position: 'initial',\n                      width: '100%',\n                      height: 'auto',\n                      backdropFilter: 'none',\n                  }\n                : {\n                      position: 'absolute',\n                      top: '0vh',\n                      left: '0vw',\n                      width: '100vw',\n                      height: '100vh',\n                      zIndex: 10,\n                      backdropFilter: 'blur(3px)',\n                  }\n        },\n    })\n    this.children = [\n        headerView,\n        {\n            tag: 'div',\n            class: 'd-flex flex-column justify-content-center',\n            style: displayModeStyle$,\n            children: [defaultView, contentView],\n            onclick: () => {\n                this.mode$.next('normal')\n            },\n        },\n    ]\n}",
                        "startLine": 110,
                        "endLine": 235,
                        "references": {
                            "DeportedOutputsView": "@nav/api/Notebook.DeportedOutputsView",
                            "Output": "@nav/api/Notebook.Output",
                            "Observable": "https://rxjs.dev/guide/observable",
                            "CSSAttribute": "/apps/@rx-vdom/doc/latest?nav=/api.CSSAttribute"
                        }
                    },
                    "semantic": {
                        "role": "constructor",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    }
                },
                {
                    "name": "FromDom",
                    "documentation": {
                        "sections": [
                            {
                                "content": "Initialize an instance of  <mkapi-api-link nav=\"@nav/api/Notebook.DeportedOutputsView\" semantic=\"class\">DeportedOutputsView</mkapi-api-link>  from a DOM element  `cell-output`  in MarkDown content\n(the parameter  `output$`  is automatically provided).\n\n<note level=\"hint\" label=\"Constructor's attributes mapping\">\n The static property  <mkapi-api-link nav=\"@nav/api/Notebook.DeportedOutputsView.FromDomAttributes\" semantic=\"attribute\">FromDomAttributes</mkapi-api-link> \n defines the mapping between the DOM element and the constructor's attributes.\n</note>",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            },
                            {
                                "title": "Arguments",
                                "content": "\n*  **elem**: The DOM element.\n*  **output$**: The output views channel, automatically provided.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "arguments",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "DeportedOutputsView.FromDom",
                    "navPath": "@nav/api/Notebook.DeportedOutputsView.FromDom",
                    "code": {
                        "filePath": "src/lib/notebook/deported-outputs-view.ts",
                        "declaration": "static FromDom({\n    elem,\n    output$,\n}: {\n    elem: HTMLElement\n    output$: Observable<Output>\n})",
                        "implementation": "static FromDom({\n    elem,\n    output$,\n}: {\n    elem: HTMLElement\n    output$: Observable<Output>\n}) {\n    const params = {\n        cellId: DeportedOutputsView.FromDomAttributes.cellId(elem),\n        defaultContent:\n            DeportedOutputsView.FromDomAttributes.defaultContent(elem),\n        style: DeportedOutputsView.FromDomAttributes.style(elem),\n        class: DeportedOutputsView.FromDomAttributes.class(elem),\n        inlined: DeportedOutputsView.FromDomAttributes.inlined(elem),\n        fullScreen: DeportedOutputsView.FromDomAttributes.fullScreen(elem),\n    }\n    return new DeportedOutputsView({ ...params, output$ })\n}",
                        "startLine": 79,
                        "endLine": 97,
                        "references": {
                            "FromDom": "@nav/api/Notebook.DeportedOutputsView.FromDom",
                            "Output": "@nav/api/Notebook.Output",
                            "HTMLElement": "https://www.typescriptlang.org/docs/handbook/dom-manipulation.html",
                            "Observable": "https://rxjs.dev/guide/observable",
                            "DeportedOutputsView": "@nav/api/Notebook.DeportedOutputsView"
                        }
                    },
                    "semantic": {
                        "role": "method",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    }
                }
            ],
            "code": {
                "filePath": "src/lib/notebook/deported-outputs-view.ts",
                "declaration": "export class DeportedOutputsView implements VirtualDOM<'div'>",
                "implementation": "export class DeportedOutputsView implements VirtualDOM<'div'> {\n    /**\n     * Component's class name for CSS query.\n     */\n    static readonly CssSelector = 'mknb-DeportedOutputsView'\n    public readonly tag = 'div'\n\n    /**\n     * Classes associated to the view.\n     */\n    public readonly class: string = DeportedOutputsView.CssSelector\n    public readonly children: ChildrenLike\n\n    /**\n     * The channel in which views are emitted when running the associated cell.\n     */\n    public readonly output$: Observable<Output>\n\n    public readonly style: CSSAttribute\n\n    /**\n     * The current display mode.\n     */\n    public readonly mode$ = new BehaviorSubject<OutputMode>('normal')\n\n    /**\n     * Defines the methods to retrieve constructor's arguments from the DOM element `cell-output` within\n     * MarkDown content.\n     *\n     * <note level='warning'>\n     * Be mindful of the conversion from `camelCase` to `kebab-case`.\n     * </note>\n     */\n    static readonly FromDomAttributes = {\n        cellId: (e: HTMLElement) => e.getAttribute('cell-id'),\n        defaultContent: (e: HTMLElement) => e.textContent ?? '',\n        fullScreen: (e: HTMLElement) =>\n            e.getAttribute('full-screen') === 'true',\n        style: (e: HTMLElement) => parseStyle(e.getAttribute('style') ?? ''),\n        class: (e: HTMLElement) => e.getAttribute('class') ?? '',\n        inlined: (e: HTMLElement) => e.getAttribute('inlined') === 'true',\n    }\n\n    /**\n     * Initialize an instance of {@link DeportedOutputsView} from a DOM element `cell-output` in MarkDown content\n     * (the parameter `output$` is automatically provided).\n     *\n     * <note level=\"hint\" label=\"Constructor's attributes mapping\">\n     *  The static property {@link DeportedOutputsView.FromDomAttributes | FromDomAttributes}\n     *  defines the mapping between the DOM element and the constructor's attributes.\n     * </note>\n     *\n     * @param _p\n     * @param _p.elem The DOM element.\n     * @param _p.output$ The output views channel, automatically provided.\n     */\n    static FromDom({\n        elem,\n        output$,\n    }: {\n        elem: HTMLElement\n        output$: Observable<Output>\n    }) {\n        const params = {\n            cellId: DeportedOutputsView.FromDomAttributes.cellId(elem),\n            defaultContent:\n                DeportedOutputsView.FromDomAttributes.defaultContent(elem),\n            style: DeportedOutputsView.FromDomAttributes.style(elem),\n            class: DeportedOutputsView.FromDomAttributes.class(elem),\n            inlined: DeportedOutputsView.FromDomAttributes.inlined(elem),\n            fullScreen: DeportedOutputsView.FromDomAttributes.fullScreen(elem),\n        }\n        return new DeportedOutputsView({ ...params, output$ })\n    }\n    /**\n     * Initialize a new instance.\n     *\n     * @param params\n     * @param params.defaultContent The default content (as Markdown) displayed before an output is emitted from\n     * `output$`.\n     * @param params.output$ Observable over the outputs to display.\n     * @param params.fullScreen Whether to add a menu to allow expanding the output.\n     * @param params.style Style to apply to this element. It does not apply to the `defaultContent` view.\n     * @param params.class Classes added to this element. It does not apply to the `defaultContent` view.\n     * @param params.inlined If `true`, adjust the display mode to fit as an inlined element within a text.\n     * When inlined, the option `fullScreen` is not enabled.\n     */\n    constructor(params: {\n        defaultContent: string\n        output$: Observable<Output>\n        fullScreen?: boolean\n        style?: CSSAttribute\n        class?: string\n        inlined?: boolean\n    }) {\n        this.output$ = params.output$\n        if (params.inlined) {\n            this.style = { display: 'inline-block' }\n        }\n        const outputs$ = new BehaviorSubject<Output[]>([])\n        this.output$.subscribe((out: Output) => {\n            if (out === undefined) {\n                outputs$.next([])\n                return\n            }\n            outputs$.next([...outputs$.value, out])\n        })\n        const style$: AttributeLike<CSSAttribute> = attr$({\n            source$: outputs$,\n            vdomMap: (outputs): CSSAttribute => ({\n                backgroundColor: 'rgb(255,255,255)',\n                ...(outputs.length === 0 ? {} : params.style),\n            }),\n        })\n        const class$: AttributeLike<string> = attr$({\n            source$: combineLatest([this.mode$, outputs$]),\n            vdomMap: ([mode, outputs]) => {\n                if (outputs.length === 0) {\n                    return ''\n                }\n                const fwdClass = params.class ?? ''\n                return mode === 'normal'\n                    ? fwdClass\n                    : `p-2 border rounded h-75 w-75 mx-auto ${fwdClass} overflow-auto`\n            },\n        })\n        const contentView: VirtualDOM<'div'> = {\n            tag: 'div' as const,\n            style: style$,\n            class: class$,\n            children: sync$({\n                source$: outputs$.pipe(\n                    map((outputs) =>\n                        outputs.filter((out) => out !== undefined),\n                    ),\n                ),\n                policy: 'sync',\n                vdomMap: (output) => output,\n            }),\n            onclick: (ev) => {\n                ev.stopPropagation()\n            },\n        }\n        if (params.inlined) {\n            this.children = [contentView]\n            return\n        }\n\n        const headerView: ChildLike = child$({\n            source$: outputs$,\n            vdomMap: (outputs) => {\n                if (!params.fullScreen || outputs.length === 0) {\n                    return { tag: 'div' }\n                }\n                return {\n                    tag: 'div',\n                    class: 'w-100 d-flex pb-1',\n                    children: [\n                        { tag: 'div', class: 'flex-grow-1' },\n                        {\n                            tag: 'button',\n                            class: 'btn btn-sm btn-light fas fa-expand fv-pointer',\n                            onclick: () => {\n                                this.mode$.next('fullscreen')\n                            },\n                        },\n                    ],\n                }\n            },\n        })\n        const defaultView: ChildLike = child$({\n            source$: outputs$,\n            vdomMap: (outputs) =>\n                outputs.length === 0\n                    ? Dependencies.parseMd({ src: params.defaultContent })\n                    : { tag: 'div' },\n        })\n\n        const displayModeStyle$: AttributeLike<CSSAttribute> = attr$({\n            source$: this.mode$,\n            vdomMap: (mode) => {\n                return mode === 'normal'\n                    ? {\n                          position: 'initial',\n                          width: '100%',\n                          height: 'auto',\n                          backdropFilter: 'none',\n                      }\n                    : {\n                          position: 'absolute',\n                          top: '0vh',\n                          left: '0vw',\n                          width: '100vw',\n                          height: '100vh',\n                          zIndex: 10,\n                          backdropFilter: 'blur(3px)',\n                      }\n            },\n        })\n        this.children = [\n            headerView,\n            {\n                tag: 'div',\n                class: 'd-flex flex-column justify-content-center',\n                style: displayModeStyle$,\n                children: [defaultView, contentView],\n                onclick: () => {\n                    this.mode$.next('normal')\n                },\n            },\n        ]\n    }\n}",
                "startLine": 23,
                "endLine": 236,
                "references": {
                    "DeportedOutputsView": "@nav/api/Notebook.DeportedOutputsView",
                    "Output": "@nav/api/Notebook.Output",
                    "OutputMode": "@nav/api/Notebook.OutputMode",
                    "Observable": "https://rxjs.dev/guide/observable",
                    "CSSAttribute": "/apps/@rx-vdom/doc/latest?nav=/api.CSSAttribute",
                    "ChildrenLike": "/apps/@rx-vdom/doc/latest?nav=/api.ChildrenLike",
                    "BehaviorSubject": "https://www.learnrxjs.io/learn-rxjs/subjects/subject",
                    "HTMLElement": "https://www.typescriptlang.org/docs/handbook/dom-manipulation.html",
                    "VirtualDOM": "/apps/@rx-vdom/doc/latest?nav=/api.VirtualDOM"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "ErrorView",
            "documentation": {
                "sections": [
                    {
                        "content": "The view of an  <mkapi-api-link nav=\"@nav/api/Notebook.ExecCellError\" semantic=\"interface\">ExecCellError</mkapi-api-link> .",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "ErrorView",
            "navPath": "@nav/api/Notebook.ErrorView",
            "attributes": [
                {
                    "name": "children",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Children of the element.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "ErrorView.children",
                    "navPath": "@nav/api/Notebook.ErrorView.children",
                    "code": {
                        "filePath": "src/lib/notebook/cell-views.ts",
                        "declaration": "public readonly children: ChildrenLike",
                        "implementation": "",
                        "startLine": 437,
                        "endLine": 438,
                        "references": {
                            "children": "@nav/api/Notebook.ErrorView.children",
                            "ChildrenLike": "/apps/@rx-vdom/doc/latest?nav=/api.ChildrenLike"
                        }
                    }
                },
                {
                    "name": "class",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Classes associated to the view.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "ErrorView.class",
                    "navPath": "@nav/api/Notebook.ErrorView.class",
                    "code": {
                        "filePath": "src/lib/notebook/cell-views.ts",
                        "declaration": "public readonly class: string = ErrorView.CssSelector",
                        "implementation": "",
                        "startLine": 436,
                        "endLine": 437,
                        "references": {
                            "class": "@nav/api/Notebook.ErrorView.class"
                        }
                    }
                },
                {
                    "name": "tag",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The tag of the element, equivalent to the  `tagName`  property of  `HTMLElement` .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "ErrorView.tag",
                    "navPath": "@nav/api/Notebook.ErrorView.tag",
                    "code": {
                        "filePath": "src/lib/notebook/cell-views.ts",
                        "declaration": "public readonly tag = 'div'",
                        "implementation": "",
                        "startLine": 432,
                        "endLine": 433,
                        "references": {
                            "tag": "@nav/api/Notebook.ErrorView.tag"
                        }
                    }
                },
                {
                    "name": "CssSelector",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Component's class name for CSS query.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "ErrorView.CssSelector",
                    "navPath": "@nav/api/Notebook.ErrorView.CssSelector",
                    "code": {
                        "filePath": "src/lib/notebook/cell-views.ts",
                        "declaration": "static readonly CssSelector = 'mknb-ErrorView'",
                        "implementation": "",
                        "startLine": 431,
                        "endLine": 432,
                        "references": {
                            "CssSelector": "@nav/api/Notebook.ErrorView.CssSelector"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/notebook/cell-views.ts",
                "declaration": "export class ErrorView implements VirtualDOM<'div'>",
                "implementation": "export class ErrorView implements VirtualDOM<'div'> {\n    /**\n     * Component's class name for CSS query.\n     */\n    static readonly CssSelector = 'mknb-ErrorView'\n    public readonly tag = 'div'\n    /**\n     * Classes associated to the view.\n     */\n    public readonly class: string = ErrorView.CssSelector\n    public readonly children: ChildrenLike\n    public readonly error: ExecCellError\n    /**\n     *\n     * @param params\n     * @param params.error The error to display.\n     */\n    constructor(params: { error: ExecCellError }) {\n        Object.assign(this, params)\n        let content = `**${this.error.message}**\\n`\n\n        if (this.error.lineNumber) {\n            const line = this.error.lineNumber\n            const startLine = Math.max(0, line - 5)\n            const endLine = Math.min(this.error.src.length, line + 5)\n            const lines = this.error.src\n                .slice(startLine, endLine)\n                .reduce((acc, e) => `${acc}${e}\\n`, '')\n            content += `<code-snippet highlightedLines=\"${String(line - startLine - 1)}\">\\n${lines}\\n</code-snippet>\\n`\n        }\n        if (this.error.stackTrace) {\n            const stack = this.error.stackTrace.reduce(\n                (acc, line) => `\\n${acc}\\n*  ${line.replace(/[<>]/g, '')}`,\n                '',\n            )\n            content += `<note level='hint' expandable='true' title='stack-trace'>\\n${stack}\\n</note>\\n`\n        }\n        content +=\n            \"<scope-in></scope-in>\\n**Refer to your browser's debug console for more information**.\"\n\n        const scopeIn = (): AnyVirtualDOM => {\n            return {\n                tag: 'div',\n                class: 'cm-s-default',\n                children: [\n                    {\n                        tag: 'div',\n                        innerText:\n                            'Below is displayed the available scope from the precious cells:',\n                    },\n                    new ObjectJs.View({\n                        state: new ObjectJs.State({\n                            title: '',\n                            data: this.error.scopeIn,\n                        }),\n                    }),\n                ],\n            }\n        }\n\n        this.children = [\n            new Dependencies.MdWidgets.NoteView({\n                level: 'bug' as const,\n                content,\n                parsingArgs: {\n                    views: {\n                        'scope-in': scopeIn,\n                    },\n                },\n                label: this.error.kind,\n            }),\n        ]\n    }\n}",
                "startLine": 427,
                "endLine": 501,
                "references": {
                    "ErrorView": "@nav/api/Notebook.ErrorView",
                    "ExecCellError": "@nav/api/Notebook.ExecCellError",
                    "ChildrenLike": "/apps/@rx-vdom/doc/latest?nav=/api.ChildrenLike",
                    "VirtualDOM": "/apps/@rx-vdom/doc/latest?nav=/api.VirtualDOM"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "FutureCellView",
            "documentation": {
                "sections": [
                    {
                        "content": "Represents the view of a cell that will render once the associated cell is registered in the  <mkapi-api-link nav=\"@nav/api/Notebook.State\" semantic=\"class\">State</mkapi-api-link> .\nUpon registration, this container includes one child of type  <mkapi-api-link nav=\"@nav/api/Notebook.CellView\" semantic=\"class\">CellView</mkapi-api-link> .",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "FutureCellView",
            "navPath": "@nav/api/Notebook.FutureCellView",
            "attributes": [
                {
                    "name": "children",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Children of the element.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "FutureCellView.children",
                    "navPath": "@nav/api/Notebook.FutureCellView.children",
                    "code": {
                        "filePath": "src/lib/notebook/cell-views.ts",
                        "declaration": "public readonly children: ChildrenLike",
                        "implementation": "",
                        "startLine": 52,
                        "endLine": 53,
                        "references": {
                            "children": "@nav/api/Notebook.FutureCellView.children",
                            "ChildrenLike": "/apps/@rx-vdom/doc/latest?nav=/api.ChildrenLike"
                        }
                    }
                },
                {
                    "name": "class",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Classes associated to the view.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "FutureCellView.class",
                    "navPath": "@nav/api/Notebook.FutureCellView.class",
                    "code": {
                        "filePath": "src/lib/notebook/cell-views.ts",
                        "declaration": "public readonly class = FutureCellView.CssSelector",
                        "implementation": "",
                        "startLine": 50,
                        "endLine": 51,
                        "references": {
                            "class": "@nav/api/Notebook.FutureCellView.class"
                        }
                    }
                },
                {
                    "name": "tag",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The tag of the element, equivalent to the  `tagName`  property of  `HTMLElement` .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "FutureCellView.tag",
                    "navPath": "@nav/api/Notebook.FutureCellView.tag",
                    "code": {
                        "filePath": "src/lib/notebook/cell-views.ts",
                        "declaration": "public readonly tag = 'div'",
                        "implementation": "",
                        "startLine": 45,
                        "endLine": 46,
                        "references": {
                            "tag": "@nav/api/Notebook.FutureCellView.tag"
                        }
                    }
                },
                {
                    "name": "CssSelector",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Component's class name for CSS query.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "FutureCellView.CssSelector",
                    "navPath": "@nav/api/Notebook.FutureCellView.CssSelector",
                    "code": {
                        "filePath": "src/lib/notebook/cell-views.ts",
                        "declaration": "static readonly CssSelector = 'mknb-FutureCellView'",
                        "implementation": "",
                        "startLine": 44,
                        "endLine": 45,
                        "references": {
                            "CssSelector": "@nav/api/Notebook.FutureCellView.CssSelector"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/notebook/cell-views.ts",
                "declaration": "export class FutureCellView implements VirtualDOM<'div'>",
                "implementation": "export class FutureCellView implements VirtualDOM<'div'> {\n    /**\n     * Component's class name for CSS query.\n     */\n    static readonly CssSelector = 'mknb-FutureCellView'\n    public readonly tag = 'div'\n\n    /**\n     * Classes associated to the view.\n     */\n    public readonly class = FutureCellView.CssSelector\n\n    public readonly children: ChildrenLike\n\n    /**\n     *\n     * @param params\n     * @param params.editorView The code editor view to encapsulate.\n     * @param params.cellId The cell unique ID.\n     * @param params.language The language of the cell.\n     * @param params.state The state managing the cell.\n     * @param params.cellAttributes The cell's attributes.\n     * @param params.reactive$ Whether the cell is reactive (in some circumstances it is only known when running\n     * the cell).\n     */\n    constructor(params: {\n        editorView: AnyVirtualDOM\n        cellId: string\n        language: Language\n        state: State\n        cellAttributes: MdCellAttributes | JsCellAttributes\n        reactive$: Observable<boolean>\n    }) {\n        this.children = [\n            child$({\n                source$: params.state.cellIds$.pipe(\n                    filter((cellIds) => cellIds.includes(params.cellId)),\n                    take(1),\n                ),\n                vdomMap: (): AnyVirtualDOM => {\n                    return new CellView(params)\n                },\n            }),\n        ]\n    }\n}",
                "startLine": 40,
                "endLine": 86,
                "references": {
                    "FutureCellView": "@nav/api/Notebook.FutureCellView",
                    "CellCommonAttributes": "@nav/api/Notebook.CellCommonAttributes",
                    "JsCellAttributes": "@nav/api/Notebook.JsCellAttributes",
                    "Language": "@nav/api/Notebook.Language",
                    "State": "@nav/api/Notebook.State",
                    "AnyVirtualDOM": "/apps/@rx-vdom/doc/latest?nav=/api.AnyVirtualDOM",
                    "Observable": "https://rxjs.dev/guide/observable",
                    "ChildrenLike": "/apps/@rx-vdom/doc/latest?nav=/api.ChildrenLike",
                    "VirtualDOM": "/apps/@rx-vdom/doc/latest?nav=/api.VirtualDOM"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "InterpreterCellView",
            "documentation": {
                "sections": [
                    {
                        "content": "Represents a cell that runs using a dedicated backend interpreter within a  <mkapi-api-link nav=\"@nav/api/Notebook.NotebookPage\" semantic=\"class\">NotebookPage</mkapi-api-link> .\n\nThey are typically included from a DOM definition with tag name  `interpreter-cell`  in MarkDown content,\nsee  <mkapi-api-link nav=\"@nav/api/Notebook.InterpreterCellView.FromDom\" semantic=\"method\">InterpreterCellView.FromDom</mkapi-api-link> .",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "InterpreterCellView",
            "navPath": "@nav/api/Notebook.InterpreterCellView",
            "attributes": [
                {
                    "name": "cellAttributes",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Cell's attributes.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "InterpreterCellView.cellAttributes",
                    "navPath": "@nav/api/Notebook.InterpreterCellView.cellAttributes",
                    "code": {
                        "filePath": "src/lib/notebook/interpreter-cell-view.ts",
                        "declaration": "public readonly cellAttributes: InterpreterCellAttributes",
                        "implementation": "",
                        "startLine": 125,
                        "endLine": 126,
                        "references": {
                            "cellAttributes": "@nav/api/Notebook.InterpreterCellView.cellAttributes",
                            "InterpreterCellAttributes": "@nav/api/Notebook.InterpreterCellAttributes"
                        }
                    }
                },
                {
                    "name": "cellId",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Cell's ID.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "InterpreterCellView.cellId",
                    "navPath": "@nav/api/Notebook.InterpreterCellView.cellId",
                    "code": {
                        "filePath": "src/lib/notebook/interpreter-cell-view.ts",
                        "declaration": "public readonly cellId: string",
                        "implementation": "",
                        "startLine": 121,
                        "endLine": 122,
                        "references": {
                            "cellId": "@nav/api/Notebook.InterpreterCellView.cellId",
                            "CellTrait.cellId": "@nav/api/Notebook.CellTrait.cellId"
                        }
                    }
                },
                {
                    "name": "children",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Children of the element.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "InterpreterCellView.children",
                    "navPath": "@nav/api/Notebook.InterpreterCellView.children",
                    "code": {
                        "filePath": "src/lib/notebook/interpreter-cell-view.ts",
                        "declaration": "public readonly children: ChildrenLike",
                        "implementation": "",
                        "startLine": 117,
                        "endLine": 118,
                        "references": {
                            "children": "@nav/api/Notebook.InterpreterCellView.children",
                            "ChildrenLike": "/apps/@rx-vdom/doc/latest?nav=/api.ChildrenLike"
                        }
                    }
                },
                {
                    "name": "class",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Classes associated with the view.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "InterpreterCellView.class",
                    "navPath": "@nav/api/Notebook.InterpreterCellView.class",
                    "code": {
                        "filePath": "src/lib/notebook/interpreter-cell-view.ts",
                        "declaration": "public readonly class = InterpreterCellView.CssSelector",
                        "implementation": "",
                        "startLine": 116,
                        "endLine": 117,
                        "references": {
                            "class": "@nav/api/Notebook.InterpreterCellView.class"
                        }
                    }
                },
                {
                    "name": "content$",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Observable over the source content of the cell.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "InterpreterCellView.content$",
                    "navPath": "@nav/api/Notebook.InterpreterCellView.content$",
                    "code": {
                        "filePath": "src/lib/notebook/interpreter-cell-view.ts",
                        "declaration": "public readonly content$: BehaviorSubject<string>",
                        "implementation": "",
                        "startLine": 135,
                        "endLine": 136,
                        "references": {
                            "content$": "@nav/api/Notebook.InterpreterCellView.content$",
                            "CellTrait.content$": "@nav/api/Notebook.CellTrait.content$",
                            "BehaviorSubject": "https://www.learnrxjs.io/learn-rxjs/subjects/subject"
                        }
                    }
                },
                {
                    "name": "invalidated$",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Emit when the cell is invalidated.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "InterpreterCellView.invalidated$",
                    "navPath": "@nav/api/Notebook.InterpreterCellView.invalidated$",
                    "code": {
                        "filePath": "src/lib/notebook/interpreter-cell-view.ts",
                        "declaration": "public readonly invalidated$: Observable<unknown>",
                        "implementation": "",
                        "startLine": 140,
                        "endLine": 141,
                        "references": {
                            "invalidated$": "@nav/api/Notebook.InterpreterCellView.invalidated$",
                            "Observable": "https://rxjs.dev/guide/observable"
                        }
                    }
                },
                {
                    "name": "reactive$",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Current state regarding whether the cell is reactive.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "InterpreterCellView.reactive$",
                    "navPath": "@nav/api/Notebook.InterpreterCellView.reactive$",
                    "code": {
                        "filePath": "src/lib/notebook/interpreter-cell-view.ts",
                        "declaration": "public readonly reactive$ = new BehaviorSubject(false)",
                        "implementation": "",
                        "startLine": 145,
                        "endLine": 146,
                        "references": {
                            "reactive$": "@nav/api/Notebook.InterpreterCellView.reactive$",
                            "BehaviorSubject": "https://www.learnrxjs.io/learn-rxjs/subjects/subject"
                        }
                    }
                },
                {
                    "name": "state",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "State manager, owned by the parent  <mkapi-api-link nav=\"@nav/api/Notebook.NotebookPage\" semantic=\"class\">NotebookPage</mkapi-api-link> .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "InterpreterCellView.state",
                    "navPath": "@nav/api/Notebook.InterpreterCellView.state",
                    "code": {
                        "filePath": "src/lib/notebook/interpreter-cell-view.ts",
                        "declaration": "public readonly state: State",
                        "implementation": "",
                        "startLine": 129,
                        "endLine": 130,
                        "references": {
                            "state": "@nav/api/Notebook.InterpreterCellView.state",
                            "State": "@nav/api/Notebook.State"
                        }
                    }
                },
                {
                    "name": "tag",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The tag of the element, equivalent to the  `tagName`  property of  `HTMLElement` .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "InterpreterCellView.tag",
                    "navPath": "@nav/api/Notebook.InterpreterCellView.tag",
                    "code": {
                        "filePath": "src/lib/notebook/interpreter-cell-view.ts",
                        "declaration": "public readonly tag = 'div'",
                        "implementation": "",
                        "startLine": 112,
                        "endLine": 113,
                        "references": {
                            "tag": "@nav/api/Notebook.InterpreterCellView.tag"
                        }
                    }
                },
                {
                    "name": "CssSelector",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Component's class name for CSS query.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "InterpreterCellView.CssSelector",
                    "navPath": "@nav/api/Notebook.InterpreterCellView.CssSelector",
                    "code": {
                        "filePath": "src/lib/notebook/interpreter-cell-view.ts",
                        "declaration": "static readonly CssSelector = 'mknb-InterpreterCellView'",
                        "implementation": "",
                        "startLine": 111,
                        "endLine": 112,
                        "references": {
                            "CssSelector": "@nav/api/Notebook.InterpreterCellView.CssSelector"
                        }
                    }
                },
                {
                    "name": "FromDomAttributes",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Defines the methods to retrieve constructor's arguments from the DOM element  `interpreter-cell`  within\nMarkDown content.\n\n<note level='warning'>\nBe mindful of the conversion from  `camelCase`  to  `kebab-case` .\n</note>",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "InterpreterCellView.FromDomAttributes",
                    "navPath": "@nav/api/Notebook.InterpreterCellView.FromDomAttributes",
                    "code": {
                        "filePath": "src/lib/notebook/interpreter-cell-view.ts",
                        "declaration": "static readonly FromDomAttributes = {\n        cellId: (e: HTMLElement) =>\n            e.getAttribute('cell-id') ?? e.getAttribute('id'),\n        content: (e: HTMLElement) => e.textContent ?? '',\n        readOnly: (e: HTMLElement) => e.getAttribute('read-only') === 'true',\n        lineNumber: (e: HTMLElement) =>\n            e.getAttribute('line-number') === 'true',\n        interpreter: (e: HTMLElement) => {\n            const interpreter = e.getAttribute('interpreter')\n            if (interpreter === null) {\n                throw Error(\n                    \"An interpreter cell should define an 'interpreter'\",\n                )\n            }\n            return interpreter\n        },\n        language: (e: HTMLElement) =>\n            (e.getAttribute('language') ?? 'unknown') as unknown as\n                | 'javascript'\n                | 'python'\n                | 'unknown',\n        capturedIn: (e: HTMLElement) =>\n            (e.getAttribute('captured-in') ?? '')\n                .split(' ')\n                .filter((c) => c !== ''),\n        capturedOut: (e: HTMLElement) =>\n            (e.getAttribute('captured-out') ?? '')\n                .split(' ')\n                .filter((c) => c !== ''),\n    }",
                        "implementation": "",
                        "startLine": 155,
                        "endLine": 156,
                        "references": {
                            "FromDomAttributes": "@nav/api/Notebook.InterpreterCellView.FromDomAttributes",
                            "HTMLElement": "https://www.typescriptlang.org/docs/handbook/dom-manipulation.html"
                        }
                    }
                }
            ],
            "callables": [
                {
                    "name": "constructor",
                    "documentation": {
                        "sections": [
                            {
                                "content": "Initialize a new instance.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            },
                            {
                                "title": "Arguments",
                                "content": "\n*  **cellAttributes**: Cell's attributes.\n*  **cellId**: The cell's ID.\n*  **content**: The cell's content.\n*  **state**: The page's state.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "arguments",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "InterpreterCellView.constructor",
                    "navPath": "@nav/api/Notebook.InterpreterCellView.constructor",
                    "code": {
                        "filePath": "src/lib/notebook/interpreter-cell-view.ts",
                        "declaration": "constructor(params: {\n    cellId: string\n    content: string\n    state: State\n    cellAttributes: InterpreterCellAttributes\n})",
                        "implementation": "constructor(params: {\n    cellId: string\n    content: string\n    state: State\n    cellAttributes: InterpreterCellAttributes\n}) {\n    Object.assign(this, params)\n    this.invalidated$ = this.state.invalidated$.pipe(\n        filter((cellId) => cellId === this.cellId),\n    )\n    this.editorView = new SnippetEditorView({\n        language: this.cellAttributes.language,\n        readOnly: false,\n        content: params.content,\n        lineNumbers: this.cellAttributes.lineNumbers ?? false,\n        onExecute: () => {\n            this.state.execute(this.cellId).then(\n                () => {\n                    /*No OP*/\n                },\n                () => {\n                    throw Error(`Failed to execute cell ${this.cellId}`)\n                },\n            )\n        },\n    })\n    this.content$ = this.editorView.content$\n    this.children = [\n        new FutureCellView({\n            language: this.cellAttributes.language,\n            cellId: this.cellId,\n            state: this.state,\n            editorView: {\n                tag: 'div',\n                children: [this.headerView(), this.editorView],\n            },\n            cellAttributes: this.cellAttributes,\n            reactive$: this.reactive$,\n        }),\n    ]\n}",
                        "startLine": 229,
                        "endLine": 270,
                        "references": {
                            "InterpreterCellView": "@nav/api/Notebook.InterpreterCellView",
                            "InterpreterCellAttributes": "@nav/api/Notebook.InterpreterCellAttributes",
                            "State": "@nav/api/Notebook.State"
                        }
                    },
                    "semantic": {
                        "role": "constructor",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    }
                },
                {
                    "name": "execute",
                    "documentation": {
                        "sections": [
                            {
                                "content": "Execute the cell.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            },
                            {
                                "title": "Arguments",
                                "content": "\n*  **args**: See  <mkapi-api-link nav=\"@nav/api/Notebook.ExecArgs\" semantic=\"type-alias\">ExecArgs</mkapi-api-link> .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "arguments",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "InterpreterCellView.execute",
                    "navPath": "@nav/api/Notebook.InterpreterCellView.execute",
                    "code": {
                        "filePath": "src/lib/notebook/interpreter-cell-view.ts",
                        "declaration": "async execute({ scope, src, output$, error$ }: ExecArgs): Promise<Scope>",
                        "implementation": "async execute({ scope, src, output$, error$ }: ExecArgs): Promise<Scope> {\n    const compatibleCells = this.state.cells\n        .filter((cell) => cell instanceof InterpreterCellView)\n        .filter(\n            (cell: InterpreterCellView) =>\n                cell.cellAttributes.interpreter ===\n                this.cellAttributes.interpreter,\n        )\n    const currentIndex = compatibleCells.indexOf(this)\n    const capturedIn = this.cellAttributes.capturedIn.reduce(\n        (acc, name) => {\n            return { ...acc, [name]: scope.const[name] || scope.let[name] }\n        },\n        {},\n    )\n    const isReactive =\n        Object.values(capturedIn).find(\n            (v) => v instanceof Observable || v instanceof Promise,\n        ) !== undefined\n\n    const body = {\n        cellId: this.cellId,\n        previousCellIds: compatibleCells\n            .slice(0, currentIndex)\n            .map((cell) => cell.cellId),\n        code: src,\n        capturedIn,\n        capturedOut: this.cellAttributes.capturedOut,\n    }\n    this.reactive$.next(isReactive)\n    const interpreter = scope.const[\n        this.cellAttributes.interpreter\n    ] as BackendClient\n    if (isReactive) {\n        return executeInterpreter$({\n            body,\n            interpreter,\n            scope,\n            output$,\n            error$,\n            invalidated$: this.invalidated$,\n        })\n    }\n    return executeInterpreter({\n        body,\n        interpreter,\n        scope,\n        output$,\n        error$,\n    })\n}",
                        "startLine": 276,
                        "endLine": 327,
                        "references": {
                            "execute": "@nav/api/Notebook.InterpreterCellView.execute",
                            "ExecArgs": "@nav/api/Notebook.ExecArgs",
                            "Scope": "@nav/api/Notebook.Scope",
                            "Promise": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise"
                        }
                    },
                    "semantic": {
                        "role": "method",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    }
                },
                {
                    "name": "FromDom",
                    "documentation": {
                        "sections": [
                            {
                                "content": "Initialize an instance of  <mkapi-api-link nav=\"@nav/api/Notebook.InterpreterCellView\" semantic=\"class\">InterpreterCellView</mkapi-api-link>  from a DOM element  `interpreter-cell`  in MarkDown content\n (the parameter  `state`  is automatically provided).\n\n<note level=\"hint\" label=\"Constructor's attributes mapping\">\n The static property  <mkapi-api-link nav=\"@nav/api/Notebook.InterpreterCellView.FromDomAttributes\" semantic=\"attribute\">FromDomAttributes</mkapi-api-link> \n defines the mapping between the DOM element and the constructor's attributes.\n</note>",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            },
                            {
                                "title": "Arguments",
                                "content": "\n*  **elem**: The DOM element.\n*  **state**: The page state.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "arguments",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "InterpreterCellView.FromDom",
                    "navPath": "@nav/api/Notebook.InterpreterCellView.FromDom",
                    "code": {
                        "filePath": "src/lib/notebook/interpreter-cell-view.ts",
                        "declaration": "static FromDom({ elem, state }: { elem: HTMLElement; state: State })",
                        "implementation": "static FromDom({ elem, state }: { elem: HTMLElement; state: State }) {\n    const params = {\n        cellId:\n            InterpreterCellView.FromDomAttributes.cellId(elem) ??\n            getCellUid(),\n        content: InterpreterCellView.FromDomAttributes.content(elem),\n        cellAttributes: {\n            readOnly: InterpreterCellView.FromDomAttributes.readOnly(elem),\n            lineNumber:\n                InterpreterCellView.FromDomAttributes.lineNumber(elem),\n            interpreter:\n                InterpreterCellView.FromDomAttributes.interpreter(elem),\n            language: InterpreterCellView.FromDomAttributes.language(elem),\n            capturedIn:\n                InterpreterCellView.FromDomAttributes.capturedIn(elem),\n            capturedOut:\n                InterpreterCellView.FromDomAttributes.capturedOut(elem),\n        },\n    }\n    return new InterpreterCellView({ ...params, state })\n}",
                        "startLine": 198,
                        "endLine": 219,
                        "references": {
                            "FromDom": "@nav/api/Notebook.InterpreterCellView.FromDom",
                            "State": "@nav/api/Notebook.State",
                            "HTMLElement": "https://www.typescriptlang.org/docs/handbook/dom-manipulation.html",
                            "InterpreterCellView": "@nav/api/Notebook.InterpreterCellView"
                        }
                    },
                    "semantic": {
                        "role": "method",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    }
                }
            ],
            "code": {
                "filePath": "src/lib/notebook/interpreter-cell-view.ts",
                "declaration": "export class InterpreterCellView implements VirtualDOM<'div'>, CellTrait",
                "implementation": "export class InterpreterCellView implements VirtualDOM<'div'>, CellTrait {\n    /**\n     * Component's class name for CSS query.\n     */\n    static readonly CssSelector = 'mknb-InterpreterCellView'\n    public readonly tag = 'div'\n    /**\n     * Classes associated with the view.\n     */\n    public readonly class = InterpreterCellView.CssSelector\n    public readonly children: ChildrenLike\n    /**\n     * Cell's ID.\n     */\n    public readonly cellId: string\n    /**\n     * Cell's attributes.\n     */\n    public readonly cellAttributes: InterpreterCellAttributes\n    /**\n     * State manager, owned by the parent {@link NotebookPage}.\n     */\n    public readonly state: State\n\n    public readonly editorView: CodeSnippetView\n    /**\n     * Observable over the source content of the cell.\n     */\n    public readonly content$: BehaviorSubject<string>\n\n    /**\n     * Emit when the cell is invalidated.\n     */\n    public readonly invalidated$: Observable<unknown>\n\n    /**\n     * Current state regarding whether the cell is reactive.\n     */\n    public readonly reactive$ = new BehaviorSubject(false)\n\n    /**\n     * Defines the methods to retrieve constructor's arguments from the DOM element `interpreter-cell` within\n     * MarkDown content.\n     *\n     * <note level='warning'>\n     * Be mindful of the conversion from `camelCase` to `kebab-case`.\n     * </note>\n     */\n    static readonly FromDomAttributes = {\n        cellId: (e: HTMLElement) =>\n            e.getAttribute('cell-id') ?? e.getAttribute('id'),\n        content: (e: HTMLElement) => e.textContent ?? '',\n        readOnly: (e: HTMLElement) => e.getAttribute('read-only') === 'true',\n        lineNumber: (e: HTMLElement) =>\n            e.getAttribute('line-number') === 'true',\n        interpreter: (e: HTMLElement) => {\n            const interpreter = e.getAttribute('interpreter')\n            if (interpreter === null) {\n                throw Error(\n                    \"An interpreter cell should define an 'interpreter'\",\n                )\n            }\n            return interpreter\n        },\n        language: (e: HTMLElement) =>\n            (e.getAttribute('language') ?? 'unknown') as unknown as\n                | 'javascript'\n                | 'python'\n                | 'unknown',\n        capturedIn: (e: HTMLElement) =>\n            (e.getAttribute('captured-in') ?? '')\n                .split(' ')\n                .filter((c) => c !== ''),\n        capturedOut: (e: HTMLElement) =>\n            (e.getAttribute('captured-out') ?? '')\n                .split(' ')\n                .filter((c) => c !== ''),\n    }\n    /**\n     * Initialize an instance of {@link InterpreterCellView} from a DOM element `interpreter-cell` in MarkDown content\n     *  (the parameter `state` is automatically provided).\n     *\n     * <note level=\"hint\" label=\"Constructor's attributes mapping\">\n     *  The static property {@link InterpreterCellView.FromDomAttributes | FromDomAttributes}\n     *  defines the mapping between the DOM element and the constructor's attributes.\n     * </note>\n     *\n     * @param _p\n     * @param _p.elem The DOM element.\n     * @param _p.state The page state.\n     */\n    static FromDom({ elem, state }: { elem: HTMLElement; state: State }) {\n        const params = {\n            cellId:\n                InterpreterCellView.FromDomAttributes.cellId(elem) ??\n                getCellUid(),\n            content: InterpreterCellView.FromDomAttributes.content(elem),\n            cellAttributes: {\n                readOnly: InterpreterCellView.FromDomAttributes.readOnly(elem),\n                lineNumber:\n                    InterpreterCellView.FromDomAttributes.lineNumber(elem),\n                interpreter:\n                    InterpreterCellView.FromDomAttributes.interpreter(elem),\n                language: InterpreterCellView.FromDomAttributes.language(elem),\n                capturedIn:\n                    InterpreterCellView.FromDomAttributes.capturedIn(elem),\n                capturedOut:\n                    InterpreterCellView.FromDomAttributes.capturedOut(elem),\n            },\n        }\n        return new InterpreterCellView({ ...params, state })\n    }\n\n    /**\n     * Initialize a new instance.\n     *\n     * @param params\n     * @param params.cellId The cell's ID.\n     * @param params.content The cell's content.\n     * @param params.state The page's state.\n     * @param params.cellAttributes Cell's attributes.\n     */\n    constructor(params: {\n        cellId: string\n        content: string\n        state: State\n        cellAttributes: InterpreterCellAttributes\n    }) {\n        Object.assign(this, params)\n        this.invalidated$ = this.state.invalidated$.pipe(\n            filter((cellId) => cellId === this.cellId),\n        )\n        this.editorView = new SnippetEditorView({\n            language: this.cellAttributes.language,\n            readOnly: false,\n            content: params.content,\n            lineNumbers: this.cellAttributes.lineNumbers ?? false,\n            onExecute: () => {\n                this.state.execute(this.cellId).then(\n                    () => {\n                        /*No OP*/\n                    },\n                    () => {\n                        throw Error(`Failed to execute cell ${this.cellId}`)\n                    },\n                )\n            },\n        })\n        this.content$ = this.editorView.content$\n        this.children = [\n            new FutureCellView({\n                language: this.cellAttributes.language,\n                cellId: this.cellId,\n                state: this.state,\n                editorView: {\n                    tag: 'div',\n                    children: [this.headerView(), this.editorView],\n                },\n                cellAttributes: this.cellAttributes,\n                reactive$: this.reactive$,\n            }),\n        ]\n    }\n\n    /**\n     * Execute the cell.\n     *\n     * @param args See {@link ExecArgs}.\n     */\n    async execute({ scope, src, output$, error$ }: ExecArgs): Promise<Scope> {\n        const compatibleCells = this.state.cells\n            .filter((cell) => cell instanceof InterpreterCellView)\n            .filter(\n                (cell: InterpreterCellView) =>\n                    cell.cellAttributes.interpreter ===\n                    this.cellAttributes.interpreter,\n            )\n        const currentIndex = compatibleCells.indexOf(this)\n        const capturedIn = this.cellAttributes.capturedIn.reduce(\n            (acc, name) => {\n                return { ...acc, [name]: scope.const[name] || scope.let[name] }\n            },\n            {},\n        )\n        const isReactive =\n            Object.values(capturedIn).find(\n                (v) => v instanceof Observable || v instanceof Promise,\n            ) !== undefined\n\n        const body = {\n            cellId: this.cellId,\n            previousCellIds: compatibleCells\n                .slice(0, currentIndex)\n                .map((cell) => cell.cellId),\n            code: src,\n            capturedIn,\n            capturedOut: this.cellAttributes.capturedOut,\n        }\n        this.reactive$.next(isReactive)\n        const interpreter = scope.const[\n            this.cellAttributes.interpreter\n        ] as BackendClient\n        if (isReactive) {\n            return executeInterpreter$({\n                body,\n                interpreter,\n                scope,\n                output$,\n                error$,\n                invalidated$: this.invalidated$,\n            })\n        }\n        return executeInterpreter({\n            body,\n            interpreter,\n            scope,\n            output$,\n            error$,\n        })\n    }\n\n    private headerView(): AnyVirtualDOM {\n        const title: AnyVirtualDOM = {\n            tag: 'div',\n            class: 'd-flex align-items-center px-2',\n            children: [\n                {\n                    tag: 'i',\n                    class: 'fas fa-network-wired',\n                },\n                {\n                    tag: 'i',\n                    class: 'px-2',\n                },\n                {\n                    tag: 'div',\n                    style: { fontWeight: 'bolder' },\n                    innerText: this.cellAttributes.interpreter,\n                },\n            ],\n        }\n        const separator: AnyVirtualDOM = {\n            tag: 'div',\n            class: 'mx-2',\n        }\n        return {\n            tag: 'div',\n            class: 'd-flex align-items-center mkdocs-bg-info',\n            children: [\n                title,\n                separator,\n                new DropDownCaptureView({\n                    mode: 'in',\n                    variables: this.cellAttributes.capturedIn,\n                }),\n                separator,\n                new DropDownCaptureView({\n                    mode: 'out',\n                    variables: this.cellAttributes.capturedOut,\n                }),\n            ],\n        }\n    }\n}",
                "startLine": 107,
                "endLine": 371,
                "references": {
                    "InterpreterCellView": "@nav/api/Notebook.InterpreterCellView",
                    "InterpreterCellAttributes": "@nav/api/Notebook.InterpreterCellAttributes",
                    "State": "@nav/api/Notebook.State",
                    "CellTrait.cellId": "@nav/api/Notebook.CellTrait.cellId",
                    "CellTrait.content$": "@nav/api/Notebook.CellTrait.content$",
                    "CodeSnippetView": "@nav/api/MainModule/MdWidgets.CodeSnippetView",
                    "ExecArgs": "@nav/api/Notebook.ExecArgs",
                    "Scope": "@nav/api/Notebook.Scope",
                    "CellTrait.execute": "@nav/api/Notebook.CellTrait.execute",
                    "CellTrait": "@nav/api/Notebook.CellTrait",
                    "ChildrenLike": "/apps/@rx-vdom/doc/latest?nav=/api.ChildrenLike",
                    "BehaviorSubject": "https://www.learnrxjs.io/learn-rxjs/subjects/subject",
                    "Observable": "https://rxjs.dev/guide/observable",
                    "HTMLElement": "https://www.typescriptlang.org/docs/handbook/dom-manipulation.html",
                    "Promise": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
                    "VirtualDOM": "/apps/@rx-vdom/doc/latest?nav=/api.VirtualDOM"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "JsCellExecutor",
            "documentation": {
                "sections": [
                    {
                        "content": "Represents the execution side of a Javascript cell within a  <mkapi-api-link nav=\"@nav/api/Notebook.NotebookPage\" semantic=\"class\">NotebookPage</mkapi-api-link> .\n\nThis implementation does not provide the views (editor, outputs), it is used as it is when loading separated notebook\npages to retrieve exported symbols.\nHowever, this implementation is typically inherited from  <mkapi-api-link nav=\"@nav/api/Notebook.JsCellView\" semantic=\"class\">JsCellView</mkapi-api-link>  to provide the regular views of\na javascript cell.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "JsCellExecutor",
            "navPath": "@nav/api/Notebook.JsCellExecutor",
            "attributes": [
                {
                    "name": "cellId",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Cell unique ID.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "JsCellExecutor.cellId",
                    "navPath": "@nav/api/Notebook.JsCellExecutor.cellId",
                    "code": {
                        "filePath": "src/lib/notebook/js-cell-view.ts",
                        "declaration": "public readonly cellId: string",
                        "implementation": "",
                        "startLine": 31,
                        "endLine": 32,
                        "references": {
                            "cellId": "@nav/api/Notebook.JsCellExecutor.cellId",
                            "CellTrait.cellId": "@nav/api/Notebook.CellTrait.cellId"
                        }
                    }
                },
                {
                    "name": "content",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Initial source code.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "JsCellExecutor.content",
                    "navPath": "@nav/api/Notebook.JsCellExecutor.content",
                    "code": {
                        "filePath": "src/lib/notebook/js-cell-view.ts",
                        "declaration": "public readonly content: string",
                        "implementation": "",
                        "startLine": 35,
                        "endLine": 36,
                        "references": {
                            "content": "@nav/api/Notebook.JsCellExecutor.content"
                        }
                    }
                },
                {
                    "name": "content$",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Observable over the source content of the cell.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "JsCellExecutor.content$",
                    "navPath": "@nav/api/Notebook.JsCellExecutor.content$",
                    "code": {
                        "filePath": "src/lib/notebook/js-cell-view.ts",
                        "declaration": "public readonly content$: BehaviorSubject<string>",
                        "implementation": "",
                        "startLine": 51,
                        "endLine": 52,
                        "references": {
                            "content$": "@nav/api/Notebook.JsCellExecutor.content$",
                            "CellTrait.content$": "@nav/api/Notebook.CellTrait.content$",
                            "BehaviorSubject": "https://www.learnrxjs.io/learn-rxjs/subjects/subject"
                        }
                    }
                },
                {
                    "name": "invalidated$",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Emit when the cell is invalidated.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "JsCellExecutor.invalidated$",
                    "navPath": "@nav/api/Notebook.JsCellExecutor.invalidated$",
                    "code": {
                        "filePath": "src/lib/notebook/js-cell-view.ts",
                        "declaration": "public readonly invalidated$: Observable<unknown>",
                        "implementation": "",
                        "startLine": 40,
                        "endLine": 41,
                        "references": {
                            "invalidated$": "@nav/api/Notebook.JsCellExecutor.invalidated$",
                            "Observable": "https://rxjs.dev/guide/observable"
                        }
                    }
                },
                {
                    "name": "state",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "State manager, owned by the parent  <mkapi-api-link nav=\"@nav/api/Notebook.NotebookPage\" semantic=\"class\">NotebookPage</mkapi-api-link> .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "JsCellExecutor.state",
                    "navPath": "@nav/api/Notebook.JsCellExecutor.state",
                    "code": {
                        "filePath": "src/lib/notebook/js-cell-view.ts",
                        "declaration": "public readonly state: State",
                        "implementation": "",
                        "startLine": 44,
                        "endLine": 45,
                        "references": {
                            "state": "@nav/api/Notebook.JsCellExecutor.state",
                            "State": "@nav/api/Notebook.State"
                        }
                    }
                }
            ],
            "callables": [
                {
                    "name": "execute",
                    "documentation": {
                        "sections": [
                            {
                                "content": "Execute the cell. See  <mkapi-api-link nav=\"@nav/api/Notebook.JsCellExecutor.execute\" semantic=\"method\">execute</mkapi-api-link> .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            },
                            {
                                "title": "Arguments",
                                "content": "\n*  **args**: See  <mkapi-api-link nav=\"@nav/api/Notebook.ExecArgs\" semantic=\"type-alias\">ExecArgs</mkapi-api-link> .\n*  **ctx**: Execution context used for logging and tracing.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "arguments",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "JsCellExecutor.execute",
                    "navPath": "@nav/api/Notebook.JsCellExecutor.execute",
                    "code": {
                        "filePath": "src/lib/notebook/js-cell-view.ts",
                        "declaration": "@Contextual({ async: true, key: (args: ExecArgs) => args.cellId })\nasync execute(args: ExecArgs, ctx?: ContextTrait): Promise<Scope>",
                        "implementation": "@Contextual({ async: true, key: (args: ExecArgs) => args.cellId })\nasync execute(args: ExecArgs, ctx?: ContextTrait): Promise<Scope> {\n    if (this.cellAttributes.reactive) {\n        return await executeJs$(\n            {\n                ...args,\n                invalidated$: this.invalidated$,\n            },\n            ctx,\n        )\n    }\n    return await executeJs(\n        {\n            ...args,\n            invalidated$: this.invalidated$,\n        },\n        ctx,\n    )\n}",
                        "startLine": 72,
                        "endLine": 91,
                        "references": {
                            "execute": "@nav/api/Notebook.JsCellExecutor.execute",
                            "ExecArgs": "@nav/api/Notebook.ExecArgs",
                            "ContextTrait": "@nav/api/MainModule.ContextTrait",
                            "Scope": "@nav/api/Notebook.Scope",
                            "Promise": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise"
                        }
                    },
                    "semantic": {
                        "role": "method",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    }
                }
            ],
            "code": {
                "filePath": "src/lib/notebook/js-cell-view.ts",
                "declaration": "export class JsCellExecutor implements CellTrait",
                "implementation": "export class JsCellExecutor implements CellTrait {\n    public readonly cellId: string\n    /**\n     * Initial source code.\n     */\n    public readonly content: string\n\n    /**\n     * Emit when the cell is invalidated.\n     */\n    public readonly invalidated$: Observable<unknown>\n    /**\n     * State manager, owned by the parent {@link NotebookPage}.\n     */\n    public readonly state: State\n\n    public readonly cellAttributes: JsCellAttributes\n\n    /**\n     * Observable over the source content of the cell.\n     */\n    public readonly content$: BehaviorSubject<string>\n\n    constructor(params: {\n        cellId: string\n        content$: BehaviorSubject<string>\n        state: State\n        cellAttributes: JsCellAttributes\n    }) {\n        Object.assign(this, params)\n        this.invalidated$ = this.state.invalidated$.pipe(\n            filter((cellId) => cellId === this.cellId),\n        )\n    }\n\n    /**\n     * Execute the cell. See {@link execute}.\n     *\n     * @param args See {@link ExecArgs}.\n     * @param ctx Execution context used for logging and tracing.\n     */\n    @Contextual({ async: true, key: (args: ExecArgs) => args.cellId })\n    async execute(args: ExecArgs, ctx?: ContextTrait): Promise<Scope> {\n        if (this.cellAttributes.reactive) {\n            return await executeJs$(\n                {\n                    ...args,\n                    invalidated$: this.invalidated$,\n                },\n                ctx,\n            )\n        }\n        return await executeJs(\n            {\n                ...args,\n                invalidated$: this.invalidated$,\n            },\n            ctx,\n        )\n    }\n}",
                "startLine": 30,
                "endLine": 91,
                "references": {
                    "JsCellExecutor": "@nav/api/Notebook.JsCellExecutor",
                    "JsCellAttributes": "@nav/api/Notebook.JsCellAttributes",
                    "State": "@nav/api/Notebook.State",
                    "CellTrait.cellId": "@nav/api/Notebook.CellTrait.cellId",
                    "CellTrait.content$": "@nav/api/Notebook.CellTrait.content$",
                    "ExecArgs": "@nav/api/Notebook.ExecArgs",
                    "ContextTrait": "@nav/api/MainModule.ContextTrait",
                    "Scope": "@nav/api/Notebook.Scope",
                    "CellTrait.execute": "@nav/api/Notebook.CellTrait.execute",
                    "JsCellView": "@nav/api/Notebook.JsCellView",
                    "CellTrait": "@nav/api/Notebook.CellTrait",
                    "BehaviorSubject": "https://www.learnrxjs.io/learn-rxjs/subjects/subject",
                    "Observable": "https://rxjs.dev/guide/observable",
                    "Promise": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "JsCellView",
            "documentation": {
                "sections": [
                    {
                        "content": "Represents a Javascript cell within a  <mkapi-api-link nav=\"@nav/api/Notebook.NotebookPage\" semantic=\"class\">NotebookPage</mkapi-api-link> .\n\nThey are typically included from a DOM definition with tag name  `js-cell`  in MarkDown content,\nsee  <mkapi-api-link nav=\"@nav/api/Notebook.JsCellView.FromDom\" semantic=\"method\">JsCellView.FromDom</mkapi-api-link> .\n\n\nDetails regarding the execution are provided in the documentation of  <mkapi-api-link nav=\"@nav/api/Notebook.executeJs\" semantic=\"function\">executeJs</mkapi-api-link>  for\nnon-reactive cells and  <mkapi-api-link nav=\"@nav/api/Notebook.executeJs$\" semantic=\"function\">executeJs$</mkapi-api-link>  for reactive cells.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "JsCellView",
            "navPath": "@nav/api/Notebook.JsCellView",
            "attributes": [
                {
                    "name": "cellId",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Cell unique ID.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "JsCellExecutor.cellId",
                    "navPath": "@nav/api/Notebook.JsCellExecutor.cellId",
                    "code": {
                        "filePath": "src/lib/notebook/js-cell-view.ts",
                        "declaration": "public readonly cellId: string",
                        "implementation": "",
                        "startLine": 31,
                        "endLine": 32,
                        "references": {
                            "cellId": "@nav/api/Notebook.JsCellExecutor.cellId",
                            "CellTrait.cellId": "@nav/api/Notebook.CellTrait.cellId"
                        }
                    }
                },
                {
                    "name": "children",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Children of the element.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "JsCellView.children",
                    "navPath": "@nav/api/Notebook.JsCellView.children",
                    "code": {
                        "filePath": "src/lib/notebook/js-cell-view.ts",
                        "declaration": "public readonly children: ChildrenLike",
                        "implementation": "",
                        "startLine": 113,
                        "endLine": 114,
                        "references": {
                            "children": "@nav/api/Notebook.JsCellView.children",
                            "ChildrenLike": "/apps/@rx-vdom/doc/latest?nav=/api.ChildrenLike"
                        }
                    }
                },
                {
                    "name": "class",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Classes associated with the view.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "JsCellView.class",
                    "navPath": "@nav/api/Notebook.JsCellView.class",
                    "code": {
                        "filePath": "src/lib/notebook/js-cell-view.ts",
                        "declaration": "public readonly class = JsCellView.CssSelector",
                        "implementation": "",
                        "startLine": 112,
                        "endLine": 113,
                        "references": {
                            "class": "@nav/api/Notebook.JsCellView.class"
                        }
                    }
                },
                {
                    "name": "content",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Initial source code.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "JsCellExecutor.content",
                    "navPath": "@nav/api/Notebook.JsCellExecutor.content",
                    "code": {
                        "filePath": "src/lib/notebook/js-cell-view.ts",
                        "declaration": "public readonly content: string",
                        "implementation": "",
                        "startLine": 35,
                        "endLine": 36,
                        "references": {
                            "content": "@nav/api/Notebook.JsCellExecutor.content"
                        }
                    }
                },
                {
                    "name": "content$",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Observable over the source content of the cell.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "JsCellExecutor.content$",
                    "navPath": "@nav/api/Notebook.JsCellExecutor.content$",
                    "code": {
                        "filePath": "src/lib/notebook/js-cell-view.ts",
                        "declaration": "public readonly content$: BehaviorSubject<string>",
                        "implementation": "",
                        "startLine": 51,
                        "endLine": 52,
                        "references": {
                            "content$": "@nav/api/Notebook.JsCellExecutor.content$",
                            "CellTrait.content$": "@nav/api/Notebook.CellTrait.content$",
                            "BehaviorSubject": "https://www.learnrxjs.io/learn-rxjs/subjects/subject"
                        }
                    }
                },
                {
                    "name": "editorView",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The encapsulated code editor view.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "JsCellView.editorView",
                    "navPath": "@nav/api/Notebook.JsCellView.editorView",
                    "code": {
                        "filePath": "src/lib/notebook/js-cell-view.ts",
                        "declaration": "public readonly editorView: CodeSnippetView",
                        "implementation": "",
                        "startLine": 118,
                        "endLine": 119,
                        "references": {
                            "editorView": "@nav/api/Notebook.JsCellView.editorView",
                            "CodeSnippetView": "@nav/api/MainModule/MdWidgets.CodeSnippetView"
                        }
                    }
                },
                {
                    "name": "invalidated$",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Emit when the cell is invalidated.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "JsCellExecutor.invalidated$",
                    "navPath": "@nav/api/Notebook.JsCellExecutor.invalidated$",
                    "code": {
                        "filePath": "src/lib/notebook/js-cell-view.ts",
                        "declaration": "public readonly invalidated$: Observable<unknown>",
                        "implementation": "",
                        "startLine": 40,
                        "endLine": 41,
                        "references": {
                            "invalidated$": "@nav/api/Notebook.JsCellExecutor.invalidated$",
                            "Observable": "https://rxjs.dev/guide/observable"
                        }
                    }
                },
                {
                    "name": "state",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "State manager, owned by the parent  <mkapi-api-link nav=\"@nav/api/Notebook.NotebookPage\" semantic=\"class\">NotebookPage</mkapi-api-link> .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "JsCellExecutor.state",
                    "navPath": "@nav/api/Notebook.JsCellExecutor.state",
                    "code": {
                        "filePath": "src/lib/notebook/js-cell-view.ts",
                        "declaration": "public readonly state: State",
                        "implementation": "",
                        "startLine": 44,
                        "endLine": 45,
                        "references": {
                            "state": "@nav/api/Notebook.JsCellExecutor.state",
                            "State": "@nav/api/Notebook.State"
                        }
                    }
                },
                {
                    "name": "tag",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The tag of the element, equivalent to the  `tagName`  property of  `HTMLElement` .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "JsCellView.tag",
                    "navPath": "@nav/api/Notebook.JsCellView.tag",
                    "code": {
                        "filePath": "src/lib/notebook/js-cell-view.ts",
                        "declaration": "public readonly tag = 'div'",
                        "implementation": "",
                        "startLine": 108,
                        "endLine": 109,
                        "references": {
                            "tag": "@nav/api/Notebook.JsCellView.tag"
                        }
                    }
                },
                {
                    "name": "CssSelector",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Component's class name for CSS query.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "JsCellView.CssSelector",
                    "navPath": "@nav/api/Notebook.JsCellView.CssSelector",
                    "code": {
                        "filePath": "src/lib/notebook/js-cell-view.ts",
                        "declaration": "static readonly CssSelector = 'mknb-JsCellView'",
                        "implementation": "",
                        "startLine": 107,
                        "endLine": 108,
                        "references": {
                            "CssSelector": "@nav/api/Notebook.JsCellView.CssSelector"
                        }
                    }
                },
                {
                    "name": "FromDomAttributes",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Defines the methods to retrieve constructor's arguments from the DOM element  `js-cell`  within\nMarkDown content.\n\n<note level='warning'>\nBe mindful of the conversion from  `camelCase`  to  `kebab-case` .\n</note>",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "JsCellView.FromDomAttributes",
                    "navPath": "@nav/api/Notebook.JsCellView.FromDomAttributes",
                    "code": {
                        "filePath": "src/lib/notebook/js-cell-view.ts",
                        "declaration": "static readonly FromDomAttributes = {\n        cellId: (e: HTMLElement) =>\n            e.getAttribute('cell-id') ?? e.getAttribute('id'),\n        content: (e: HTMLElement) => e.textContent ?? '',\n        readOnly: (e: HTMLElement) => e.getAttribute('read-only') === 'true',\n        lineNumber: (e: HTMLElement) =>\n            e.getAttribute('line-number') === 'true',\n        reactive: (e: HTMLElement) => e.getAttribute('reactive') === 'true',\n    }",
                        "implementation": "",
                        "startLine": 128,
                        "endLine": 129,
                        "references": {
                            "FromDomAttributes": "@nav/api/Notebook.JsCellView.FromDomAttributes",
                            "HTMLElement": "https://www.typescriptlang.org/docs/handbook/dom-manipulation.html"
                        }
                    }
                }
            ],
            "callables": [
                {
                    "name": "constructor",
                    "documentation": {
                        "sections": [
                            {
                                "content": "Initialize a new instance.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            },
                            {
                                "title": "Arguments",
                                "content": "\n*  **cellAttributes**: Cell's attributes.\n*  **cellId**: The cell's ID.\n*  **content**: The cell's content.\n*  **state**: The page's state.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "arguments",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "JsCellView.constructor",
                    "navPath": "@nav/api/Notebook.JsCellView.constructor",
                    "code": {
                        "filePath": "src/lib/notebook/js-cell-view.ts",
                        "declaration": "constructor(params: {\n    cellId: string\n    content: string\n    state: State\n    cellAttributes: JsCellAttributes\n})",
                        "implementation": "constructor(params: {\n    cellId: string\n    content: string\n    state: State\n    cellAttributes: JsCellAttributes\n}) {\n    const editorView = new SnippetEditorView({\n        language: 'javascript',\n        readOnly: params.cellAttributes.readOnly,\n        content: params.content,\n        lineNumbers: params.cellAttributes.lineNumbers,\n        onExecute: () => {\n            this.state.execute(this.cellId).then(\n                () => {\n                    /*No OP*/\n                },\n                (e: unknown) => {\n                    console.error(\n                        `Failed to execute cell ${this.cellId}`,\n                        e,\n                    )\n                },\n            )\n        },\n    })\n\n    super({ ...params, content$: editorView.content$ })\n    this.editorView = editorView\n\n    this.children = [\n        new FutureCellView({\n            language: 'javascript',\n            cellId: this.cellId,\n            state: this.state,\n            editorView: this.editorView,\n            cellAttributes: this.cellAttributes,\n            reactive$: of(this.cellAttributes.reactive),\n        }),\n    ]\n}",
                        "startLine": 173,
                        "endLine": 213,
                        "references": {
                            "JsCellView": "@nav/api/Notebook.JsCellView",
                            "JsCellAttributes": "@nav/api/Notebook.JsCellAttributes",
                            "State": "@nav/api/Notebook.State"
                        }
                    },
                    "semantic": {
                        "role": "constructor",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    }
                },
                {
                    "name": "FromDom",
                    "documentation": {
                        "sections": [
                            {
                                "content": "Initialize an instance of  <mkapi-api-link nav=\"@nav/api/Notebook.JsCellView\" semantic=\"class\">JsCellView</mkapi-api-link>  from a DOM element  `js-cell`  in MarkDown content\n (the parameter  `state`  is automatically provided).\n\n<note level=\"hint\" label=\"Constructor's attributes mapping\">\n The static property  <mkapi-api-link nav=\"@nav/api/Notebook.JsCellView.FromDomAttributes\" semantic=\"attribute\">FromDomAttributes</mkapi-api-link> \n defines the mapping between the DOM element and the constructor's attributes.\n</note>",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            },
                            {
                                "title": "Arguments",
                                "content": "\n*  **elem**: The DOM element.\n*  **state**: The page state.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "arguments",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "JsCellView.FromDom",
                    "navPath": "@nav/api/Notebook.JsCellView.FromDom",
                    "code": {
                        "filePath": "src/lib/notebook/js-cell-view.ts",
                        "declaration": "static FromDom({ elem, state }: { elem: HTMLElement; state: State })",
                        "implementation": "static FromDom({ elem, state }: { elem: HTMLElement; state: State }) {\n    const params = {\n        cellId: JsCellView.FromDomAttributes.cellId(elem) ?? getCellUid(),\n        content: JsCellView.FromDomAttributes.content(elem),\n        cellAttributes: {\n            readOnly: JsCellView.FromDomAttributes.readOnly(elem),\n            lineNumber: JsCellView.FromDomAttributes.lineNumber(elem),\n            reactive: JsCellView.FromDomAttributes.reactive(elem),\n        },\n    }\n    return new JsCellView({ ...params, state })\n}",
                        "startLine": 151,
                        "endLine": 163,
                        "references": {
                            "FromDom": "@nav/api/Notebook.JsCellView.FromDom",
                            "State": "@nav/api/Notebook.State",
                            "HTMLElement": "https://www.typescriptlang.org/docs/handbook/dom-manipulation.html",
                            "JsCellView": "@nav/api/Notebook.JsCellView"
                        }
                    },
                    "semantic": {
                        "role": "method",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    }
                }
            ],
            "code": {
                "filePath": "src/lib/notebook/js-cell-view.ts",
                "declaration": "export class JsCellView extends JsCellExecutor implements VirtualDOM<'div'>",
                "implementation": "export class JsCellView extends JsCellExecutor implements VirtualDOM<'div'> {\n    /**\n     * Component's class name for CSS query.\n     */\n    static readonly CssSelector = 'mknb-JsCellView'\n    public readonly tag = 'div'\n    /**\n     * Classes associated with the view.\n     */\n    public readonly class = JsCellView.CssSelector\n    public readonly children: ChildrenLike\n\n    /**\n     * The encapsulated code editor view.\n     */\n    public readonly editorView: CodeSnippetView\n\n    /**\n     * Defines the methods to retrieve constructor's arguments from the DOM element `js-cell` within\n     * MarkDown content.\n     *\n     * <note level='warning'>\n     * Be mindful of the conversion from `camelCase` to `kebab-case`.\n     * </note>\n     */\n    static readonly FromDomAttributes = {\n        cellId: (e: HTMLElement) =>\n            e.getAttribute('cell-id') ?? e.getAttribute('id'),\n        content: (e: HTMLElement) => e.textContent ?? '',\n        readOnly: (e: HTMLElement) => e.getAttribute('read-only') === 'true',\n        lineNumber: (e: HTMLElement) =>\n            e.getAttribute('line-number') === 'true',\n        reactive: (e: HTMLElement) => e.getAttribute('reactive') === 'true',\n    }\n\n    /**\n     * Initialize an instance of {@link JsCellView} from a DOM element `js-cell` in MarkDown content\n     *  (the parameter `state` is automatically provided).\n     *\n     * <note level=\"hint\" label=\"Constructor's attributes mapping\">\n     *  The static property {@link JsCellView.FromDomAttributes | FromDomAttributes}\n     *  defines the mapping between the DOM element and the constructor's attributes.\n     * </note>\n     *\n     * @param _p\n     * @param _p.elem The DOM element.\n     * @param _p.state The page state.\n     */\n    static FromDom({ elem, state }: { elem: HTMLElement; state: State }) {\n        const params = {\n            cellId: JsCellView.FromDomAttributes.cellId(elem) ?? getCellUid(),\n            content: JsCellView.FromDomAttributes.content(elem),\n            cellAttributes: {\n                readOnly: JsCellView.FromDomAttributes.readOnly(elem),\n                lineNumber: JsCellView.FromDomAttributes.lineNumber(elem),\n                reactive: JsCellView.FromDomAttributes.reactive(elem),\n            },\n        }\n        return new JsCellView({ ...params, state })\n    }\n\n    /**\n     * Initialize a new instance.\n     *\n     * @param params\n     * @param params.cellId The cell's ID.\n     * @param params.content The cell's content.\n     * @param params.state The page's state.\n     * @param params.cellAttributes Cell's attributes.\n     */\n    constructor(params: {\n        cellId: string\n        content: string\n        state: State\n        cellAttributes: JsCellAttributes\n    }) {\n        const editorView = new SnippetEditorView({\n            language: 'javascript',\n            readOnly: params.cellAttributes.readOnly,\n            content: params.content,\n            lineNumbers: params.cellAttributes.lineNumbers,\n            onExecute: () => {\n                this.state.execute(this.cellId).then(\n                    () => {\n                        /*No OP*/\n                    },\n                    (e: unknown) => {\n                        console.error(\n                            `Failed to execute cell ${this.cellId}`,\n                            e,\n                        )\n                    },\n                )\n            },\n        })\n\n        super({ ...params, content$: editorView.content$ })\n        this.editorView = editorView\n\n        this.children = [\n            new FutureCellView({\n                language: 'javascript',\n                cellId: this.cellId,\n                state: this.state,\n                editorView: this.editorView,\n                cellAttributes: this.cellAttributes,\n                reactive$: of(this.cellAttributes.reactive),\n            }),\n        ]\n    }\n}",
                "startLine": 103,
                "endLine": 214,
                "references": {
                    "JsCellView": "@nav/api/Notebook.JsCellView",
                    "JsCellAttributes": "@nav/api/Notebook.JsCellAttributes",
                    "State": "@nav/api/Notebook.State",
                    "JsCellExecutor.constructor": "@nav/api/Notebook.JsCellExecutor.constructor",
                    "JsCellExecutor.cellAttributes": "@nav/api/Notebook.JsCellExecutor.cellAttributes",
                    "JsCellExecutor.cellId": "@nav/api/Notebook.JsCellExecutor.cellId",
                    "JsCellExecutor.content": "@nav/api/Notebook.JsCellExecutor.content",
                    "JsCellExecutor.content$": "@nav/api/Notebook.JsCellExecutor.content$",
                    "CodeSnippetView": "@nav/api/MainModule/MdWidgets.CodeSnippetView",
                    "JsCellExecutor.invalidated$": "@nav/api/Notebook.JsCellExecutor.invalidated$",
                    "JsCellExecutor.state": "@nav/api/Notebook.JsCellExecutor.state",
                    "ExecArgs": "@nav/api/Notebook.ExecArgs",
                    "ContextTrait": "@nav/api/MainModule.ContextTrait",
                    "Scope": "@nav/api/Notebook.Scope",
                    "JsCellExecutor.execute": "@nav/api/Notebook.JsCellExecutor.execute",
                    "JsCellExecutor": "@nav/api/Notebook.JsCellExecutor",
                    "ChildrenLike": "/apps/@rx-vdom/doc/latest?nav=/api.ChildrenLike",
                    "BehaviorSubject": "https://www.learnrxjs.io/learn-rxjs/subjects/subject",
                    "Observable": "https://rxjs.dev/guide/observable",
                    "HTMLElement": "https://www.typescriptlang.org/docs/handbook/dom-manipulation.html",
                    "Promise": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
                    "VirtualDOM": "/apps/@rx-vdom/doc/latest?nav=/api.VirtualDOM"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "MdCellView",
            "documentation": {
                "sections": [
                    {
                        "content": "Represents a Markdown cell within a  <mkapi-api-link nav=\"@nav/api/Notebook.NotebookPage\" semantic=\"class\">NotebookPage</mkapi-api-link> .\n\nThey are typically included from a DOM definition with tag name  `md-cell`  in Markdown content,\nsee  <mkapi-api-link nav=\"@nav/api/Notebook.MdCellView.FromDom\" semantic=\"method\">MdCellView.FromDom</mkapi-api-link> .",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "MdCellView",
            "navPath": "@nav/api/Notebook.MdCellView",
            "attributes": [
                {
                    "name": "cellAttributes",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Cell's Attributes.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "MdCellView.cellAttributes",
                    "navPath": "@nav/api/Notebook.MdCellView.cellAttributes",
                    "code": {
                        "filePath": "src/lib/notebook/md-cell-view.ts",
                        "declaration": "public readonly cellAttributes: MdCellAttributes",
                        "implementation": "",
                        "startLine": 112,
                        "endLine": 113,
                        "references": {
                            "cellAttributes": "@nav/api/Notebook.MdCellView.cellAttributes",
                            "CellCommonAttributes": "@nav/api/Notebook.CellCommonAttributes"
                        }
                    }
                },
                {
                    "name": "cellId",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Cell's ID.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "MdCellView.cellId",
                    "navPath": "@nav/api/Notebook.MdCellView.cellId",
                    "code": {
                        "filePath": "src/lib/notebook/md-cell-view.ts",
                        "declaration": "public readonly cellId: string",
                        "implementation": "",
                        "startLine": 108,
                        "endLine": 109,
                        "references": {
                            "cellId": "@nav/api/Notebook.MdCellView.cellId",
                            "CellTrait.cellId": "@nav/api/Notebook.CellTrait.cellId"
                        }
                    }
                },
                {
                    "name": "children",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Children of the element.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "MdCellView.children",
                    "navPath": "@nav/api/Notebook.MdCellView.children",
                    "code": {
                        "filePath": "src/lib/notebook/md-cell-view.ts",
                        "declaration": "public readonly children: ChildrenLike",
                        "implementation": "",
                        "startLine": 104,
                        "endLine": 105,
                        "references": {
                            "children": "@nav/api/Notebook.MdCellView.children",
                            "ChildrenLike": "/apps/@rx-vdom/doc/latest?nav=/api.ChildrenLike"
                        }
                    }
                },
                {
                    "name": "class",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Classes associated with the view.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "MdCellView.class",
                    "navPath": "@nav/api/Notebook.MdCellView.class",
                    "code": {
                        "filePath": "src/lib/notebook/md-cell-view.ts",
                        "declaration": "public readonly class = MdCellView.CssSelector",
                        "implementation": "",
                        "startLine": 103,
                        "endLine": 104,
                        "references": {
                            "class": "@nav/api/Notebook.MdCellView.class"
                        }
                    }
                },
                {
                    "name": "content$",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Observable over the source content of the cell.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "MdCellView.content$",
                    "navPath": "@nav/api/Notebook.MdCellView.content$",
                    "code": {
                        "filePath": "src/lib/notebook/md-cell-view.ts",
                        "declaration": "public readonly content$: BehaviorSubject<string>",
                        "implementation": "",
                        "startLine": 124,
                        "endLine": 125,
                        "references": {
                            "content$": "@nav/api/Notebook.MdCellView.content$",
                            "CellTrait.content$": "@nav/api/Notebook.CellTrait.content$",
                            "BehaviorSubject": "https://www.learnrxjs.io/learn-rxjs/subjects/subject"
                        }
                    }
                },
                {
                    "name": "editorView",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Encapsulated editor view.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "MdCellView.editorView",
                    "navPath": "@nav/api/Notebook.MdCellView.editorView",
                    "code": {
                        "filePath": "src/lib/notebook/md-cell-view.ts",
                        "declaration": "public readonly editorView: CodeSnippetView",
                        "implementation": "",
                        "startLine": 120,
                        "endLine": 121,
                        "references": {
                            "editorView": "@nav/api/Notebook.MdCellView.editorView",
                            "CodeSnippetView": "@nav/api/MainModule/MdWidgets.CodeSnippetView"
                        }
                    }
                },
                {
                    "name": "invalidated$",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Emit when the cell is invalidated.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "MdCellView.invalidated$",
                    "navPath": "@nav/api/Notebook.MdCellView.invalidated$",
                    "code": {
                        "filePath": "src/lib/notebook/md-cell-view.ts",
                        "declaration": "public readonly invalidated$: Observable<unknown>",
                        "implementation": "",
                        "startLine": 133,
                        "endLine": 134,
                        "references": {
                            "invalidated$": "@nav/api/Notebook.MdCellView.invalidated$",
                            "Observable": "https://rxjs.dev/guide/observable"
                        }
                    }
                },
                {
                    "name": "parserOptions",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Options for parsing Markdown code.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "MdCellView.parserOptions",
                    "navPath": "@nav/api/Notebook.MdCellView.parserOptions",
                    "code": {
                        "filePath": "src/lib/notebook/md-cell-view.ts",
                        "declaration": "public readonly parserOptions: MdParsingOptions",
                        "implementation": "",
                        "startLine": 129,
                        "endLine": 130,
                        "references": {
                            "parserOptions": "@nav/api/Notebook.MdCellView.parserOptions",
                            "MdParsingOptions": "@nav/api/MainModule.MdParsingOptions"
                        }
                    }
                },
                {
                    "name": "state",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "State manager, owned by the parent  <mkapi-api-link nav=\"@nav/api/Notebook.NotebookPage\" semantic=\"class\">NotebookPage</mkapi-api-link> .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "MdCellView.state",
                    "navPath": "@nav/api/Notebook.MdCellView.state",
                    "code": {
                        "filePath": "src/lib/notebook/md-cell-view.ts",
                        "declaration": "public readonly state: State",
                        "implementation": "",
                        "startLine": 116,
                        "endLine": 117,
                        "references": {
                            "state": "@nav/api/Notebook.MdCellView.state",
                            "State": "@nav/api/Notebook.State"
                        }
                    }
                },
                {
                    "name": "tag",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The tag of the element, equivalent to the  `tagName`  property of  `HTMLElement` .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "MdCellView.tag",
                    "navPath": "@nav/api/Notebook.MdCellView.tag",
                    "code": {
                        "filePath": "src/lib/notebook/md-cell-view.ts",
                        "declaration": "public readonly tag = 'div'",
                        "implementation": "",
                        "startLine": 99,
                        "endLine": 100,
                        "references": {
                            "tag": "@nav/api/Notebook.MdCellView.tag"
                        }
                    }
                },
                {
                    "name": "CssSelector",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Component's class name for CSS query.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "MdCellView.CssSelector",
                    "navPath": "@nav/api/Notebook.MdCellView.CssSelector",
                    "code": {
                        "filePath": "src/lib/notebook/md-cell-view.ts",
                        "declaration": "static readonly CssSelector = 'mknb-MdCellView'",
                        "implementation": "",
                        "startLine": 98,
                        "endLine": 99,
                        "references": {
                            "CssSelector": "@nav/api/Notebook.MdCellView.CssSelector"
                        }
                    }
                },
                {
                    "name": "FromDomAttributes",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Defines the methods to retrieve constructor's arguments from the DOM element  `md-cell`  within\nMarkdown content.\n\n<note level='warning'>\nBe mindful of the conversion from  `camelCase`  to  `kebab-case` .\n</note>",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "MdCellView.FromDomAttributes",
                    "navPath": "@nav/api/Notebook.MdCellView.FromDomAttributes",
                    "code": {
                        "filePath": "src/lib/notebook/md-cell-view.ts",
                        "declaration": "static readonly FromDomAttributes = {\n        cellId: (e: HTMLElement) =>\n            e.getAttribute('cell-id') ?? e.getAttribute('id') ?? getCellUid(),\n        content: (e: HTMLElement) => e.textContent ?? '',\n        readOnly: (e: HTMLElement) => e.getAttribute('read-only') === 'true',\n        lineNumber: (e: HTMLElement) =>\n            e.getAttribute('line-number') === 'true',\n    }",
                        "implementation": "",
                        "startLine": 143,
                        "endLine": 144,
                        "references": {
                            "FromDomAttributes": "@nav/api/Notebook.MdCellView.FromDomAttributes",
                            "HTMLElement": "https://www.typescriptlang.org/docs/handbook/dom-manipulation.html"
                        }
                    }
                }
            ],
            "callables": [
                {
                    "name": "constructor",
                    "documentation": {
                        "sections": [
                            {
                                "content": "Initialize a new instance.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            },
                            {
                                "title": "Arguments",
                                "content": "\n*  **cellAttributes**: Cell's attributes.\n*  **cellId**: The cell's ID.\n*  **content**: The cell's content.\n*  **parserOptions**: Markdown parsing options.\n*  **state**: The page's state.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "arguments",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "MdCellView.constructor",
                    "navPath": "@nav/api/Notebook.MdCellView.constructor",
                    "code": {
                        "filePath": "src/lib/notebook/md-cell-view.ts",
                        "declaration": "constructor(params: {\n    cellId: string\n    content: string\n    state: State\n    parserOptions: MdParsingOptions\n    cellAttributes: MdCellAttributes\n})",
                        "implementation": "constructor(params: {\n    cellId: string\n    content: string\n    state: State\n    parserOptions: MdParsingOptions\n    cellAttributes: MdCellAttributes\n}) {\n    Object.assign(this, params)\n    this.invalidated$ = this.state.invalidated$.pipe(\n        filter((cellId) => cellId === this.cellId),\n    )\n    this.editorView = new SnippetEditorView({\n        language: 'markdown',\n        readOnly: false,\n        content: params.content,\n        lineNumbers: this.cellAttributes.lineNumbers,\n        onExecute: () => {\n            this.state.execute(this.cellId).then(\n                () => {\n                    /*No OP*/\n                },\n                () => {\n                    throw Error(\n                        `Failed to execute the Mardown cell with content: ${params.content}`,\n                    )\n                },\n            )\n        },\n    })\n    this.content$ = this.editorView.content$\n    this.children = [\n        new FutureCellView({\n            language: 'markdown',\n            cellId: this.cellId,\n            state: this.state,\n            editorView: this.editorView,\n            cellAttributes: this.cellAttributes,\n            reactive$: of(false),\n        }),\n    ]\n}",
                        "startLine": 194,
                        "endLine": 235,
                        "references": {
                            "MdCellView": "@nav/api/Notebook.MdCellView",
                            "CellCommonAttributes": "@nav/api/Notebook.CellCommonAttributes",
                            "MdParsingOptions": "@nav/api/MainModule.MdParsingOptions",
                            "State": "@nav/api/Notebook.State"
                        }
                    },
                    "semantic": {
                        "role": "constructor",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    }
                },
                {
                    "name": "execute",
                    "documentation": {
                        "sections": [
                            {
                                "content": "Execute the cell. Because markdown cell can include other cells, this function own a dedicated  <mkapi-api-link nav=\"@nav/api/Notebook.State\" semantic=\"class\">State</mkapi-api-link> .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            },
                            {
                                "title": "Arguments",
                                "content": "\n*  **args**: See  <mkapi-api-link nav=\"@nav/api/Notebook.ExecArgs\" semantic=\"type-alias\">ExecArgs</mkapi-api-link> .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "arguments",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "MdCellView.execute",
                    "navPath": "@nav/api/Notebook.MdCellView.execute",
                    "code": {
                        "filePath": "src/lib/notebook/md-cell-view.ts",
                        "declaration": "async execute({\n    scope,\n    owningState,\n    cellId,\n    src,\n    displayFactory,\n    output$,\n    error$,\n    load,\n}: ExecArgs): Promise<Scope>",
                        "implementation": "async execute({\n    scope,\n    owningState,\n    cellId,\n    src,\n    displayFactory,\n    output$,\n    error$,\n    load,\n}: ExecArgs): Promise<Scope> {\n    const state = new State({\n        initialScope: scope,\n        parent: { state: owningState, cellId },\n        router: this.state.router,\n    })\n    const patchSrc = src\n        .replace(/\\${/g, '<js-inlined>')\n        .replace(/}\\$/g, '</js-inlined>')\n\n    const vdom = Dependencies.parseMd({\n        src: patchSrc,\n        ...this.parserOptions,\n        views: {\n            'js-inlined': (elem) => {\n                return new InlinedCode({\n                    cellId,\n                    src: elem.textContent ?? '',\n                    scope,\n                    displayFactory,\n                    invalidated$: this.invalidated$,\n                    error$,\n                    load,\n                })\n            },\n            ...state.getCellsFactory(),\n        },\n    })\n    output$.next(vdom)\n    return await state.execute(state.ids.slice(-1)[0])\n}",
                        "startLine": 241,
                        "endLine": 281,
                        "references": {
                            "execute": "@nav/api/Notebook.MdCellView.execute",
                            "ExecArgs": "@nav/api/Notebook.ExecArgs",
                            "Scope": "@nav/api/Notebook.Scope",
                            "Promise": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise"
                        }
                    },
                    "semantic": {
                        "role": "method",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    }
                },
                {
                    "name": "FromDom",
                    "documentation": {
                        "sections": [
                            {
                                "content": "Initialize an instance of  <mkapi-api-link nav=\"@nav/api/Notebook.MdCellView\" semantic=\"class\">MdCellView</mkapi-api-link>  from a DOM element  `md-cell`  in Markdown content\n (the parameter  `state`  &  `parserOptions`  are automatically provided).\n\n<note level=\"hint\" label=\"Constructor's attributes mapping\">\n The static property  <mkapi-api-link nav=\"@nav/api/Notebook.MdCellView.FromDomAttributes\" semantic=\"attribute\">FromDomAttributes</mkapi-api-link> \n defines the mapping between the DOM element and the constructor's attributes.\n</note>",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            },
                            {
                                "title": "Arguments",
                                "content": "\n*  **elem**: The DOM element.\n*  **parserOptions**: Markdown parsing options.\n*  **state**: The page state.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "arguments",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "MdCellView.FromDom",
                    "navPath": "@nav/api/Notebook.MdCellView.FromDom",
                    "code": {
                        "filePath": "src/lib/notebook/md-cell-view.ts",
                        "declaration": "static FromDom({\n    elem,\n    parserOptions,\n    state,\n}: {\n    elem: HTMLElement\n    parserOptions: MdParsingOptions\n    state: State\n})",
                        "implementation": "static FromDom({\n    elem,\n    parserOptions,\n    state,\n}: {\n    elem: HTMLElement\n    parserOptions: MdParsingOptions\n    state: State\n}) {\n    const params = {\n        cellId: MdCellView.FromDomAttributes.cellId(elem),\n        content: MdCellView.FromDomAttributes.content(elem),\n        cellAttributes: {\n            readOnly: MdCellView.FromDomAttributes.readOnly(elem),\n            lineNumber: MdCellView.FromDomAttributes.lineNumber(elem),\n        },\n    }\n    return new MdCellView({ ...params, parserOptions, state })\n}",
                        "startLine": 165,
                        "endLine": 184,
                        "references": {
                            "FromDom": "@nav/api/Notebook.MdCellView.FromDom",
                            "MdParsingOptions": "@nav/api/MainModule.MdParsingOptions",
                            "State": "@nav/api/Notebook.State",
                            "HTMLElement": "https://www.typescriptlang.org/docs/handbook/dom-manipulation.html",
                            "MdCellView": "@nav/api/Notebook.MdCellView"
                        }
                    },
                    "semantic": {
                        "role": "method",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    }
                }
            ],
            "code": {
                "filePath": "src/lib/notebook/md-cell-view.ts",
                "declaration": "export class MdCellView implements VirtualDOM<'div'>, CellTrait",
                "implementation": "export class MdCellView implements VirtualDOM<'div'>, CellTrait {\n    /**\n     * Component's class name for CSS query.\n     */\n    static readonly CssSelector = 'mknb-MdCellView'\n    public readonly tag = 'div'\n    /**\n     * Classes associated with the view.\n     */\n    public readonly class = MdCellView.CssSelector\n    public readonly children: ChildrenLike\n    /**\n     * Cell's ID.\n     */\n    public readonly cellId: string\n    /**\n     * Cell's Attributes.\n     */\n    public readonly cellAttributes: MdCellAttributes\n    /**\n     * State manager, owned by the parent {@link NotebookPage}.\n     */\n    public readonly state: State\n    /**\n     * Encapsulated editor view.\n     */\n    public readonly editorView: CodeSnippetView\n    /**\n     * Observable over the source content of the cell.\n     */\n    public readonly content$: BehaviorSubject<string>\n\n    /**\n     * Options for parsing Markdown code.\n     */\n    public readonly parserOptions: MdParsingOptions\n    /**\n     * Emit when the cell is invalidated.\n     */\n    public readonly invalidated$: Observable<unknown>\n\n    /**\n     * Defines the methods to retrieve constructor's arguments from the DOM element `md-cell` within\n     * Markdown content.\n     *\n     * <note level='warning'>\n     * Be mindful of the conversion from `camelCase` to `kebab-case`.\n     * </note>\n     */\n    static readonly FromDomAttributes = {\n        cellId: (e: HTMLElement) =>\n            e.getAttribute('cell-id') ?? e.getAttribute('id') ?? getCellUid(),\n        content: (e: HTMLElement) => e.textContent ?? '',\n        readOnly: (e: HTMLElement) => e.getAttribute('read-only') === 'true',\n        lineNumber: (e: HTMLElement) =>\n            e.getAttribute('line-number') === 'true',\n    }\n    /**\n     * Initialize an instance of {@link MdCellView} from a DOM element `md-cell` in Markdown content\n     *  (the parameter `state` & `parserOptions` are automatically provided).\n     *\n     * <note level=\"hint\" label=\"Constructor's attributes mapping\">\n     *  The static property {@link MdCellView.FromDomAttributes | FromDomAttributes}\n     *  defines the mapping between the DOM element and the constructor's attributes.\n     * </note>\n     *\n     * @param _p\n     * @param _p.elem The DOM element.\n     * @param _p.parserOptions Markdown parsing options.\n     * @param _p.state The page state.\n     */\n    static FromDom({\n        elem,\n        parserOptions,\n        state,\n    }: {\n        elem: HTMLElement\n        parserOptions: MdParsingOptions\n        state: State\n    }) {\n        const params = {\n            cellId: MdCellView.FromDomAttributes.cellId(elem),\n            content: MdCellView.FromDomAttributes.content(elem),\n            cellAttributes: {\n                readOnly: MdCellView.FromDomAttributes.readOnly(elem),\n                lineNumber: MdCellView.FromDomAttributes.lineNumber(elem),\n            },\n        }\n        return new MdCellView({ ...params, parserOptions, state })\n    }\n    /**\n     * Initialize a new instance.\n     *\n     * @param params\n     * @param params.cellId The cell's ID.\n     * @param params.content The cell's content.\n     * @param params.state The page's state.\n     * @param params.parserOptions Markdown parsing options.\n     * @param params.cellAttributes Cell's attributes.\n     */\n    constructor(params: {\n        cellId: string\n        content: string\n        state: State\n        parserOptions: MdParsingOptions\n        cellAttributes: MdCellAttributes\n    }) {\n        Object.assign(this, params)\n        this.invalidated$ = this.state.invalidated$.pipe(\n            filter((cellId) => cellId === this.cellId),\n        )\n        this.editorView = new SnippetEditorView({\n            language: 'markdown',\n            readOnly: false,\n            content: params.content,\n            lineNumbers: this.cellAttributes.lineNumbers,\n            onExecute: () => {\n                this.state.execute(this.cellId).then(\n                    () => {\n                        /*No OP*/\n                    },\n                    () => {\n                        throw Error(\n                            `Failed to execute the Mardown cell with content: ${params.content}`,\n                        )\n                    },\n                )\n            },\n        })\n        this.content$ = this.editorView.content$\n        this.children = [\n            new FutureCellView({\n                language: 'markdown',\n                cellId: this.cellId,\n                state: this.state,\n                editorView: this.editorView,\n                cellAttributes: this.cellAttributes,\n                reactive$: of(false),\n            }),\n        ]\n    }\n\n    /**\n     * Execute the cell. Because markdown cell can include other cells, this function own a dedicated {@link State}.\n     *\n     * @param args See {@link ExecArgs}.\n     */\n    async execute({\n        scope,\n        owningState,\n        cellId,\n        src,\n        displayFactory,\n        output$,\n        error$,\n        load,\n    }: ExecArgs): Promise<Scope> {\n        const state = new State({\n            initialScope: scope,\n            parent: { state: owningState, cellId },\n            router: this.state.router,\n        })\n        const patchSrc = src\n            .replace(/\\${/g, '<js-inlined>')\n            .replace(/}\\$/g, '</js-inlined>')\n\n        const vdom = Dependencies.parseMd({\n            src: patchSrc,\n            ...this.parserOptions,\n            views: {\n                'js-inlined': (elem) => {\n                    return new InlinedCode({\n                        cellId,\n                        src: elem.textContent ?? '',\n                        scope,\n                        displayFactory,\n                        invalidated$: this.invalidated$,\n                        error$,\n                        load,\n                    })\n                },\n                ...state.getCellsFactory(),\n            },\n        })\n        output$.next(vdom)\n        return await state.execute(state.ids.slice(-1)[0])\n    }\n}",
                "startLine": 94,
                "endLine": 282,
                "references": {
                    "MdCellView": "@nav/api/Notebook.MdCellView",
                    "CellCommonAttributes": "@nav/api/Notebook.CellCommonAttributes",
                    "MdParsingOptions": "@nav/api/MainModule.MdParsingOptions",
                    "State": "@nav/api/Notebook.State",
                    "CellTrait.cellId": "@nav/api/Notebook.CellTrait.cellId",
                    "CellTrait.content$": "@nav/api/Notebook.CellTrait.content$",
                    "CodeSnippetView": "@nav/api/MainModule/MdWidgets.CodeSnippetView",
                    "ExecArgs": "@nav/api/Notebook.ExecArgs",
                    "Scope": "@nav/api/Notebook.Scope",
                    "CellTrait.execute": "@nav/api/Notebook.CellTrait.execute",
                    "CellTrait": "@nav/api/Notebook.CellTrait",
                    "ChildrenLike": "/apps/@rx-vdom/doc/latest?nav=/api.ChildrenLike",
                    "BehaviorSubject": "https://www.learnrxjs.io/learn-rxjs/subjects/subject",
                    "Observable": "https://rxjs.dev/guide/observable",
                    "HTMLElement": "https://www.typescriptlang.org/docs/handbook/dom-manipulation.html",
                    "Promise": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
                    "VirtualDOM": "/apps/@rx-vdom/doc/latest?nav=/api.VirtualDOM"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "NotebookPage",
            "documentation": {
                "sections": [
                    {
                        "content": "Represents a  <mkapi-api-link nav=\"@nav/api/Notebook.NotebookSection\" semantic=\"class\">NotebookSection</mkapi-api-link>  that actually defines the whole page content of a document.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "NotebookPage",
            "navPath": "@nav/api/Notebook.NotebookPage",
            "attributes": [
                {
                    "name": "children",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Children of the element.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "NotebookSection.children",
                    "navPath": "@nav/api/Notebook.NotebookSection.children",
                    "code": {
                        "filePath": "src/lib/notebook/notebook-page.ts",
                        "declaration": "public readonly children: ChildrenLike = []",
                        "implementation": "",
                        "startLine": 97,
                        "endLine": 98,
                        "references": {
                            "children": "@nav/api/Notebook.NotebookSection.children",
                            "ChildrenLike": "/apps/@rx-vdom/doc/latest?nav=/api.ChildrenLike"
                        }
                    }
                },
                {
                    "name": "class",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Classes associated to the view.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "NotebookSection.class",
                    "navPath": "@nav/api/Notebook.NotebookSection.class",
                    "code": {
                        "filePath": "src/lib/notebook/notebook-page.ts",
                        "declaration": "public readonly class = NotebookSection.CssSelector",
                        "implementation": "",
                        "startLine": 93,
                        "endLine": 94,
                        "references": {
                            "class": "@nav/api/Notebook.NotebookSection.class"
                        }
                    }
                },
                {
                    "name": "options",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Options provided to the  `constructor` .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "NotebookSection.options",
                    "navPath": "@nav/api/Notebook.NotebookSection.options",
                    "code": {
                        "filePath": "src/lib/notebook/notebook-page.ts",
                        "declaration": "public readonly options?: NotebookOptions",
                        "implementation": "",
                        "startLine": 107,
                        "endLine": 108,
                        "references": {
                            "options": "@nav/api/Notebook.NotebookSection.options",
                            "NotebookOptions": "@nav/api/Notebook.NotebookOptions"
                        }
                    }
                },
                {
                    "name": "state",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "State manager.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "NotebookSection.state",
                    "navPath": "@nav/api/Notebook.NotebookSection.state",
                    "code": {
                        "filePath": "src/lib/notebook/notebook-page.ts",
                        "declaration": "public readonly state: State",
                        "implementation": "",
                        "startLine": 102,
                        "endLine": 103,
                        "references": {
                            "state": "@nav/api/Notebook.NotebookSection.state",
                            "State": "@nav/api/Notebook.State"
                        }
                    }
                },
                {
                    "name": "tag",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The tag of the element, equivalent to the  `tagName`  property of  `HTMLElement` .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "NotebookSection.tag",
                    "navPath": "@nav/api/Notebook.NotebookSection.tag",
                    "code": {
                        "filePath": "src/lib/notebook/notebook-page.ts",
                        "declaration": "public readonly tag = 'div'",
                        "implementation": "",
                        "startLine": 89,
                        "endLine": 90,
                        "references": {
                            "tag": "@nav/api/Notebook.NotebookSection.tag"
                        }
                    }
                },
                {
                    "name": "CssSelector",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Component's class name for CSS query.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "NotebookSection.CssSelector",
                    "navPath": "@nav/api/Notebook.NotebookSection.CssSelector",
                    "code": {
                        "filePath": "src/lib/notebook/notebook-page.ts",
                        "declaration": "static readonly CssSelector = 'mknb-NotebookSection'",
                        "implementation": "",
                        "startLine": 86,
                        "endLine": 87,
                        "references": {
                            "CssSelector": "@nav/api/Notebook.NotebookSection.CssSelector"
                        }
                    }
                }
            ],
            "callables": [
                {
                    "name": "constructor",
                    "documentation": {
                        "sections": [
                            {
                                "content": "Constructs the page.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            },
                            {
                                "title": "Arguments",
                                "content": "\n*  **params**: The parameters, see  <mkapi-api-link nav=\"@nav/api/Notebook.NotebookViewParameters\" semantic=\"type-alias\">NotebookViewParameters</mkapi-api-link> .\n*  **ctx**: Execution context used for logging and tracing.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "arguments",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "NotebookPage.constructor",
                    "navPath": "@nav/api/Notebook.NotebookPage.constructor",
                    "code": {
                        "filePath": "src/lib/notebook/notebook-page.ts",
                        "declaration": "constructor(params: NotebookViewParameters, ctx?: ContextTrait)",
                        "implementation": "constructor(params: NotebookViewParameters, ctx?: ContextTrait) {\n    super(\n        {\n            ...params,\n            onDisplayed: () => {\n                this.router.target$\n                    .pipe(\n                        take(1),\n                        filter((page) => isResolvedTarget(page)),\n                        filter((page) => page.sectionId !== undefined),\n                        delay(this.scrollToDelay),\n                    )\n                    .subscribe((page) => {\n                        this.router.scrollTo(page.sectionId)\n                    })\n            },\n        },\n        ctx,\n    )\n}",
                        "startLine": 235,
                        "endLine": 255,
                        "references": {
                            "NotebookPage": "@nav/api/Notebook.NotebookPage",
                            "NotebookViewParameters": "@nav/api/Notebook.NotebookViewParameters",
                            "ContextTrait": "@nav/api/MainModule.ContextTrait"
                        }
                    },
                    "semantic": {
                        "role": "constructor",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    }
                }
            ],
            "code": {
                "filePath": "src/lib/notebook/notebook-page.ts",
                "declaration": "export class NotebookPage extends NotebookSection",
                "implementation": "export class NotebookPage extends NotebookSection {\n    public readonly scrollToDelay = 200\n\n    /**\n     * Constructs the page.\n     *\n     * @param params The parameters, see {@link NotebookViewParameters}.\n     * @param ctx Execution context used for logging and tracing.\n     */\n    constructor(params: NotebookViewParameters, ctx?: ContextTrait) {\n        super(\n            {\n                ...params,\n                onDisplayed: () => {\n                    this.router.target$\n                        .pipe(\n                            take(1),\n                            filter((page) => isResolvedTarget(page)),\n                            filter((page) => page.sectionId !== undefined),\n                            delay(this.scrollToDelay),\n                        )\n                        .subscribe((page) => {\n                            this.router.scrollTo(page.sectionId)\n                        })\n                },\n            },\n            ctx,\n        )\n    }\n}",
                "startLine": 226,
                "endLine": 256,
                "references": {
                    "NotebookPage": "@nav/api/Notebook.NotebookPage",
                    "NotebookViewParameters": "@nav/api/Notebook.NotebookViewParameters",
                    "ContextTrait": "@nav/api/MainModule.ContextTrait",
                    "NotebookSection.constructor": "@nav/api/Notebook.NotebookSection.constructor",
                    "NotebookSection.children": "@nav/api/Notebook.NotebookSection.children",
                    "NotebookSection.class": "@nav/api/Notebook.NotebookSection.class",
                    "NotebookSection.context": "@nav/api/Notebook.NotebookSection.context",
                    "NotebookOptions": "@nav/api/Notebook.NotebookOptions",
                    "NotebookSection.options": "@nav/api/Notebook.NotebookSection.options",
                    "Router": "@nav/api/MainModule.Router",
                    "NotebookSection.router": "@nav/api/Notebook.NotebookSection.router",
                    "NotebookSection.scrollToDelay": "@nav/api/Notebook.NotebookSection.scrollToDelay",
                    "State": "@nav/api/Notebook.State",
                    "NotebookSection.state": "@nav/api/Notebook.NotebookSection.state",
                    "NotebookSection.tag": "@nav/api/Notebook.NotebookSection.tag",
                    "NotebookSection.url": "@nav/api/Notebook.NotebookSection.url",
                    "ViewGenerator": "@nav/api/MainModule.ViewGenerator",
                    "NotebookSection.views": "@nav/api/Notebook.NotebookSection.views",
                    "NotebookSection.CssSelector": "@nav/api/Notebook.NotebookSection.CssSelector",
                    "NotebookSection": "@nav/api/Notebook.NotebookSection",
                    "ChildrenLike": "/apps/@rx-vdom/doc/latest?nav=/api.ChildrenLike",
                    "Record": "https://www.typescriptlang.org/docs/handbook/utility-types.html#recordkeys-type"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "NotebookSection",
            "documentation": {
                "sections": [
                    {
                        "content": "Represents a section of a page included notebook cells.\n\nA notebook page is a markdown content including definition of executable cells\n(*e.g.*  <mkapi-api-link nav=\"@nav/api/Notebook.JsCellView\" semantic=\"class\">JsCellView</mkapi-api-link> ,  <mkapi-api-link nav=\"@nav/api/Notebook.MdCellView\" semantic=\"class\">MdCellView</mkapi-api-link> ) as well as other related components.\n\nCells run in the order of inclusion, and share their top level scope.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "NotebookSection",
            "navPath": "@nav/api/Notebook.NotebookSection",
            "attributes": [
                {
                    "name": "children",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Children of the element.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "NotebookSection.children",
                    "navPath": "@nav/api/Notebook.NotebookSection.children",
                    "code": {
                        "filePath": "src/lib/notebook/notebook-page.ts",
                        "declaration": "public readonly children: ChildrenLike = []",
                        "implementation": "",
                        "startLine": 97,
                        "endLine": 98,
                        "references": {
                            "children": "@nav/api/Notebook.NotebookSection.children",
                            "ChildrenLike": "/apps/@rx-vdom/doc/latest?nav=/api.ChildrenLike"
                        }
                    }
                },
                {
                    "name": "class",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Classes associated to the view.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "NotebookSection.class",
                    "navPath": "@nav/api/Notebook.NotebookSection.class",
                    "code": {
                        "filePath": "src/lib/notebook/notebook-page.ts",
                        "declaration": "public readonly class = NotebookSection.CssSelector",
                        "implementation": "",
                        "startLine": 93,
                        "endLine": 94,
                        "references": {
                            "class": "@nav/api/Notebook.NotebookSection.class"
                        }
                    }
                },
                {
                    "name": "options",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Options provided to the  `constructor` .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "NotebookSection.options",
                    "navPath": "@nav/api/Notebook.NotebookSection.options",
                    "code": {
                        "filePath": "src/lib/notebook/notebook-page.ts",
                        "declaration": "public readonly options?: NotebookOptions",
                        "implementation": "",
                        "startLine": 107,
                        "endLine": 108,
                        "references": {
                            "options": "@nav/api/Notebook.NotebookSection.options",
                            "NotebookOptions": "@nav/api/Notebook.NotebookOptions"
                        }
                    }
                },
                {
                    "name": "state",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "State manager.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "NotebookSection.state",
                    "navPath": "@nav/api/Notebook.NotebookSection.state",
                    "code": {
                        "filePath": "src/lib/notebook/notebook-page.ts",
                        "declaration": "public readonly state: State",
                        "implementation": "",
                        "startLine": 102,
                        "endLine": 103,
                        "references": {
                            "state": "@nav/api/Notebook.NotebookSection.state",
                            "State": "@nav/api/Notebook.State"
                        }
                    }
                },
                {
                    "name": "tag",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The tag of the element, equivalent to the  `tagName`  property of  `HTMLElement` .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "NotebookSection.tag",
                    "navPath": "@nav/api/Notebook.NotebookSection.tag",
                    "code": {
                        "filePath": "src/lib/notebook/notebook-page.ts",
                        "declaration": "public readonly tag = 'div'",
                        "implementation": "",
                        "startLine": 89,
                        "endLine": 90,
                        "references": {
                            "tag": "@nav/api/Notebook.NotebookSection.tag"
                        }
                    }
                },
                {
                    "name": "CssSelector",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Component's class name for CSS query.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "NotebookSection.CssSelector",
                    "navPath": "@nav/api/Notebook.NotebookSection.CssSelector",
                    "code": {
                        "filePath": "src/lib/notebook/notebook-page.ts",
                        "declaration": "static readonly CssSelector = 'mknb-NotebookSection'",
                        "implementation": "",
                        "startLine": 86,
                        "endLine": 87,
                        "references": {
                            "CssSelector": "@nav/api/Notebook.NotebookSection.CssSelector"
                        }
                    }
                }
            ],
            "callables": [
                {
                    "name": "constructor",
                    "documentation": {
                        "sections": [
                            {
                                "content": "Constructs the page.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            },
                            {
                                "title": "Arguments",
                                "content": "\n*  **params**: The parameters, see  <mkapi-api-link nav=\"@nav/api/Notebook.NotebookViewParameters\" semantic=\"type-alias\">NotebookViewParameters</mkapi-api-link> .\n*  **options**: Global options for the page, in particular defined the default attribute for the various\n*  **src**: Markdown source content. To fetch from a URL leave it empty & provide instead\nthe  `url`  attribute.\n*  **url**: Url pointing to the markdown content, only used if the  `src`  attribute is not provided.\n*  **onDisplayed**: Callback triggered when the view has been displayed\ncells.\n*  **ctx**: Execution context used for logging and tracing.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "arguments",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "NotebookSection.constructor",
                    "navPath": "@nav/api/Notebook.NotebookSection.constructor",
                    "code": {
                        "filePath": "src/lib/notebook/notebook-page.ts",
                        "declaration": "constructor(\n    params: NotebookViewParameters & {\n        onDisplayed?: (elem: RxHTMLElement<'div'>) => void\n    },\n    ctx?: ContextTrait,\n)",
                        "implementation": "constructor(\n    params: NotebookViewParameters & {\n        onDisplayed?: (elem: RxHTMLElement<'div'>) => void\n    },\n    ctx?: ContextTrait,\n) {\n    Object.assign(this, params)\n    this.context = ctx ?? new NoContext()\n    const context = this.context.start('new NotebookPage', ['Notebook'])\n\n    if (params.src === undefined && params.url === undefined) {\n        console.error(\n            'Neither url or src parameter provided to the notebook page.',\n        )\n        return\n    }\n    this.state = new State(\n        {\n            router: this.router,\n            displayFactory: params.displayFactory,\n            initialScope: params.initialScope,\n        },\n        context,\n    )\n\n    const source$ =\n        params.src === undefined\n            ? from(fetch(this.url).then((resp) => resp.text())).pipe(\n                  take(1),\n              )\n            : of(params.src)\n\n    this.children = [\n        child$({\n            source$,\n            untilFirst: {\n                tag: 'i',\n                class: 'fas fa-spinner fa-spin',\n            },\n            vdomMap: (src) => {\n                const start = Date.now()\n                const vdom = Dependencies.parseMd({\n                    src,\n                    router: this.router,\n                    ...(this.options?.markdown ?? {}),\n                    views: {\n                        ...(this.options?.markdown?.views ?? {}),\n                        ...this.state.getCellsFactory(context),\n                    },\n                })\n                const end = Date.now()\n                context.info(\n                    `Markdown parsed in: ${String(end - start)} ms`,\n                )\n                return {\n                    ...vdom,\n                    connectedCallback: (elem: RxHTMLElement<'div'>) => {\n                        context.info(\n                            `View added in viewport (took ${String(Date.now() - end)} ms)`,\n                        )\n                        vdom.connectedCallback?.(elem)\n                        if (params.onDisplayed) {\n                            params.onDisplayed(elem)\n                        }\n\n                        if (params.options?.runAtStart) {\n                            const lastCellId = this.state.ids.slice(-1)[0]\n                            context.info(\n                                `Trigger page execution from cell ${lastCellId}`,\n                                {\n                                    options: params.options,\n                                    cellIds: [...this.state.ids],\n                                },\n                            )\n                            const start = Date.now()\n                            this.state\n                                .execute(lastCellId, true, context)\n                                .then(\n                                    (scope) => {\n                                        const end = Date.now()\n                                        context.info(\n                                            `Notebook execution time: ${String(end - start)} ms`,\n                                            { scope },\n                                        )\n                                    },\n                                    (e: unknown) => {\n                                        console.error(\n                                            `Failed to run notebook.`,\n                                            e,\n                                        )\n                                    },\n                                )\n                        }\n                    },\n                    disconnectedCallback: () => {\n                        this.state.dispose()\n                    },\n                }\n            },\n        }),\n    ]\n    context.exit()\n}",
                        "startLine": 118,
                        "endLine": 221,
                        "references": {
                            "NotebookSection": "@nav/api/Notebook.NotebookSection",
                            "NotebookStateParameters": "@nav/api/Notebook.NotebookStateParameters",
                            "NotebookOptions": "@nav/api/Notebook.NotebookOptions",
                            "ContextTrait": "@nav/api/MainModule.ContextTrait",
                            "RxHTMLElement": "/apps/@rx-vdom/doc/latest?nav=/api.RxHTMLElement"
                        }
                    },
                    "semantic": {
                        "role": "constructor",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    }
                }
            ],
            "code": {
                "filePath": "src/lib/notebook/notebook-page.ts",
                "declaration": "export class NotebookSection implements VirtualDOM<'div'>",
                "implementation": "export class NotebookSection implements VirtualDOM<'div'> {\n    /**\n     * Component's class name for CSS query.\n     */\n    static readonly CssSelector = 'mknb-NotebookSection'\n    public readonly scrollToDelay = 200\n\n    public readonly tag = 'div'\n    /**\n     * Classes associated to the view.\n     */\n    public readonly class = NotebookSection.CssSelector\n    public readonly url: string\n    public readonly views: Record<string, ViewGenerator>\n    public readonly router: Router\n    public readonly children: ChildrenLike = []\n\n    /**\n     * State manager.\n     */\n    public readonly state: State\n\n    /**\n     * Options provided to the `constructor`.\n     */\n    public readonly options?: NotebookOptions\n\n    public readonly context?: ContextTrait\n    /**\n     * Constructs the page.\n     *\n     * @param params The parameters, see {@link NotebookViewParameters}.\n     * @param params.onDisplayed Callback triggered when the view has been displayed\n     * cells.\n     * @param ctx Execution context used for logging and tracing.\n     */\n    constructor(\n        params: NotebookViewParameters & {\n            onDisplayed?: (elem: RxHTMLElement<'div'>) => void\n        },\n        ctx?: ContextTrait,\n    ) {\n        Object.assign(this, params)\n        this.context = ctx ?? new NoContext()\n        const context = this.context.start('new NotebookPage', ['Notebook'])\n\n        if (params.src === undefined && params.url === undefined) {\n            console.error(\n                'Neither url or src parameter provided to the notebook page.',\n            )\n            return\n        }\n        this.state = new State(\n            {\n                router: this.router,\n                displayFactory: params.displayFactory,\n                initialScope: params.initialScope,\n            },\n            context,\n        )\n\n        const source$ =\n            params.src === undefined\n                ? from(fetch(this.url).then((resp) => resp.text())).pipe(\n                      take(1),\n                  )\n                : of(params.src)\n\n        this.children = [\n            child$({\n                source$,\n                untilFirst: {\n                    tag: 'i',\n                    class: 'fas fa-spinner fa-spin',\n                },\n                vdomMap: (src) => {\n                    const start = Date.now()\n                    const vdom = Dependencies.parseMd({\n                        src,\n                        router: this.router,\n                        ...(this.options?.markdown ?? {}),\n                        views: {\n                            ...(this.options?.markdown?.views ?? {}),\n                            ...this.state.getCellsFactory(context),\n                        },\n                    })\n                    const end = Date.now()\n                    context.info(\n                        `Markdown parsed in: ${String(end - start)} ms`,\n                    )\n                    return {\n                        ...vdom,\n                        connectedCallback: (elem: RxHTMLElement<'div'>) => {\n                            context.info(\n                                `View added in viewport (took ${String(Date.now() - end)} ms)`,\n                            )\n                            vdom.connectedCallback?.(elem)\n                            if (params.onDisplayed) {\n                                params.onDisplayed(elem)\n                            }\n\n                            if (params.options?.runAtStart) {\n                                const lastCellId = this.state.ids.slice(-1)[0]\n                                context.info(\n                                    `Trigger page execution from cell ${lastCellId}`,\n                                    {\n                                        options: params.options,\n                                        cellIds: [...this.state.ids],\n                                    },\n                                )\n                                const start = Date.now()\n                                this.state\n                                    .execute(lastCellId, true, context)\n                                    .then(\n                                        (scope) => {\n                                            const end = Date.now()\n                                            context.info(\n                                                `Notebook execution time: ${String(end - start)} ms`,\n                                                { scope },\n                                            )\n                                        },\n                                        (e: unknown) => {\n                                            console.error(\n                                                `Failed to run notebook.`,\n                                                e,\n                                            )\n                                        },\n                                    )\n                            }\n                        },\n                        disconnectedCallback: () => {\n                            this.state.dispose()\n                        },\n                    }\n                },\n            }),\n        ]\n        context.exit()\n    }\n}",
                "startLine": 82,
                "endLine": 222,
                "references": {
                    "NotebookSection": "@nav/api/Notebook.NotebookSection",
                    "NotebookStateParameters": "@nav/api/Notebook.NotebookStateParameters",
                    "NotebookOptions": "@nav/api/Notebook.NotebookOptions",
                    "ContextTrait": "@nav/api/MainModule.ContextTrait",
                    "Router": "@nav/api/MainModule.Router",
                    "State": "@nav/api/Notebook.State",
                    "ViewGenerator": "@nav/api/MainModule.ViewGenerator",
                    "NotebookPage": "@nav/api/Notebook.NotebookPage",
                    "RxHTMLElement": "/apps/@rx-vdom/doc/latest?nav=/api.RxHTMLElement",
                    "ChildrenLike": "/apps/@rx-vdom/doc/latest?nav=/api.ChildrenLike",
                    "Record": "https://www.typescriptlang.org/docs/handbook/utility-types.html#recordkeys-type",
                    "VirtualDOM": "/apps/@rx-vdom/doc/latest?nav=/api.VirtualDOM"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "OutputsView",
            "documentation": {
                "sections": [
                    {
                        "content": "Represents the output view of a cell (when using *e.g.* the  `display`  function).",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "OutputsView",
            "navPath": "@nav/api/Notebook.OutputsView",
            "attributes": [
                {
                    "name": "children",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Children of the element.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "OutputsView.children",
                    "navPath": "@nav/api/Notebook.OutputsView.children",
                    "code": {
                        "filePath": "src/lib/notebook/cell-views.ts",
                        "declaration": "public readonly children: ChildrenLike",
                        "implementation": "",
                        "startLine": 390,
                        "endLine": 391,
                        "references": {
                            "children": "@nav/api/Notebook.OutputsView.children",
                            "ChildrenLike": "/apps/@rx-vdom/doc/latest?nav=/api.ChildrenLike"
                        }
                    }
                },
                {
                    "name": "class",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Classes associated to the view.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "OutputsView.class",
                    "navPath": "@nav/api/Notebook.OutputsView.class",
                    "code": {
                        "filePath": "src/lib/notebook/cell-views.ts",
                        "declaration": "public readonly class: string = OutputsView.CssSelector",
                        "implementation": "",
                        "startLine": 389,
                        "endLine": 390,
                        "references": {
                            "class": "@nav/api/Notebook.OutputsView.class"
                        }
                    }
                },
                {
                    "name": "style",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The style associated with the element. Typically, for a static value:\n ```typescript\n{\n     tag: 'div',\n     style: {\n         backgroundColor: 'blue'\n     }\n}\n``` \nFor more details on hyphenated properties, see  <mkapi-ext-link href=\"/apps/@rx-vdom/doc/latest?nav=/api.CSSAttribute\">CSSAttribute</mkapi-ext-link> .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "OutputsView.style",
                    "navPath": "@nav/api/Notebook.OutputsView.style",
                    "code": {
                        "filePath": "src/lib/notebook/cell-views.ts",
                        "declaration": "public readonly style: CSSAttribute",
                        "implementation": "",
                        "startLine": 393,
                        "endLine": 394,
                        "references": {
                            "style": "@nav/api/Notebook.OutputsView.style",
                            "CSSAttribute": "/apps/@rx-vdom/doc/latest?nav=/api.CSSAttribute"
                        }
                    }
                },
                {
                    "name": "tag",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The tag of the element, equivalent to the  `tagName`  property of  `HTMLElement` .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "OutputsView.tag",
                    "navPath": "@nav/api/Notebook.OutputsView.tag",
                    "code": {
                        "filePath": "src/lib/notebook/cell-views.ts",
                        "declaration": "public readonly tag = 'div'",
                        "implementation": "",
                        "startLine": 385,
                        "endLine": 386,
                        "references": {
                            "tag": "@nav/api/Notebook.OutputsView.tag"
                        }
                    }
                },
                {
                    "name": "CssSelector",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Component's class name for CSS query.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "OutputsView.CssSelector",
                    "navPath": "@nav/api/Notebook.OutputsView.CssSelector",
                    "code": {
                        "filePath": "src/lib/notebook/cell-views.ts",
                        "declaration": "static readonly CssSelector = 'mknb-OutputsView'",
                        "implementation": "",
                        "startLine": 384,
                        "endLine": 385,
                        "references": {
                            "CssSelector": "@nav/api/Notebook.OutputsView.CssSelector"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/notebook/cell-views.ts",
                "declaration": "export class OutputsView implements VirtualDOM<'div'>",
                "implementation": "export class OutputsView implements VirtualDOM<'div'> {\n    /**\n     * Component's class name for CSS query.\n     */\n    static readonly CssSelector = 'mknb-OutputsView'\n    public readonly tag = 'div'\n    /**\n     * Classes associated to the view.\n     */\n    public readonly class: string = OutputsView.CssSelector\n    public readonly children: ChildrenLike\n    public readonly output$: Observable<Output>\n\n    public readonly style: CSSAttribute\n    /**\n     *\n     * @param params\n     * @param params.output$ Observable over the outputs to display.\n     * @param params.style Style to apply to this element.\n     * @param params.classList Classes added to this element.\n     */\n    constructor(params: {\n        output$: Observable<Output>\n        style?: CSSAttribute\n        classList?: string\n    }) {\n        Object.assign(this, params)\n        this.class = `${this.class} ${params.classList ?? ''}`\n        const outputs$ = new BehaviorSubject<Output[]>([])\n        this.output$.subscribe((out: Output) => {\n            if (out === undefined) {\n                outputs$.next([])\n                return\n            }\n            outputs$.next([...outputs$.value, out])\n        })\n        this.children = sync$({\n            source$: outputs$,\n            policy: 'sync',\n            vdomMap: (output: AnyVirtualDOM) => output,\n        })\n    }\n}",
                "startLine": 380,
                "endLine": 423,
                "references": {
                    "OutputsView": "@nav/api/Notebook.OutputsView",
                    "Output": "@nav/api/Notebook.Output",
                    "Observable": "https://rxjs.dev/guide/observable",
                    "CSSAttribute": "/apps/@rx-vdom/doc/latest?nav=/api.CSSAttribute",
                    "ChildrenLike": "/apps/@rx-vdom/doc/latest?nav=/api.ChildrenLike",
                    "VirtualDOM": "/apps/@rx-vdom/doc/latest?nav=/api.VirtualDOM"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "PyCellExecutor",
            "documentation": {
                "sections": [
                    {
                        "content": "Represents the execution side of a Python cell within a  <mkapi-api-link nav=\"@nav/api/Notebook.NotebookPage\" semantic=\"class\">NotebookPage</mkapi-api-link> .\n\nThis implementation does not provide the views (editor, outputs), it is used as it is when loading separated notebook\npages to retrieve exported symbols.\nHowever, this implementation is typically inherited from  <mkapi-api-link nav=\"@nav/api/Notebook.PyCellView\" semantic=\"class\">PyCellView</mkapi-api-link>  to provide the regular views of\na python cell.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "PyCellExecutor",
            "navPath": "@nav/api/Notebook.PyCellExecutor",
            "attributes": [
                {
                    "name": "cellAttributes",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The provided attributes.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "PyCellExecutor.cellAttributes",
                    "navPath": "@nav/api/Notebook.PyCellExecutor.cellAttributes",
                    "code": {
                        "filePath": "src/lib/notebook/py-cell-view.ts",
                        "declaration": "public readonly cellAttributes: PyCellAttributes",
                        "implementation": "",
                        "startLine": 42,
                        "endLine": 43,
                        "references": {
                            "cellAttributes": "@nav/api/Notebook.PyCellExecutor.cellAttributes",
                            "CellCommonAttributes": "@nav/api/Notebook.CellCommonAttributes"
                        }
                    }
                },
                {
                    "name": "cellId",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Cell ID.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "PyCellExecutor.cellId",
                    "navPath": "@nav/api/Notebook.PyCellExecutor.cellId",
                    "code": {
                        "filePath": "src/lib/notebook/py-cell-view.ts",
                        "declaration": "public readonly cellId: string",
                        "implementation": "",
                        "startLine": 28,
                        "endLine": 29,
                        "references": {
                            "cellId": "@nav/api/Notebook.PyCellExecutor.cellId",
                            "CellTrait.cellId": "@nav/api/Notebook.CellTrait.cellId"
                        }
                    }
                },
                {
                    "name": "content$",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Observable over the source content of the cell.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "PyCellExecutor.content$",
                    "navPath": "@nav/api/Notebook.PyCellExecutor.content$",
                    "code": {
                        "filePath": "src/lib/notebook/py-cell-view.ts",
                        "declaration": "public readonly content$: BehaviorSubject<string>",
                        "implementation": "",
                        "startLine": 47,
                        "endLine": 48,
                        "references": {
                            "content$": "@nav/api/Notebook.PyCellExecutor.content$",
                            "CellTrait.content$": "@nav/api/Notebook.CellTrait.content$",
                            "BehaviorSubject": "https://www.learnrxjs.io/learn-rxjs/subjects/subject"
                        }
                    }
                },
                {
                    "name": "invalidated$",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Emit when the cell is invalidated.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "PyCellExecutor.invalidated$",
                    "navPath": "@nav/api/Notebook.PyCellExecutor.invalidated$",
                    "code": {
                        "filePath": "src/lib/notebook/py-cell-view.ts",
                        "declaration": "public readonly invalidated$: Observable<unknown>",
                        "implementation": "",
                        "startLine": 33,
                        "endLine": 34,
                        "references": {
                            "invalidated$": "@nav/api/Notebook.PyCellExecutor.invalidated$",
                            "Observable": "https://rxjs.dev/guide/observable"
                        }
                    }
                },
                {
                    "name": "state",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "State manager, owned by the parent  <mkapi-api-link nav=\"@nav/api/Notebook.NotebookPage\" semantic=\"class\">NotebookPage</mkapi-api-link> .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "PyCellExecutor.state",
                    "navPath": "@nav/api/Notebook.PyCellExecutor.state",
                    "code": {
                        "filePath": "src/lib/notebook/py-cell-view.ts",
                        "declaration": "public readonly state: State",
                        "implementation": "",
                        "startLine": 37,
                        "endLine": 38,
                        "references": {
                            "state": "@nav/api/Notebook.PyCellExecutor.state",
                            "State": "@nav/api/Notebook.State"
                        }
                    }
                }
            ],
            "callables": [
                {
                    "name": "execute",
                    "documentation": {
                        "sections": [
                            {
                                "content": "Execute the cell. See  <mkapi-api-link nav=\"@nav/api/Notebook.executePy\" semantic=\"function\">executePy</mkapi-api-link> .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            },
                            {
                                "title": "Arguments",
                                "content": "\n*  **args**: See  <mkapi-api-link nav=\"@nav/api/Notebook.ExecArgs\" semantic=\"type-alias\">ExecArgs</mkapi-api-link> .\n*  **ctx**: Execution context used for logging and tracing.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "arguments",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "PyCellExecutor.execute",
                    "navPath": "@nav/api/Notebook.PyCellExecutor.execute",
                    "code": {
                        "filePath": "src/lib/notebook/py-cell-view.ts",
                        "declaration": "@Contextual({ async: true, key: (args: ExecArgs) => args.cellId })\nasync execute(args: ExecArgs, ctx?: ContextTrait): Promise<Scope>",
                        "implementation": "@Contextual({ async: true, key: (args: ExecArgs) => args.cellId })\nasync execute(args: ExecArgs, ctx?: ContextTrait): Promise<Scope> {\n    const pyodide = (window as unknown as { pyodide?: Pyodide }).pyodide\n    if (!pyodide) {\n        throw Error(\n            'No `window.pyodide` available to run the python cell. You can use `install({pyodide:...})' +\n                ' to provide a pyodide runtime.',\n        )\n    }\n    return await executePy(\n        {\n            ...args,\n            invalidated$: this.invalidated$,\n            pyNamespace: this.state.getPyNamespace(pyodide),\n        },\n        ctx,\n    )\n}",
                        "startLine": 68,
                        "endLine": 86,
                        "references": {
                            "execute": "@nav/api/Notebook.PyCellExecutor.execute",
                            "ExecArgs": "@nav/api/Notebook.ExecArgs",
                            "ContextTrait": "@nav/api/MainModule.ContextTrait",
                            "Scope": "@nav/api/Notebook.Scope",
                            "Promise": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise"
                        }
                    },
                    "semantic": {
                        "role": "method",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    }
                }
            ],
            "code": {
                "filePath": "src/lib/notebook/py-cell-view.ts",
                "declaration": "export class PyCellExecutor implements CellTrait",
                "implementation": "export class PyCellExecutor implements CellTrait {\n    /**\n     * Cell ID.\n     */\n    public readonly cellId: string\n\n    /**\n     * Emit when the cell is invalidated.\n     */\n    public readonly invalidated$: Observable<unknown>\n    /**\n     * State manager, owned by the parent {@link NotebookPage}.\n     */\n    public readonly state: State\n\n    /**\n     * The provided attributes.\n     */\n    public readonly cellAttributes: PyCellAttributes\n\n    /**\n     * Observable over the source content of the cell.\n     */\n    public readonly content$: BehaviorSubject<string>\n\n    constructor(params: {\n        cellId: string\n        content$: BehaviorSubject<string>\n        state: State\n        cellAttributes: PyCellAttributes\n    }) {\n        Object.assign(this, params)\n        this.invalidated$ = this.state.invalidated$.pipe(\n            filter((cellId) => cellId === this.cellId),\n        )\n    }\n\n    /**\n     * Execute the cell. See {@link executePy}.\n     *\n     * @param args See {@link ExecArgs}.\n     * @param ctx Execution context used for logging and tracing.\n     */\n    @Contextual({ async: true, key: (args: ExecArgs) => args.cellId })\n    async execute(args: ExecArgs, ctx?: ContextTrait): Promise<Scope> {\n        const pyodide = (window as unknown as { pyodide?: Pyodide }).pyodide\n        if (!pyodide) {\n            throw Error(\n                'No `window.pyodide` available to run the python cell. You can use `install({pyodide:...})' +\n                    ' to provide a pyodide runtime.',\n            )\n        }\n        return await executePy(\n            {\n                ...args,\n                invalidated$: this.invalidated$,\n                pyNamespace: this.state.getPyNamespace(pyodide),\n            },\n            ctx,\n        )\n    }\n}",
                "startLine": 24,
                "endLine": 86,
                "references": {
                    "PyCellExecutor": "@nav/api/Notebook.PyCellExecutor",
                    "CellCommonAttributes": "@nav/api/Notebook.CellCommonAttributes",
                    "State": "@nav/api/Notebook.State",
                    "CellTrait.cellId": "@nav/api/Notebook.CellTrait.cellId",
                    "CellTrait.content$": "@nav/api/Notebook.CellTrait.content$",
                    "ExecArgs": "@nav/api/Notebook.ExecArgs",
                    "ContextTrait": "@nav/api/MainModule.ContextTrait",
                    "Scope": "@nav/api/Notebook.Scope",
                    "CellTrait.execute": "@nav/api/Notebook.CellTrait.execute",
                    "PyCellView": "@nav/api/Notebook.PyCellView",
                    "CellTrait": "@nav/api/Notebook.CellTrait",
                    "BehaviorSubject": "https://www.learnrxjs.io/learn-rxjs/subjects/subject",
                    "Observable": "https://rxjs.dev/guide/observable",
                    "Promise": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "PyCellView",
            "documentation": {
                "sections": [
                    {
                        "content": "Represents a Python cell (running in browser) within a  <mkapi-api-link nav=\"@nav/api/Notebook.NotebookPage\" semantic=\"class\">NotebookPage</mkapi-api-link> .\n\nThey are typically included from a DOM definition with tag name  `py-cell`  in Markdown content,\nsee  <mkapi-api-link nav=\"@nav/api/Notebook.PyCellView.FromDom\" semantic=\"method\">PyCellView.FromDom</mkapi-api-link> .\n\nDetails regarding the execution are provided in the documentation of  <mkapi-api-link nav=\"@nav/api/Notebook.executePy\" semantic=\"function\">executePy</mkapi-api-link> .\n\n<note level='warning'>\nAn instance of Pyodide runtime should be available through  `window.pyodide`  with expected python modules installed.\n</note>",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "PyCellView",
            "navPath": "@nav/api/Notebook.PyCellView",
            "attributes": [
                {
                    "name": "cellAttributes",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The provided attributes.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "PyCellExecutor.cellAttributes",
                    "navPath": "@nav/api/Notebook.PyCellExecutor.cellAttributes",
                    "code": {
                        "filePath": "src/lib/notebook/py-cell-view.ts",
                        "declaration": "public readonly cellAttributes: PyCellAttributes",
                        "implementation": "",
                        "startLine": 42,
                        "endLine": 43,
                        "references": {
                            "cellAttributes": "@nav/api/Notebook.PyCellExecutor.cellAttributes",
                            "CellCommonAttributes": "@nav/api/Notebook.CellCommonAttributes"
                        }
                    }
                },
                {
                    "name": "cellId",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Cell ID.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "PyCellExecutor.cellId",
                    "navPath": "@nav/api/Notebook.PyCellExecutor.cellId",
                    "code": {
                        "filePath": "src/lib/notebook/py-cell-view.ts",
                        "declaration": "public readonly cellId: string",
                        "implementation": "",
                        "startLine": 28,
                        "endLine": 29,
                        "references": {
                            "cellId": "@nav/api/Notebook.PyCellExecutor.cellId",
                            "CellTrait.cellId": "@nav/api/Notebook.CellTrait.cellId"
                        }
                    }
                },
                {
                    "name": "children",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Children of the element.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "PyCellView.children",
                    "navPath": "@nav/api/Notebook.PyCellView.children",
                    "code": {
                        "filePath": "src/lib/notebook/py-cell-view.ts",
                        "declaration": "public readonly children: ChildrenLike",
                        "implementation": "",
                        "startLine": 111,
                        "endLine": 112,
                        "references": {
                            "children": "@nav/api/Notebook.PyCellView.children",
                            "ChildrenLike": "/apps/@rx-vdom/doc/latest?nav=/api.ChildrenLike"
                        }
                    }
                },
                {
                    "name": "class",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Classes associated with the view.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "PyCellView.class",
                    "navPath": "@nav/api/Notebook.PyCellView.class",
                    "code": {
                        "filePath": "src/lib/notebook/py-cell-view.ts",
                        "declaration": "public readonly class = PyCellView.CssSelector",
                        "implementation": "",
                        "startLine": 110,
                        "endLine": 111,
                        "references": {
                            "class": "@nav/api/Notebook.PyCellView.class"
                        }
                    }
                },
                {
                    "name": "content$",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Observable over the source content of the cell.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "PyCellExecutor.content$",
                    "navPath": "@nav/api/Notebook.PyCellExecutor.content$",
                    "code": {
                        "filePath": "src/lib/notebook/py-cell-view.ts",
                        "declaration": "public readonly content$: BehaviorSubject<string>",
                        "implementation": "",
                        "startLine": 47,
                        "endLine": 48,
                        "references": {
                            "content$": "@nav/api/Notebook.PyCellExecutor.content$",
                            "CellTrait.content$": "@nav/api/Notebook.CellTrait.content$",
                            "BehaviorSubject": "https://www.learnrxjs.io/learn-rxjs/subjects/subject"
                        }
                    }
                },
                {
                    "name": "editorView",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The encapsulated code editor view.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "PyCellView.editorView",
                    "navPath": "@nav/api/Notebook.PyCellView.editorView",
                    "code": {
                        "filePath": "src/lib/notebook/py-cell-view.ts",
                        "declaration": "public readonly editorView: CodeSnippetView",
                        "implementation": "",
                        "startLine": 116,
                        "endLine": 117,
                        "references": {
                            "editorView": "@nav/api/Notebook.PyCellView.editorView",
                            "CodeSnippetView": "@nav/api/MainModule/MdWidgets.CodeSnippetView"
                        }
                    }
                },
                {
                    "name": "invalidated$",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Emit when the cell is invalidated.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "PyCellExecutor.invalidated$",
                    "navPath": "@nav/api/Notebook.PyCellExecutor.invalidated$",
                    "code": {
                        "filePath": "src/lib/notebook/py-cell-view.ts",
                        "declaration": "public readonly invalidated$: Observable<unknown>",
                        "implementation": "",
                        "startLine": 33,
                        "endLine": 34,
                        "references": {
                            "invalidated$": "@nav/api/Notebook.PyCellExecutor.invalidated$",
                            "Observable": "https://rxjs.dev/guide/observable"
                        }
                    }
                },
                {
                    "name": "state",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "State manager, owned by the parent  <mkapi-api-link nav=\"@nav/api/Notebook.NotebookPage\" semantic=\"class\">NotebookPage</mkapi-api-link> .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "PyCellExecutor.state",
                    "navPath": "@nav/api/Notebook.PyCellExecutor.state",
                    "code": {
                        "filePath": "src/lib/notebook/py-cell-view.ts",
                        "declaration": "public readonly state: State",
                        "implementation": "",
                        "startLine": 37,
                        "endLine": 38,
                        "references": {
                            "state": "@nav/api/Notebook.PyCellExecutor.state",
                            "State": "@nav/api/Notebook.State"
                        }
                    }
                },
                {
                    "name": "tag",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The tag of the element, equivalent to the  `tagName`  property of  `HTMLElement` .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "PyCellView.tag",
                    "navPath": "@nav/api/Notebook.PyCellView.tag",
                    "code": {
                        "filePath": "src/lib/notebook/py-cell-view.ts",
                        "declaration": "public readonly tag = 'div'",
                        "implementation": "",
                        "startLine": 106,
                        "endLine": 107,
                        "references": {
                            "tag": "@nav/api/Notebook.PyCellView.tag"
                        }
                    }
                },
                {
                    "name": "CssSelector",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Component's class name for CSS query.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "PyCellView.CssSelector",
                    "navPath": "@nav/api/Notebook.PyCellView.CssSelector",
                    "code": {
                        "filePath": "src/lib/notebook/py-cell-view.ts",
                        "declaration": "static readonly CssSelector = 'mknb-PyCellView'",
                        "implementation": "",
                        "startLine": 105,
                        "endLine": 106,
                        "references": {
                            "CssSelector": "@nav/api/Notebook.PyCellView.CssSelector"
                        }
                    }
                },
                {
                    "name": "FromDomAttributes",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Defines the methods to retrieve constructor's arguments from the DOM element  `py-cell`  within\nMarkdown content.\n\n<note level='warning'>\nBe mindful of the conversion from  `camelCase`  to  `kebab-case` .\n</note>",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "PyCellView.FromDomAttributes",
                    "navPath": "@nav/api/Notebook.PyCellView.FromDomAttributes",
                    "code": {
                        "filePath": "src/lib/notebook/py-cell-view.ts",
                        "declaration": "static readonly FromDomAttributes = {\n        cellId: (e: HTMLElement) =>\n            e.getAttribute('cell-id') ?? e.getAttribute('id') ?? getCellUid(),\n        content: (e: HTMLElement) => e.textContent ?? '',\n        readOnly: (e: HTMLElement) => e.getAttribute('read-only') === 'true',\n        lineNumber: (e: HTMLElement) =>\n            e.getAttribute('line-number') === 'true',\n    }",
                        "implementation": "",
                        "startLine": 126,
                        "endLine": 127,
                        "references": {
                            "FromDomAttributes": "@nav/api/Notebook.PyCellView.FromDomAttributes",
                            "HTMLElement": "https://www.typescriptlang.org/docs/handbook/dom-manipulation.html"
                        }
                    }
                }
            ],
            "callables": [
                {
                    "name": "constructor",
                    "documentation": {
                        "sections": [
                            {
                                "content": "Initialize a new instance.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            },
                            {
                                "title": "Arguments",
                                "content": "\n*  **cellAttributes**: Cell's attributes.\n*  **cellId**: The cell's ID.\n*  **content**: The cell's content.\n*  **state**: The page's state.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "arguments",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "PyCellView.constructor",
                    "navPath": "@nav/api/Notebook.PyCellView.constructor",
                    "code": {
                        "filePath": "src/lib/notebook/py-cell-view.ts",
                        "declaration": "constructor(params: {\n    cellId: string\n    content: string\n    state: State\n    cellAttributes: PyCellAttributes\n})",
                        "implementation": "constructor(params: {\n    cellId: string\n    content: string\n    state: State\n    cellAttributes: PyCellAttributes\n}) {\n    const editorView = new SnippetEditorView({\n        language: 'python',\n        readOnly: params.cellAttributes.readOnly ?? false,\n        content: params.content,\n        lineNumbers: params.cellAttributes.lineNumbers ?? false,\n        onExecute: () => {\n            this.state.execute(this.cellId).then(\n                () => {\n                    /*No OP*/\n                },\n                () => {\n                    throw Error(`Failed to execute cell ${this.cellId}`)\n                },\n            )\n        },\n    })\n\n    super({ ...params, content$: editorView.content$ })\n    this.editorView = editorView\n\n    this.children = [\n        new FutureCellView({\n            language: 'python',\n            cellId: this.cellId,\n            state: this.state,\n            editorView: this.editorView,\n            cellAttributes: this.cellAttributes,\n            reactive$: of(false),\n        }),\n    ]\n}",
                        "startLine": 169,
                        "endLine": 206,
                        "references": {
                            "PyCellView": "@nav/api/Notebook.PyCellView",
                            "CellCommonAttributes": "@nav/api/Notebook.CellCommonAttributes",
                            "State": "@nav/api/Notebook.State"
                        }
                    },
                    "semantic": {
                        "role": "constructor",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    }
                },
                {
                    "name": "FromDom",
                    "documentation": {
                        "sections": [
                            {
                                "content": "Initialize an instance of  <mkapi-api-link nav=\"@nav/api/Notebook.PyCellView\" semantic=\"class\">PyCellView</mkapi-api-link>  from a DOM element  `py-cell`  in Markdown content\n (the parameter  `state`  is automatically provided).\n\n<note level=\"hint\" label=\"Constructor's attributes mapping\">\n The static property  <mkapi-api-link nav=\"@nav/api/Notebook.PyCellView.FromDomAttributes\" semantic=\"attribute\">FromDomAttributes</mkapi-api-link> \n defines the mapping between the DOM element and the constructor's attributes.\n</note>",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            },
                            {
                                "title": "Arguments",
                                "content": "\n*  **elem**: The DOM element.\n*  **state**: The page state.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "arguments",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "PyCellView.FromDom",
                    "navPath": "@nav/api/Notebook.PyCellView.FromDom",
                    "code": {
                        "filePath": "src/lib/notebook/py-cell-view.ts",
                        "declaration": "static FromDom({ elem, state }: { elem: HTMLElement; state: State })",
                        "implementation": "static FromDom({ elem, state }: { elem: HTMLElement; state: State }) {\n    const params = {\n        cellId: PyCellView.FromDomAttributes.cellId(elem),\n        content: PyCellView.FromDomAttributes.content(elem),\n        cellAttributes: {\n            readOnly: PyCellView.FromDomAttributes.readOnly(elem),\n            lineNumber: PyCellView.FromDomAttributes.lineNumber(elem),\n        },\n    }\n    return new PyCellView({ ...params, state })\n}",
                        "startLine": 148,
                        "endLine": 159,
                        "references": {
                            "FromDom": "@nav/api/Notebook.PyCellView.FromDom",
                            "State": "@nav/api/Notebook.State",
                            "HTMLElement": "https://www.typescriptlang.org/docs/handbook/dom-manipulation.html",
                            "PyCellView": "@nav/api/Notebook.PyCellView"
                        }
                    },
                    "semantic": {
                        "role": "method",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    }
                }
            ],
            "code": {
                "filePath": "src/lib/notebook/py-cell-view.ts",
                "declaration": "export class PyCellView extends PyCellExecutor implements VirtualDOM<'div'>",
                "implementation": "export class PyCellView extends PyCellExecutor implements VirtualDOM<'div'> {\n    /**\n     * Component's class name for CSS query.\n     */\n    static readonly CssSelector = 'mknb-PyCellView'\n    public readonly tag = 'div'\n    /**\n     * Classes associated with the view.\n     */\n    public readonly class = PyCellView.CssSelector\n    public readonly children: ChildrenLike\n\n    /**\n     * The encapsulated code editor view.\n     */\n    public readonly editorView: CodeSnippetView\n\n    /**\n     * Defines the methods to retrieve constructor's arguments from the DOM element `py-cell` within\n     * Markdown content.\n     *\n     * <note level='warning'>\n     * Be mindful of the conversion from `camelCase` to `kebab-case`.\n     * </note>\n     */\n    static readonly FromDomAttributes = {\n        cellId: (e: HTMLElement) =>\n            e.getAttribute('cell-id') ?? e.getAttribute('id') ?? getCellUid(),\n        content: (e: HTMLElement) => e.textContent ?? '',\n        readOnly: (e: HTMLElement) => e.getAttribute('read-only') === 'true',\n        lineNumber: (e: HTMLElement) =>\n            e.getAttribute('line-number') === 'true',\n    }\n\n    /**\n     * Initialize an instance of {@link PyCellView} from a DOM element `py-cell` in Markdown content\n     *  (the parameter `state` is automatically provided).\n     *\n     * <note level=\"hint\" label=\"Constructor's attributes mapping\">\n     *  The static property {@link PyCellView.FromDomAttributes | FromDomAttributes}\n     *  defines the mapping between the DOM element and the constructor's attributes.\n     * </note>\n     *\n     * @param _p\n     * @param _p.elem The DOM element.\n     * @param _p.state The page state.\n     */\n    static FromDom({ elem, state }: { elem: HTMLElement; state: State }) {\n        const params = {\n            cellId: PyCellView.FromDomAttributes.cellId(elem),\n            content: PyCellView.FromDomAttributes.content(elem),\n            cellAttributes: {\n                readOnly: PyCellView.FromDomAttributes.readOnly(elem),\n                lineNumber: PyCellView.FromDomAttributes.lineNumber(elem),\n            },\n        }\n        return new PyCellView({ ...params, state })\n    }\n\n    /**\n     * Initialize a new instance.\n     *\n     * @param params\n     * @param params.cellId The cell's ID.\n     * @param params.content The cell's content.\n     * @param params.state The page's state.\n     * @param params.cellAttributes Cell's attributes.\n     */\n    constructor(params: {\n        cellId: string\n        content: string\n        state: State\n        cellAttributes: PyCellAttributes\n    }) {\n        const editorView = new SnippetEditorView({\n            language: 'python',\n            readOnly: params.cellAttributes.readOnly ?? false,\n            content: params.content,\n            lineNumbers: params.cellAttributes.lineNumbers ?? false,\n            onExecute: () => {\n                this.state.execute(this.cellId).then(\n                    () => {\n                        /*No OP*/\n                    },\n                    () => {\n                        throw Error(`Failed to execute cell ${this.cellId}`)\n                    },\n                )\n            },\n        })\n\n        super({ ...params, content$: editorView.content$ })\n        this.editorView = editorView\n\n        this.children = [\n            new FutureCellView({\n                language: 'python',\n                cellId: this.cellId,\n                state: this.state,\n                editorView: this.editorView,\n                cellAttributes: this.cellAttributes,\n                reactive$: of(false),\n            }),\n        ]\n    }\n}",
                "startLine": 101,
                "endLine": 207,
                "references": {
                    "PyCellView": "@nav/api/Notebook.PyCellView",
                    "CellCommonAttributes": "@nav/api/Notebook.CellCommonAttributes",
                    "State": "@nav/api/Notebook.State",
                    "PyCellExecutor.constructor": "@nav/api/Notebook.PyCellExecutor.constructor",
                    "PyCellExecutor.cellAttributes": "@nav/api/Notebook.PyCellExecutor.cellAttributes",
                    "PyCellExecutor.cellId": "@nav/api/Notebook.PyCellExecutor.cellId",
                    "PyCellExecutor.content$": "@nav/api/Notebook.PyCellExecutor.content$",
                    "CodeSnippetView": "@nav/api/MainModule/MdWidgets.CodeSnippetView",
                    "PyCellExecutor.invalidated$": "@nav/api/Notebook.PyCellExecutor.invalidated$",
                    "PyCellExecutor.state": "@nav/api/Notebook.PyCellExecutor.state",
                    "ExecArgs": "@nav/api/Notebook.ExecArgs",
                    "ContextTrait": "@nav/api/MainModule.ContextTrait",
                    "Scope": "@nav/api/Notebook.Scope",
                    "PyCellExecutor.execute": "@nav/api/Notebook.PyCellExecutor.execute",
                    "PyCellExecutor": "@nav/api/Notebook.PyCellExecutor",
                    "ChildrenLike": "/apps/@rx-vdom/doc/latest?nav=/api.ChildrenLike",
                    "BehaviorSubject": "https://www.learnrxjs.io/learn-rxjs/subjects/subject",
                    "Observable": "https://rxjs.dev/guide/observable",
                    "HTMLElement": "https://www.typescriptlang.org/docs/handbook/dom-manipulation.html",
                    "Promise": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
                    "VirtualDOM": "/apps/@rx-vdom/doc/latest?nav=/api.VirtualDOM"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "SnippetEditorView",
            "documentation": {
                "sections": [
                    {
                        "content": "View that displays code snippet in edition mode.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "SnippetEditorView",
            "navPath": "@nav/api/Notebook.SnippetEditorView",
            "attributes": [
                {
                    "name": "children",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The children of the associated HTML element.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "CodeSnippetView.children",
                    "navPath": "@nav/api/MainModule/MdWidgets.CodeSnippetView.children",
                    "code": {
                        "filePath": "src/lib/md-widgets/code-snippet.view.ts",
                        "declaration": "public readonly children: ChildrenLike",
                        "implementation": "",
                        "startLine": 270,
                        "endLine": 271,
                        "references": {
                            "children": "@nav/api/MainModule/MdWidgets.CodeSnippetView.children",
                            "ChildrenLike": "/apps/@rx-vdom/doc/latest?nav=/api.ChildrenLike"
                        }
                    }
                },
                {
                    "name": "class",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The class list of the associated HTML element.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "CodeSnippetView.class",
                    "navPath": "@nav/api/MainModule/MdWidgets.CodeSnippetView.class",
                    "code": {
                        "filePath": "src/lib/md-widgets/code-snippet.view.ts",
                        "declaration": "public readonly class = `mkdocs-CodeSnippetView w-100 overflow-auto mb-3 mkdocs-resize-observer`",
                        "implementation": "",
                        "startLine": 260,
                        "endLine": 261,
                        "references": {
                            "class": "@nav/api/MainModule/MdWidgets.CodeSnippetView.class"
                        }
                    }
                },
                {
                    "name": "codeMirrorConfiguration",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The code mirror configuration.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "CodeSnippetView.codeMirrorConfiguration",
                    "navPath": "@nav/api/MainModule/MdWidgets.CodeSnippetView.codeMirrorConfiguration",
                    "code": {
                        "filePath": "src/lib/md-widgets/code-snippet.view.ts",
                        "declaration": "public readonly codeMirrorConfiguration = {\n        lineNumbers: true,\n        lineWrapping: false,\n        indentUnit: 4,\n        readOnly: true,\n    }",
                        "implementation": "",
                        "startLine": 250,
                        "endLine": 251,
                        "references": {
                            "codeMirrorConfiguration": "@nav/api/MainModule/MdWidgets.CodeSnippetView.codeMirrorConfiguration"
                        }
                    }
                },
                {
                    "name": "style",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The style of the associated HTML element.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "CodeSnippetView.style",
                    "navPath": "@nav/api/MainModule/MdWidgets.CodeSnippetView.style",
                    "code": {
                        "filePath": "src/lib/md-widgets/code-snippet.view.ts",
                        "declaration": "public readonly style = {\n        fontSize: '0.8rem',\n    }",
                        "implementation": "",
                        "startLine": 264,
                        "endLine": 265,
                        "references": {
                            "style": "@nav/api/MainModule/MdWidgets.CodeSnippetView.style"
                        }
                    }
                },
                {
                    "name": "tag",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The tag of the associated HTML element.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "CodeSnippetView.tag",
                    "navPath": "@nav/api/MainModule/MdWidgets.CodeSnippetView.tag",
                    "code": {
                        "filePath": "src/lib/md-widgets/code-snippet.view.ts",
                        "declaration": "public readonly tag = 'div'",
                        "implementation": "",
                        "startLine": 246,
                        "endLine": 247,
                        "references": {
                            "tag": "@nav/api/MainModule/MdWidgets.CodeSnippetView.tag"
                        }
                    }
                },
                {
                    "name": "CssSelector",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Component's class name for CSS query.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "CodeSnippetView.CssSelector",
                    "navPath": "@nav/api/MainModule/MdWidgets.CodeSnippetView.CssSelector",
                    "code": {
                        "filePath": "src/lib/md-widgets/code-snippet.view.ts",
                        "declaration": "static readonly CssSelector = 'mkdocs-CodeSnippetView'",
                        "implementation": "",
                        "startLine": 190,
                        "endLine": 191,
                        "references": {
                            "CssSelector": "@nav/api/MainModule/MdWidgets.CodeSnippetView.CssSelector"
                        }
                    }
                },
                {
                    "name": "hlLineClass",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Class appended to the line DOM for highlighted lines.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "CodeSnippetView.hlLineClass",
                    "navPath": "@nav/api/MainModule/MdWidgets.CodeSnippetView.hlLineClass",
                    "code": {
                        "filePath": "src/lib/md-widgets/code-snippet.view.ts",
                        "declaration": "static readonly hlLineClass = 'mkdocs-ts-bg-highlight'",
                        "implementation": "",
                        "startLine": 241,
                        "endLine": 242,
                        "references": {
                            "hlLineClass": "@nav/api/MainModule/MdWidgets.CodeSnippetView.hlLineClass"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/notebook/cell-views.ts",
                "declaration": "export class SnippetEditorView extends CodeSnippetView",
                "implementation": "export class SnippetEditorView extends CodeSnippetView {\n    /**\n     *\n     * @param params\n     * @param params.readOnly Whether the code is read-only.\n     * @param params.content The editor initial content.\n     * @param params.language The language of the cell.\n     * @param params.lineNumbers Whether to display line numbers.\n     * @param params.onExecute The action triggered upon execution (on 'Ctrl-Enter').\n     */\n    constructor({\n        language,\n        readOnly,\n        content,\n        lineNumbers,\n        onExecute,\n    }: {\n        content: string\n        language: 'markdown' | 'javascript' | 'python' | 'unknown'\n        readOnly?: boolean\n        lineNumbers?: boolean\n        onExecute: () => void\n    }) {\n        super({\n            content,\n            language,\n            cmConfig: {\n                lineNumbers: lineNumbers ?? false,\n                lineWrapping: false,\n                indentUnit: 4,\n                readOnly: readOnly ?? false,\n                extraKeys: {\n                    'Ctrl-Enter': onExecute,\n                },\n            },\n        })\n    }\n}",
                "startLine": 204,
                "endLine": 242,
                "references": {
                    "SnippetEditorView": "@nav/api/Notebook.SnippetEditorView",
                    "CodeSnippetView.constructor": "@nav/api/MainModule/MdWidgets.CodeSnippetView.constructor",
                    "CodeSnippetView.children": "@nav/api/MainModule/MdWidgets.CodeSnippetView.children",
                    "CodeSnippetView.class": "@nav/api/MainModule/MdWidgets.CodeSnippetView.class",
                    "CodeSnippetView.codeMirrorConfiguration": "@nav/api/MainModule/MdWidgets.CodeSnippetView.codeMirrorConfiguration",
                    "CodeSnippetView.content$": "@nav/api/MainModule/MdWidgets.CodeSnippetView.content$",
                    "CodeMirrorEditor": "@nav/api/MainModule/MdWidgets.CodeMirrorEditor",
                    "CodeSnippetView.editor$": "@nav/api/MainModule/MdWidgets.CodeSnippetView.editor$",
                    "CodeSnippetView.style": "@nav/api/MainModule/MdWidgets.CodeSnippetView.style",
                    "CodeSnippetView.tag": "@nav/api/MainModule/MdWidgets.CodeSnippetView.tag",
                    "CodeLanguage": "@nav/api/MainModule/MdWidgets.CodeLanguage",
                    "CodeMirror": "@nav/api/MainModule/MdWidgets.CodeMirror",
                    "CodeSnippetView.cmDependencies$": "@nav/api/MainModule/MdWidgets.CodeSnippetView.cmDependencies$",
                    "CodeSnippetView.CssSelector": "@nav/api/MainModule/MdWidgets.CodeSnippetView.CssSelector",
                    "CodeSnippetView.hlLineClass": "@nav/api/MainModule/MdWidgets.CodeSnippetView.hlLineClass",
                    "CodeSnippetView.refreshView": "@nav/api/MainModule/MdWidgets.CodeSnippetView.refreshView",
                    "CodeSnippetView.attributeMapper": "@nav/api/MainModule/MdWidgets.CodeSnippetView.attributeMapper",
                    "CodeSnippetView.fetchCmDependencies$": "@nav/api/MainModule/MdWidgets.CodeSnippetView.fetchCmDependencies$",
                    "CodeSnippetView": "@nav/api/MainModule/MdWidgets.CodeSnippetView",
                    "CodeSnippetView.fromHTMLElement": "@nav/api/MainModule/MdWidgets.CodeSnippetView.fromHTMLElement",
                    "ChildrenLike": "/apps/@rx-vdom/doc/latest?nav=/api.ChildrenLike",
                    "BehaviorSubject": "https://www.learnrxjs.io/learn-rxjs/subjects/subject",
                    "Record": "https://www.typescriptlang.org/docs/handbook/utility-types.html#recordkeys-type",
                    "Observable": "https://rxjs.dev/guide/observable",
                    "HTMLElement": "https://www.typescriptlang.org/docs/handbook/dom-manipulation.html"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "State",
            "documentation": {
                "sections": [
                    {
                        "content": "Represents the state of a  <mkapi-api-link nav=\"@nav/api/Notebook.NotebookPage\" semantic=\"class\">NotebookPage</mkapi-api-link>  or  <mkapi-api-link nav=\"@nav/api/Notebook.NotebookSection\" semantic=\"class\">NotebookSection</mkapi-api-link> .",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "State",
            "navPath": "@nav/api/Notebook.State",
            "attributes": [
                {
                    "name": "cellIds$",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Observables over the cell IDs included in the associated  <mkapi-api-link nav=\"@nav/api/Notebook.NotebookPage\" semantic=\"class\">NotebookPage</mkapi-api-link> .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "State.cellIds$",
                    "navPath": "@nav/api/Notebook.State.cellIds$",
                    "code": {
                        "filePath": "src/lib/notebook/state.ts",
                        "declaration": "public readonly cellIds$ = new BehaviorSubject<string[]>([])",
                        "implementation": "",
                        "startLine": 276,
                        "endLine": 277,
                        "references": {
                            "cellIds$": "@nav/api/Notebook.State.cellIds$",
                            "BehaviorSubject": "https://www.learnrxjs.io/learn-rxjs/subjects/subject"
                        }
                    }
                },
                {
                    "name": "cells",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "List of the cells in the page.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "State.cells",
                    "navPath": "@nav/api/Notebook.State.cells",
                    "code": {
                        "filePath": "src/lib/notebook/state.ts",
                        "declaration": "public readonly cells: CellTrait[] = []",
                        "implementation": "",
                        "startLine": 295,
                        "endLine": 296,
                        "references": {
                            "cells": "@nav/api/Notebook.State.cells",
                            "CellTrait": "@nav/api/Notebook.CellTrait"
                        }
                    }
                },
                {
                    "name": "cellsStatus$",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Observables over the cell's status keyed by the cell's ID.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "State.cellsStatus$",
                    "navPath": "@nav/api/Notebook.State.cellsStatus$",
                    "code": {
                        "filePath": "src/lib/notebook/state.ts",
                        "declaration": "public readonly cellsStatus$: Record<string, BehaviorSubject<CellStatus>> =\n        {}",
                        "implementation": "",
                        "startLine": 270,
                        "endLine": 271,
                        "references": {
                            "cellsStatus$": "@nav/api/Notebook.State.cellsStatus$",
                            "CellStatus": "@nav/api/Notebook.CellStatus",
                            "Record": "https://www.typescriptlang.org/docs/handbook/utility-types.html#recordkeys-type",
                            "BehaviorSubject": "https://www.learnrxjs.io/learn-rxjs/subjects/subject"
                        }
                    }
                },
                {
                    "name": "deportedOutputsViews",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The deported output views as a list of their associated cell ID.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "State.deportedOutputsViews",
                    "navPath": "@nav/api/Notebook.State.deportedOutputsViews",
                    "code": {
                        "filePath": "src/lib/notebook/state.ts",
                        "declaration": "public readonly deportedOutputsViews: string[] = []",
                        "implementation": "",
                        "startLine": 286,
                        "endLine": 287,
                        "references": {
                            "deportedOutputsViews": "@nav/api/Notebook.State.deportedOutputsViews"
                        }
                    }
                },
                {
                    "name": "displayFactory",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The factory used to pick up the right mapping between variable and view when  `display`  is called.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "State.displayFactory",
                    "navPath": "@nav/api/Notebook.State.displayFactory",
                    "code": {
                        "filePath": "src/lib/notebook/state.ts",
                        "declaration": "public readonly displayFactory: DisplayFactory = defaultDisplayFactory()",
                        "implementation": "",
                        "startLine": 244,
                        "endLine": 245,
                        "references": {
                            "displayFactory": "@nav/api/Notebook.State.displayFactory",
                            "DisplayFactory": "@nav/api/Notebook.DisplayFactory"
                        }
                    }
                },
                {
                    "name": "errors$",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Observables over the cell's errors keyed by the cell's ID.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "State.errors$",
                    "navPath": "@nav/api/Notebook.State.errors$",
                    "code": {
                        "filePath": "src/lib/notebook/state.ts",
                        "declaration": "public readonly errors$: Record<\n        string,\n        ReplaySubject<ExecCellError | undefined>\n    > = {}",
                        "implementation": "",
                        "startLine": 258,
                        "endLine": 259,
                        "references": {
                            "errors$": "@nav/api/Notebook.State.errors$",
                            "ExecCellError": "@nav/api/Notebook.ExecCellError",
                            "Record": "https://www.typescriptlang.org/docs/handbook/utility-types.html#recordkeys-type",
                            "ReplaySubject": "https://www.learnrxjs.io/learn-rxjs/subjects/replaysubject"
                        }
                    }
                },
                {
                    "name": "executing$",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Observables over whether the cell is currently executing keyed by the cell's ID.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "State.executing$",
                    "navPath": "@nav/api/Notebook.State.executing$",
                    "code": {
                        "filePath": "src/lib/notebook/state.ts",
                        "declaration": "public readonly executing$: Record<string, BehaviorSubject<boolean>> = {}",
                        "implementation": "",
                        "startLine": 281,
                        "endLine": 282,
                        "references": {
                            "executing$": "@nav/api/Notebook.State.executing$",
                            "Record": "https://www.typescriptlang.org/docs/handbook/utility-types.html#recordkeys-type",
                            "BehaviorSubject": "https://www.learnrxjs.io/learn-rxjs/subjects/subject"
                        }
                    }
                },
                {
                    "name": "exitScopes$",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Observables over the cell's exiting scopes keyed by the cell's ID.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "State.exitScopes$",
                    "navPath": "@nav/api/Notebook.State.exitScopes$",
                    "code": {
                        "filePath": "src/lib/notebook/state.ts",
                        "declaration": "public readonly exitScopes$: Record<string, ReplaySubject<Scope>> = {}",
                        "implementation": "",
                        "startLine": 240,
                        "endLine": 241,
                        "references": {
                            "exitScopes$": "@nav/api/Notebook.State.exitScopes$",
                            "Scope": "@nav/api/Notebook.Scope",
                            "Record": "https://www.typescriptlang.org/docs/handbook/utility-types.html#recordkeys-type",
                            "ReplaySubject": "https://www.learnrxjs.io/learn-rxjs/subjects/replaysubject"
                        }
                    }
                },
                {
                    "name": "ids",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "List of the cell IDs in the page.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "State.ids",
                    "navPath": "@nav/api/Notebook.State.ids",
                    "code": {
                        "filePath": "src/lib/notebook/state.ts",
                        "declaration": "public readonly ids: string[] = []",
                        "implementation": "",
                        "startLine": 291,
                        "endLine": 292,
                        "references": {
                            "ids": "@nav/api/Notebook.State.ids"
                        }
                    }
                },
                {
                    "name": "initialScope",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The initial scope (provided to the first cell when executed).",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "State.initialScope",
                    "navPath": "@nav/api/Notebook.State.initialScope",
                    "code": {
                        "filePath": "src/lib/notebook/state.ts",
                        "declaration": "public readonly initialScope: Scope",
                        "implementation": "",
                        "startLine": 300,
                        "endLine": 301,
                        "references": {
                            "initialScope": "@nav/api/Notebook.State.initialScope",
                            "Scope": "@nav/api/Notebook.Scope"
                        }
                    }
                },
                {
                    "name": "invalidated$",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Observable that emits the ID of invalidated cells.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "State.invalidated$",
                    "navPath": "@nav/api/Notebook.State.invalidated$",
                    "code": {
                        "filePath": "src/lib/notebook/state.ts",
                        "declaration": "public readonly invalidated$ = new Subject<string>()",
                        "implementation": "",
                        "startLine": 249,
                        "endLine": 250,
                        "references": {
                            "invalidated$": "@nav/api/Notebook.State.invalidated$",
                            "Subject": "https://www.learnrxjs.io/learn-rxjs/subjects/subject"
                        }
                    }
                },
                {
                    "name": "outputs$",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Observables over the cell's output keyed by the cell's ID.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "State.outputs$",
                    "navPath": "@nav/api/Notebook.State.outputs$",
                    "code": {
                        "filePath": "src/lib/notebook/state.ts",
                        "declaration": "public readonly outputs$: Record<string, ReplaySubject<Output>> = {}",
                        "implementation": "",
                        "startLine": 253,
                        "endLine": 254,
                        "references": {
                            "outputs$": "@nav/api/Notebook.State.outputs$",
                            "Output": "@nav/api/Notebook.Output",
                            "Record": "https://www.typescriptlang.org/docs/handbook/utility-types.html#recordkeys-type",
                            "ReplaySubject": "https://www.learnrxjs.io/learn-rxjs/subjects/replaysubject"
                        }
                    }
                },
                {
                    "name": "parent",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Optional related parent state (*e.g.*  <mkapi-api-link nav=\"@nav/api/Notebook.MdCellView\" semantic=\"class\">MdCellView</mkapi-api-link>  own their own executing state created upon execution).",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "State.parent",
                    "navPath": "@nav/api/Notebook.State.parent",
                    "code": {
                        "filePath": "src/lib/notebook/state.ts",
                        "declaration": "public readonly parent?: { state: State; cellId: string }",
                        "implementation": "",
                        "startLine": 304,
                        "endLine": 305,
                        "references": {
                            "parent": "@nav/api/Notebook.State.parent",
                            "State": "@nav/api/Notebook.State"
                        }
                    }
                },
                {
                    "name": "router",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The application router, used to import modules from other notebook pages.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "State.router",
                    "navPath": "@nav/api/Notebook.State.router",
                    "code": {
                        "filePath": "src/lib/notebook/state.ts",
                        "declaration": "public readonly router: Router",
                        "implementation": "",
                        "startLine": 309,
                        "endLine": 310,
                        "references": {
                            "router": "@nav/api/Notebook.State.router",
                            "Router": "@nav/api/MainModule.Router"
                        }
                    }
                },
                {
                    "name": "scopes$",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Observables over the cell's entering scopes keyed by the cell's ID.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "State.scopes$",
                    "navPath": "@nav/api/Notebook.State.scopes$",
                    "code": {
                        "filePath": "src/lib/notebook/state.ts",
                        "declaration": "public readonly scopes$: Record<\n        string,\n        BehaviorSubject<Scope | undefined>\n    > = {}",
                        "implementation": "",
                        "startLine": 233,
                        "endLine": 234,
                        "references": {
                            "scopes$": "@nav/api/Notebook.State.scopes$",
                            "Scope": "@nav/api/Notebook.Scope",
                            "Record": "https://www.typescriptlang.org/docs/handbook/utility-types.html#recordkeys-type",
                            "BehaviorSubject": "https://www.learnrxjs.io/learn-rxjs/subjects/subject"
                        }
                    }
                },
                {
                    "name": "src$",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Observables over the cell's source keyed by the cell's ID.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "State.src$",
                    "navPath": "@nav/api/Notebook.State.src$",
                    "code": {
                        "filePath": "src/lib/notebook/state.ts",
                        "declaration": "public readonly src$: Record<string, BehaviorSubject<string>> = {}",
                        "implementation": "",
                        "startLine": 266,
                        "endLine": 267,
                        "references": {
                            "src$": "@nav/api/Notebook.State.src$",
                            "Record": "https://www.typescriptlang.org/docs/handbook/utility-types.html#recordkeys-type",
                            "BehaviorSubject": "https://www.learnrxjs.io/learn-rxjs/subjects/subject"
                        }
                    }
                },
                {
                    "name": "CellsFactory",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "A registry of cell factory functions.\n\nThe keys in this mapping correspond to the tag names of cell elements\nin the Markdown source. Each registered factory function defines how\na specific cell type should be instantiated and rendered.\n\n**Registering a New Cell Type**\n\nTo add a new cell type, extend  `State.CellsFactory`  as shown below:\n\n<code-snippet language=\"javascript\">\nState.CellsFactory = {\n    ...State.CellsFactory,\n    'custom-cell': (p:{state: State, elem: HTMLElement}) => {\n         const src = elem.textContent()\n         const attFoo = elem.getAttribute('foo')\n         // Return an instance of  `CellTrait & AnyView` \n     }\n}\n</code-snippet>\n\nOnce registered, the following Markdown source:\n\n<code-snippet language=\"markdown\">\nThe next cell is a  `custom-cell` :\n\n<custom-cell foo=\"42\">\n    ...\n</custom-cell>\n\n</code-snippet>\n\nWill be recognized and processed accordingly.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "State.CellsFactory",
                    "navPath": "@nav/api/Notebook.State.CellsFactory",
                    "code": {
                        "filePath": "src/lib/notebook/state.ts",
                        "declaration": "public static CellsFactory: Record<string, CellFactory> = {\n        'js-cell': (p) => {\n            return JsCellView.FromDom(p)\n        },\n        'md-cell': (p) => {\n            return MdCellView.FromDom(p)\n        },\n        'py-cell': (p) => {\n            return PyCellView.FromDom(p)\n        },\n        'interpreter-cell': (p) => {\n            return InterpreterCellView.FromDom(p)\n        },\n        'worker-cell': (p) => {\n            return WorkerCellView.FromDom(p)\n        },\n    }",
                        "implementation": "",
                        "startLine": 212,
                        "endLine": 213,
                        "references": {
                            "CellsFactory": "@nav/api/Notebook.State.CellsFactory",
                            "CellFactory": "@nav/api/Notebook.CellFactory",
                            "Record": "https://www.typescriptlang.org/docs/handbook/utility-types.html#recordkeys-type"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/notebook/state.ts",
                "declaration": "export class State",
                "implementation": "export class State {\n    /**\n     * A registry of cell factory functions.\n     *\n     * The keys in this mapping correspond to the tag names of cell elements\n     * in the Markdown source. Each registered factory function defines how\n     * a specific cell type should be instantiated and rendered.\n     *\n     * **Registering a New Cell Type**\n     *\n     * To add a new cell type, extend `State.CellsFactory` as shown below:\n     *\n     * <code-snippet language=\"javascript\">\n     * State.CellsFactory = {\n     *     ...State.CellsFactory,\n     *     'custom-cell': (p:{state: State, elem: HTMLElement}) => {\n     *          const src = elem.textContent()\n     *          const attFoo = elem.getAttribute('foo')\n     *          // Return an instance of `CellTrait & AnyView`\n     *      }\n     * }\n     * </code-snippet>\n     *\n     * Once registered, the following Markdown source:\n     *\n     * <code-snippet language=\"markdown\">\n     * The next cell is a `custom-cell`:\n     *\n     * <custom-cell foo=\"42\">\n     *     ...\n     * </custom-cell>\n     *\n     * </code-snippet>\n     *\n     * Will be recognized and processed accordingly.\n     */\n    public static CellsFactory: Record<string, CellFactory> = {\n        'js-cell': (p) => {\n            return JsCellView.FromDom(p)\n        },\n        'md-cell': (p) => {\n            return MdCellView.FromDom(p)\n        },\n        'py-cell': (p) => {\n            return PyCellView.FromDom(p)\n        },\n        'interpreter-cell': (p) => {\n            return InterpreterCellView.FromDom(p)\n        },\n        'worker-cell': (p) => {\n            return WorkerCellView.FromDom(p)\n        },\n    }\n\n    /**\n     * Observables over the cell's entering scopes keyed by the cell's ID.\n     */\n    public readonly scopes$: Record<\n        string,\n        BehaviorSubject<Scope | undefined>\n    > = {}\n    /**\n     * Observables over the cell's exiting scopes keyed by the cell's ID.\n     */\n    public readonly exitScopes$: Record<string, ReplaySubject<Scope>> = {}\n    /**\n     * The factory used to pick up the right mapping between variable and view when `display` is called.\n     */\n    public readonly displayFactory: DisplayFactory = defaultDisplayFactory()\n\n    /**\n     * Observable that emits the ID of invalidated cells.\n     */\n    public readonly invalidated$ = new Subject<string>()\n    /**\n     * Observables over the cell's output keyed by the cell's ID.\n     */\n    public readonly outputs$: Record<string, ReplaySubject<Output>> = {}\n\n    /**\n     * Observables over the cell's errors keyed by the cell's ID.\n     */\n    public readonly errors$: Record<\n        string,\n        ReplaySubject<ExecCellError | undefined>\n    > = {}\n\n    /**\n     * Observables over the cell's source keyed by the cell's ID.\n     */\n    public readonly src$: Record<string, BehaviorSubject<string>> = {}\n    /**\n     * Observables over the cell's status keyed by the cell's ID.\n     */\n    public readonly cellsStatus$: Record<string, BehaviorSubject<CellStatus>> =\n        {}\n\n    /**\n     * Observables over the cell IDs included in the associated {@link NotebookPage}.\n     */\n    public readonly cellIds$ = new BehaviorSubject<string[]>([])\n\n    /**\n     * Observables over whether the cell is currently executing keyed by the cell's ID.\n     */\n    public readonly executing$: Record<string, BehaviorSubject<boolean>> = {}\n\n    /**\n     * The deported output views as a list of their associated cell ID.\n     */\n    public readonly deportedOutputsViews: string[] = []\n\n    /**\n     * List of the cell IDs in the page.\n     */\n    public readonly ids: string[] = []\n    /**\n     * List of the cells in the page.\n     */\n    public readonly cells: CellTrait[] = []\n\n    /**\n     * The initial scope (provided to the first cell when executed).\n     */\n    public readonly initialScope: Scope\n    /**\n     * Optional related parent state (*e.g.* {@link MdCellView} own their own executing state created upon execution).\n     */\n    public readonly parent?: { state: State; cellId: string }\n\n    /**\n     * The application router, used to import modules from other notebook pages.\n     */\n    public readonly router: Router\n\n    public readonly modules: Record<string, { state: State; exports: Scope }> =\n        {}\n\n    public readonly context: ContextTrait\n    /**\n     * Pyodide execution should be namespaced by notebook page,\n     * this variable holds the symbols.\n     *\n     * This is a python dictionary initialized with `pyodide.globals.get(\"dict\")()`\n     * when the notebook page is loaded and reused across python cells.\n     */\n    private pyNamespace?: PyodideNamespace\n\n    constructor(\n        params: NotebookStateParameters & {\n            parent?: { state: State; cellId: string }\n        },\n        ctx?: ContextTrait,\n    ) {\n        Object.assign(this, { router: params.router, parent: params.parent })\n        this.context = ctx ?? new NoContext()\n        ctx = this.context.start('new State', ['Notebook'])\n        this.displayFactory = [\n            ...this.displayFactory,\n            ...(params.displayFactory ?? []),\n        ]\n        this.initialScope = {\n            let: params.initialScope?.let ?? {},\n            const: {\n                webpm,\n                Views,\n                ...(params.initialScope?.const ?? {}),\n            },\n            python: params.initialScope?.python ?? {},\n        }\n\n        if (params.parent !== undefined) {\n            const parent = params.parent\n            parent.state.invalidated$\n                .pipe(filter((cellId) => cellId === parent.cellId))\n                .subscribe(() => {\n                    if (this.ids.length === 0) {\n                        return\n                    }\n                    this.unreadyCells({ afterCellId: this.ids[0] })\n                    Object.values(this.outputs$).forEach((output$) => {\n                        output$.next(undefined)\n                    })\n                })\n        }\n        ctx.exit()\n    }\n    ctx(ctx?: ContextTrait) {\n        if (ctx) {\n            return ctx\n        }\n        return this.context\n    }\n\n    getPyNamespace(pyodide: Pyodide): PyodideNamespace {\n        this.pyNamespace ??= pyodide.globals.get('dict')()\n        return this.pyNamespace\n    }\n\n    @Contextual()\n    getCellsFactory(\n        ctx?: ContextTrait,\n    ): Record<\n        string,\n        (elem: HTMLElement, parserOptions?: MdParsingOptions) => AnyView\n    > {\n        ctx = this.ctx(ctx)\n\n        const deportedOutput = (elem: HTMLElement) => {\n            return this.createDeportedOutputsView(elem)\n        }\n        const factory = Object.entries(State.CellsFactory).reduce(\n            (acc, [k, v]) => {\n                const fct = (\n                    elem: HTMLElement,\n                    parserOptions: MdParsingOptions,\n                ) => {\n                    const cell = v({ state: this, elem, parserOptions })\n                    this.appendCell(cell, ctx)\n                    return cell\n                }\n                return { ...acc, [k]: fct }\n            },\n            {\n                'cell-output': deportedOutput,\n            },\n        )\n        ctx.info('Cells factory initialized', factory)\n        return factory\n    }\n\n    @Contextual({ key: (cell: CellTrait) => cell.cellId })\n    appendCell(cell: CellTrait, ctx?: ContextTrait) {\n        ctx = this.ctx(ctx)\n        ctx.info('Append new cell to the notebook', cell)\n        this.ids.push(cell.cellId)\n        this.cellIds$.next(this.ids)\n        this.cells.push(cell)\n        if (!(cell.cellId in this.outputs$)) {\n            this.outputs$[cell.cellId] = new ReplaySubject()\n            this.errors$[cell.cellId] = new ReplaySubject()\n            this.executing$[cell.cellId] = new BehaviorSubject(false)\n            this.src$[cell.cellId] = cell.content$\n        }\n\n        this.cellsStatus$[cell.cellId] = new BehaviorSubject<CellStatus>(\n            this.ids.length === 1 ? 'ready' : 'unready',\n        )\n        this.scopes$[cell.cellId] =\n            Object.keys(this.scopes$).length === 0\n                ? new BehaviorSubject<Scope | undefined>(this.initialScope)\n                : new BehaviorSubject<Scope | undefined>(undefined)\n        this.exitScopes$[cell.cellId] = new ReplaySubject<Scope>(1)\n        cell.content$.subscribe((src) => {\n            this.updateSrc({ cellId: cell.cellId, src })\n        })\n    }\n\n    createDeportedOutputsView(elem: HTMLElement): OutputsView {\n        const cellId = DeportedOutputsView.FromDomAttributes.cellId(elem)\n        if (!cellId) {\n            throw Error(\"Can not find 'cell-id' to create deported output.\")\n        }\n        if (!(cellId in this.outputs$)) {\n            this.outputs$[cellId] = new ReplaySubject()\n            this.executing$[cellId] = new BehaviorSubject(false)\n            this.errors$[cellId] = new ReplaySubject()\n        }\n        this.deportedOutputsViews.push(cellId)\n        return DeportedOutputsView.FromDom({\n            elem,\n            output$: this.outputs$[cellId],\n        })\n    }\n\n    updateSrc({ cellId, src }: { cellId: string; src: string }) {\n        if (!(cellId in this.src$)) {\n            this.src$[cellId] = new BehaviorSubject(src)\n        }\n        this.cellsStatus$[cellId].next('ready')\n        this.unreadyCells({ afterCellId: cellId })\n        if (this.parent) {\n            this.parent.state.unreadyCells({ afterCellId: this.parent.cellId })\n        }\n    }\n    getResolvedScope(cellId: string): Scope {\n        if (\n            !(cellId in this.scopes$) ||\n            this.scopes$[cellId].value === undefined\n        ) {\n            throw Error(`Can not find scope for ${cellId}`)\n        }\n        return this.scopes$[cellId].value\n    }\n    @Contextual({ async: true, key: (id: string) => id })\n    async execute(id: string, rootExecution = true, ctx?: ContextTrait) {\n        ctx = this.ctx(ctx)\n\n        if (this.ids.length === 0) {\n            return this.initialScope\n        }\n        const index = this.ids.indexOf(id)\n        this.cellsStatus$[id].next('pending')\n        if (!this.scopes$[id].value) {\n            ctx.info('No scope available, run previous cell')\n            await this.execute(this.ids[index - 1], false, ctx)\n        }\n        const inputScope = this.getResolvedScope(id)\n\n        ctx.info('Input scope retrieved', inputScope)\n        const output$ = this.outputs$[id]\n\n        output$.next(undefined)\n        this.cellsStatus$[id].next('executing')\n        this.executing$[id].next(true)\n        this.errors$[id].next(undefined)\n        this.unreadyCells({ afterCellId: id })\n        const scope = await this.cells[index].execute(\n            {\n                src: this.src$[id].value,\n                scope: inputScope,\n                output$,\n                error$: this.errors$[id],\n                displayFactory: this.displayFactory,\n                load: this.loadModule(id),\n                cellId: id,\n                owningState: this,\n            },\n            ctx,\n        )\n        this.exitScopes$[id].next(scope)\n        this.cellsStatus$[id].next('success')\n        const nextId = this.ids[index + 1]\n        const remainingIds = this.ids.slice(index + 2)\n        if (nextId) {\n            this.scopes$[nextId].next(scope)\n            this.cellsStatus$[nextId].next('ready')\n        }\n        remainingIds.forEach((id) => {\n            if (rootExecution) {\n                this.cellsStatus$[id].next('unready')\n            }\n            this.scopes$[id].next(undefined)\n            this.executing$[id].next(false)\n        })\n        return scope\n    }\n    private invalidateCells(cellId: string) {\n        this.invalidated$.next(cellId)\n    }\n\n    public dispose() {\n        this.cells.forEach((cell) => {\n            this.invalidateCells(cell.cellId)\n        })\n        Object.values(this.modules).forEach(({ state }) => {\n            state.dispose()\n        })\n    }\n\n    unreadyCells({ afterCellId }: { afterCellId: string }) {\n        const index = this.ids.indexOf(afterCellId)\n        this.invalidateCells(afterCellId)\n        const remainingIds = this.ids.slice(index + 1)\n        remainingIds.forEach((id) => {\n            this.cellsStatus$[id].next('unready')\n            this.scopes$[id].next(undefined)\n            this.executing$[id].next(false)\n            this.invalidateCells(id)\n        })\n    }\n\n    private loadModule(cellId: string) {\n        const components = ({\n            state,\n        }: {\n            state: State\n            cellOptions: CellCommonAttributes\n        }) => {\n            return {\n                'js-cell': (elem: HTMLElement) => {\n                    const id =\n                        elem.getAttribute('cell-id') ?? elem.getAttribute('id')\n                    const reactive = elem.getAttribute('reactive') === 'true'\n                    const uid = Math.floor(Math.random() * Math.pow(10, 6))\n                    const cell = new JsCellExecutor({\n                        cellId: id ?? `cell-${String(uid)}`,\n                        content$: new BehaviorSubject(elem.textContent ?? ''),\n                        state: state,\n                        cellAttributes: {\n                            reactive,\n                        },\n                    })\n                    state.appendCell(cell)\n                    return { tag: 'div' as const }\n                },\n                'py-cell': (elem: HTMLElement) => {\n                    const id =\n                        elem.getAttribute('cell-id') ?? elem.getAttribute('id')\n                    const uid = Math.floor(Math.random() * Math.pow(10, 6))\n                    const cell = new PyCellExecutor({\n                        cellId: id ?? `cell-${String(uid)}`,\n                        content$: new BehaviorSubject(elem.textContent ?? ''),\n                        state: state,\n                        cellAttributes: {},\n                    })\n                    state.appendCell(cell)\n                    return { tag: 'div' as const }\n                },\n            }\n        }\n\n        return async (path: string, ctx: ContextTrait) => {\n            ctx.info(`Load module ${path}`)\n            const router = this.router\n            if (path in this.modules) {\n                this.modules[path].state.dispose()\n            }\n            const nav = await router.getNav({ path }, ctx)\n            if (nav === 'not-found') {\n                throw Error(`Can not find module at ${path}`)\n            }\n            if (!hasContentViewTrait(nav)) {\n                throw Error(\n                    'The navigation node does not defines expected content',\n                )\n            }\n            const content = nav.layout.content({\n                router,\n            })\n            const module$ = resolve(content).pipe(\n                map((nbPage) => {\n                    if (nbPage instanceof NotebookPage) {\n                        return nbPage\n                    }\n                    throw Error(\n                        `The page imported with ${path} is not a 'NotebookPage'`,\n                    )\n                }),\n                switchMap((nbPage) => {\n                    const parsingOptions = nbPage.options?.markdown ?? {}\n                    return fromFetch(nbPage.url).pipe(\n                        map((resp) => ({\n                            resp,\n                            parsingOptions,\n                            nbCtx: nbPage.context,\n                        })),\n                    )\n                }),\n                switchMap(({ resp, parsingOptions, nbCtx }) =>\n                    from(resp.text()).pipe(\n                        map((src) => ({ src, parsingOptions, nbCtx })),\n                    ),\n                ),\n                switchMap(({ src, parsingOptions, nbCtx }) => {\n                    const state = new State(\n                        {\n                            router,\n                            parent: { state: this, cellId },\n                        },\n                        nbCtx,\n                    )\n                    Dependencies.parseMd({\n                        ...parsingOptions,\n                        src: extractExportedCode(src),\n                        router,\n                        views: {\n                            ...components({\n                                state,\n                                cellOptions: defaultCellAttributes,\n                            }),\n                        },\n                    })\n                    return from(state.execute(state.ids.slice(-1)[0])).pipe(\n                        map((scope) => {\n                            this.modules[path] = { exports: scope, state }\n                            return this.modules[path]\n                        }),\n                    )\n                }),\n            )\n\n            const { exports } = await firstValueFrom(module$)\n            return {\n                ...exports.const,\n                ...exports.let,\n                ...exports.python,\n            }\n        }\n    }\n}",
                "startLine": 176,
                "endLine": 667,
                "references": {
                    "State": "@nav/api/Notebook.State",
                    "NotebookStateParameters": "@nav/api/Notebook.NotebookStateParameters",
                    "ContextTrait": "@nav/api/MainModule.ContextTrait",
                    "CellTrait": "@nav/api/Notebook.CellTrait",
                    "CellStatus": "@nav/api/Notebook.CellStatus",
                    "DisplayFactory": "@nav/api/Notebook.DisplayFactory",
                    "ExecCellError": "@nav/api/Notebook.ExecCellError",
                    "Scope": "@nav/api/Notebook.Scope",
                    "Output": "@nav/api/Notebook.Output",
                    "Router": "@nav/api/MainModule.Router",
                    "CellFactory": "@nav/api/Notebook.CellFactory",
                    "OutputsView": "@nav/api/Notebook.OutputsView",
                    "MdParsingOptions": "@nav/api/MainModule.MdParsingOptions",
                    "AnyView": "@nav/api/MainModule.AnyView",
                    "Pyodide": "@nav/api/Notebook.Pyodide",
                    "PyodideNamespace": "@nav/api/Notebook.PyodideNamespace",
                    "BehaviorSubject": "https://www.learnrxjs.io/learn-rxjs/subjects/subject",
                    "Record": "https://www.typescriptlang.org/docs/handbook/utility-types.html#recordkeys-type",
                    "ReplaySubject": "https://www.learnrxjs.io/learn-rxjs/subjects/replaysubject",
                    "Subject": "https://www.learnrxjs.io/learn-rxjs/subjects/subject",
                    "HTMLElement": "https://www.typescriptlang.org/docs/handbook/dom-manipulation.html",
                    "Promise": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "WorkerCellView",
            "documentation": {
                "sections": [
                    {
                        "content": "Represents a worker cell within a  <mkapi-api-link nav=\"@nav/api/Notebook.NotebookPage\" semantic=\"class\">NotebookPage</mkapi-api-link> .\n\nThey are typically included from a DOM definition with tag name  `worker-cell`  in Markdown content,\nsee  <mkapi-api-link nav=\"@nav/api/Notebook.WorkerCellView.FromDom\" semantic=\"method\">WorkerCellView.FromDom</mkapi-api-link> .\n\nDetails regarding the execution are provided in the documentation of  <mkapi-api-link nav=\"@nav/api/Notebook.executeWorkersPool\" semantic=\"function\">executeWorkersPool</mkapi-api-link>  for\nnon-reactive cells and  <mkapi-api-link nav=\"@nav/api/Notebook.executeWorkersPool$\" semantic=\"function\">executeWorkersPool$</mkapi-api-link>  for reactive cells.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "WorkerCellView",
            "navPath": "@nav/api/Notebook.WorkerCellView",
            "attributes": [
                {
                    "name": "cellAttributes",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Cell's attributes.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "WorkerCellView.cellAttributes",
                    "navPath": "@nav/api/Notebook.WorkerCellView.cellAttributes",
                    "code": {
                        "filePath": "src/lib/notebook/worker-cell-view.ts",
                        "declaration": "public readonly cellAttributes: WorkerCellAttributes",
                        "implementation": "",
                        "startLine": 63,
                        "endLine": 64,
                        "references": {
                            "cellAttributes": "@nav/api/Notebook.WorkerCellView.cellAttributes",
                            "WorkerCellAttributes": "@nav/api/Notebook.WorkerCellAttributes"
                        }
                    }
                },
                {
                    "name": "cellId",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Cell's ID.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "WorkerCellView.cellId",
                    "navPath": "@nav/api/Notebook.WorkerCellView.cellId",
                    "code": {
                        "filePath": "src/lib/notebook/worker-cell-view.ts",
                        "declaration": "public readonly cellId: string",
                        "implementation": "",
                        "startLine": 59,
                        "endLine": 60,
                        "references": {
                            "cellId": "@nav/api/Notebook.WorkerCellView.cellId",
                            "CellTrait.cellId": "@nav/api/Notebook.CellTrait.cellId"
                        }
                    }
                },
                {
                    "name": "children",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Children of the element.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "WorkerCellView.children",
                    "navPath": "@nav/api/Notebook.WorkerCellView.children",
                    "code": {
                        "filePath": "src/lib/notebook/worker-cell-view.ts",
                        "declaration": "public readonly children: ChildrenLike",
                        "implementation": "",
                        "startLine": 55,
                        "endLine": 56,
                        "references": {
                            "children": "@nav/api/Notebook.WorkerCellView.children",
                            "ChildrenLike": "/apps/@rx-vdom/doc/latest?nav=/api.ChildrenLike"
                        }
                    }
                },
                {
                    "name": "class",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Classes associated with the view.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "WorkerCellView.class",
                    "navPath": "@nav/api/Notebook.WorkerCellView.class",
                    "code": {
                        "filePath": "src/lib/notebook/worker-cell-view.ts",
                        "declaration": "public readonly class = WorkerCellView.CssSelector",
                        "implementation": "",
                        "startLine": 54,
                        "endLine": 55,
                        "references": {
                            "class": "@nav/api/Notebook.WorkerCellView.class"
                        }
                    }
                },
                {
                    "name": "content$",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Observable over the source content of the cell.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "WorkerCellView.content$",
                    "navPath": "@nav/api/Notebook.WorkerCellView.content$",
                    "code": {
                        "filePath": "src/lib/notebook/worker-cell-view.ts",
                        "declaration": "public readonly content$: BehaviorSubject<string>",
                        "implementation": "",
                        "startLine": 76,
                        "endLine": 77,
                        "references": {
                            "content$": "@nav/api/Notebook.WorkerCellView.content$",
                            "CellTrait.content$": "@nav/api/Notebook.CellTrait.content$",
                            "BehaviorSubject": "https://www.learnrxjs.io/learn-rxjs/subjects/subject"
                        }
                    }
                },
                {
                    "name": "editorView",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The encapsulated code editor view.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "WorkerCellView.editorView",
                    "navPath": "@nav/api/Notebook.WorkerCellView.editorView",
                    "code": {
                        "filePath": "src/lib/notebook/worker-cell-view.ts",
                        "declaration": "public readonly editorView: CodeSnippetView",
                        "implementation": "",
                        "startLine": 72,
                        "endLine": 73,
                        "references": {
                            "editorView": "@nav/api/Notebook.WorkerCellView.editorView",
                            "CodeSnippetView": "@nav/api/MainModule/MdWidgets.CodeSnippetView"
                        }
                    }
                },
                {
                    "name": "invalidated$",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Emit when the cell is invalidated.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "WorkerCellView.invalidated$",
                    "navPath": "@nav/api/Notebook.WorkerCellView.invalidated$",
                    "code": {
                        "filePath": "src/lib/notebook/worker-cell-view.ts",
                        "declaration": "public readonly invalidated$: Observable<unknown>",
                        "implementation": "",
                        "startLine": 81,
                        "endLine": 82,
                        "references": {
                            "invalidated$": "@nav/api/Notebook.WorkerCellView.invalidated$",
                            "Observable": "https://rxjs.dev/guide/observable"
                        }
                    }
                },
                {
                    "name": "reactive$",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Current state regarding whether the cell is reactive.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "WorkerCellView.reactive$",
                    "navPath": "@nav/api/Notebook.WorkerCellView.reactive$",
                    "code": {
                        "filePath": "src/lib/notebook/worker-cell-view.ts",
                        "declaration": "public readonly reactive$ = new BehaviorSubject(false)",
                        "implementation": "",
                        "startLine": 86,
                        "endLine": 87,
                        "references": {
                            "reactive$": "@nav/api/Notebook.WorkerCellView.reactive$",
                            "BehaviorSubject": "https://www.learnrxjs.io/learn-rxjs/subjects/subject"
                        }
                    }
                },
                {
                    "name": "state",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "State manager, owned by the parent  <mkapi-api-link nav=\"@nav/api/Notebook.NotebookPage\" semantic=\"class\">NotebookPage</mkapi-api-link> .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "WorkerCellView.state",
                    "navPath": "@nav/api/Notebook.WorkerCellView.state",
                    "code": {
                        "filePath": "src/lib/notebook/worker-cell-view.ts",
                        "declaration": "public readonly state: State",
                        "implementation": "",
                        "startLine": 67,
                        "endLine": 68,
                        "references": {
                            "state": "@nav/api/Notebook.WorkerCellView.state",
                            "State": "@nav/api/Notebook.State"
                        }
                    }
                },
                {
                    "name": "tag",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The tag of the element, equivalent to the  `tagName`  property of  `HTMLElement` .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "WorkerCellView.tag",
                    "navPath": "@nav/api/Notebook.WorkerCellView.tag",
                    "code": {
                        "filePath": "src/lib/notebook/worker-cell-view.ts",
                        "declaration": "public readonly tag = 'div'",
                        "implementation": "",
                        "startLine": 50,
                        "endLine": 51,
                        "references": {
                            "tag": "@nav/api/Notebook.WorkerCellView.tag"
                        }
                    }
                },
                {
                    "name": "CssSelector",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Component's class name for CSS query.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "WorkerCellView.CssSelector",
                    "navPath": "@nav/api/Notebook.WorkerCellView.CssSelector",
                    "code": {
                        "filePath": "src/lib/notebook/worker-cell-view.ts",
                        "declaration": "static readonly CssSelector = 'mknb-WorkerCellView'",
                        "implementation": "",
                        "startLine": 49,
                        "endLine": 50,
                        "references": {
                            "CssSelector": "@nav/api/Notebook.WorkerCellView.CssSelector"
                        }
                    }
                },
                {
                    "name": "FromDomAttributes",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Defines the methods to retrieve constructor's arguments from the DOM element  `worker-cell`  within\nMarkDown content.\n\n<note level='warning'>\nBe mindful of the conversion from  `camelCase`  to  `kebab-case` .\n</note>",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "WorkerCellView.FromDomAttributes",
                    "navPath": "@nav/api/Notebook.WorkerCellView.FromDomAttributes",
                    "code": {
                        "filePath": "src/lib/notebook/worker-cell-view.ts",
                        "declaration": "static readonly FromDomAttributes = {\n        cellId: (e: HTMLElement) =>\n            e.getAttribute('cell-id') ?? e.getAttribute('id') ?? getCellUid(),\n        content: (e: HTMLElement) => e.textContent ?? '',\n        readOnly: (e: HTMLElement) => e.getAttribute('read-only') === 'true',\n        lineNumber: (e: HTMLElement) =>\n            e.getAttribute('line-number') === 'true',\n        workersPool: (e: HTMLElement) => {\n            const wp = e.getAttribute('workers-pool')\n            if (!wp) {\n                throw Error('No worker pool has been bound to the cell')\n            }\n            return wp\n        },\n        mode: (e: HTMLElement) =>\n            e.getAttribute('mode') as unknown as 'javascript' | 'python',\n        capturedIn: (e: HTMLElement) =>\n            (e.getAttribute('captured-in') ?? '')\n                .split(' ')\n                .filter((c) => c !== ''),\n        capturedOut: (e: HTMLElement) =>\n            (e.getAttribute('captured-out') ?? '')\n                .split(' ')\n                .filter((c) => c !== ''),\n    }",
                        "implementation": "",
                        "startLine": 96,
                        "endLine": 97,
                        "references": {
                            "FromDomAttributes": "@nav/api/Notebook.WorkerCellView.FromDomAttributes",
                            "HTMLElement": "https://www.typescriptlang.org/docs/handbook/dom-manipulation.html"
                        }
                    }
                }
            ],
            "callables": [
                {
                    "name": "constructor",
                    "documentation": {
                        "sections": [
                            {
                                "content": "Initialize a new instance.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            },
                            {
                                "title": "Arguments",
                                "content": "\n*  **cellAttributes**: Cell's attributes.\n*  **cellId**: The cell's ID.\n*  **content**: The cell's content.\n*  **state**: The page's state.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "arguments",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "WorkerCellView.constructor",
                    "navPath": "@nav/api/Notebook.WorkerCellView.constructor",
                    "code": {
                        "filePath": "src/lib/notebook/worker-cell-view.ts",
                        "declaration": "constructor(params: {\n    cellId: string\n    content: string\n    state: State\n    cellAttributes: WorkerCellAttributes\n})",
                        "implementation": "constructor(params: {\n    cellId: string\n    content: string\n    state: State\n    cellAttributes: WorkerCellAttributes\n}) {\n    Object.assign(this, params)\n    this.invalidated$ = this.state.invalidated$.pipe(\n        filter((cellId) => cellId === this.cellId),\n    )\n    this.editorView = new SnippetEditorView({\n        language: this.cellAttributes.mode,\n        readOnly: false,\n        content: params.content,\n        lineNumbers: this.cellAttributes.lineNumbers ?? false,\n        onExecute: () => {\n            this.state.execute(this.cellId).then(\n                () => {\n                    /*No OP*/\n                },\n                () => {\n                    console.error(`Failed to executed ${this.cellId}`)\n                },\n            )\n        },\n    })\n    this.content$ = this.editorView.content$\n    this.children = [\n        new FutureCellView({\n            language: this.cellAttributes.mode,\n            cellId: this.cellId,\n            state: this.state,\n            editorView: {\n                tag: 'div',\n                children: [this.headerView(), this.editorView],\n            },\n            cellAttributes: this.cellAttributes,\n            reactive$: this.reactive$,\n        }),\n    ]\n}",
                        "startLine": 160,
                        "endLine": 201,
                        "references": {
                            "WorkerCellView": "@nav/api/Notebook.WorkerCellView",
                            "WorkerCellAttributes": "@nav/api/Notebook.WorkerCellAttributes",
                            "State": "@nav/api/Notebook.State"
                        }
                    },
                    "semantic": {
                        "role": "constructor",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    }
                },
                {
                    "name": "execute",
                    "documentation": {
                        "sections": [
                            {
                                "content": "Execute the cell.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            },
                            {
                                "title": "Arguments",
                                "content": "\n*  **execArgs**: See  <mkapi-api-link nav=\"@nav/api/Notebook.ExecArgs\" semantic=\"type-alias\">ExecArgs</mkapi-api-link> .\n*  **ctx**: Execution context used for logging and tracing.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "arguments",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "WorkerCellView.execute",
                    "navPath": "@nav/api/Notebook.WorkerCellView.execute",
                    "code": {
                        "filePath": "src/lib/notebook/worker-cell-view.ts",
                        "declaration": "@Contextual({ async: true, key: (args: ExecArgs) => args.cellId })\nasync execute(execArgs: ExecArgs, ctx?: ContextTrait): Promise<Scope>",
                        "implementation": "@Contextual({ async: true, key: (args: ExecArgs) => args.cellId })\nasync execute(execArgs: ExecArgs, ctx?: ContextTrait): Promise<Scope> {\n    const { scope } = execArgs\n    const capturedIn = this.cellAttributes.capturedIn.reduce(\n        (acc, name) => {\n            return { ...acc, [name]: scope.const[name] || scope.let[name] }\n        },\n        {},\n    )\n    const isReactive =\n        Object.values(capturedIn).find(\n            (v) => v instanceof Observable || v instanceof Promise,\n        ) !== undefined\n    this.reactive$.next(isReactive)\n    const workersPool = { ...scope.let, ...scope.const }[\n        this.cellAttributes.workersPool\n    ] as WorkersPoolTypes.WorkersPool\n    if (isReactive) {\n        return executeWorkersPool$(\n            {\n                ...execArgs,\n                invalidated$: this.invalidated$,\n                mode: this.cellAttributes.mode,\n                workersPool,\n                capturedIn,\n                capturedOut: this.cellAttributes.capturedOut,\n            },\n            ctx,\n        )\n    }\n\n    return executeWorkersPool(\n        {\n            ...execArgs,\n            invalidated$: this.invalidated$,\n            mode: this.cellAttributes.mode,\n            workersPool,\n            capturedIn,\n            capturedOut: this.cellAttributes.capturedOut,\n        },\n        ctx,\n    )\n}",
                        "startLine": 209,
                        "endLine": 252,
                        "references": {
                            "execute": "@nav/api/Notebook.WorkerCellView.execute",
                            "ExecArgs": "@nav/api/Notebook.ExecArgs",
                            "ContextTrait": "@nav/api/MainModule.ContextTrait",
                            "Scope": "@nav/api/Notebook.Scope",
                            "Promise": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise"
                        }
                    },
                    "semantic": {
                        "role": "method",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    }
                },
                {
                    "name": "FromDom",
                    "documentation": {
                        "sections": [
                            {
                                "content": "Initialize an instance of  <mkapi-api-link nav=\"@nav/api/Notebook.WorkerCellView\" semantic=\"class\">WorkerCellView</mkapi-api-link>  from a DOM element  `worker-cell`  in Markdown content\n (the parameter  `state`  is automatically provided).\n\n<note level=\"hint\" label=\"Constructor's attributes mapping\">\n The static property  <mkapi-api-link nav=\"@nav/api/Notebook.WorkerCellView.FromDomAttributes\" semantic=\"attribute\">FromDomAttributes</mkapi-api-link> \n defines the mapping between the DOM element and the constructor's attributes.\n</note>",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            },
                            {
                                "title": "Arguments",
                                "content": "\n*  **elem**: The DOM element.\n*  **state**: The page state.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "arguments",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "WorkerCellView.FromDom",
                    "navPath": "@nav/api/Notebook.WorkerCellView.FromDom",
                    "code": {
                        "filePath": "src/lib/notebook/worker-cell-view.ts",
                        "declaration": "static FromDom({ elem, state }: { elem: HTMLElement; state: State })",
                        "implementation": "static FromDom({ elem, state }: { elem: HTMLElement; state: State }) {\n    const params = {\n        cellId: WorkerCellView.FromDomAttributes.cellId(elem),\n        content: WorkerCellView.FromDomAttributes.content(elem),\n        cellAttributes: {\n            readOnly: WorkerCellView.FromDomAttributes.readOnly(elem),\n            lineNumber: WorkerCellView.FromDomAttributes.lineNumber(elem),\n            workersPool: WorkerCellView.FromDomAttributes.workersPool(elem),\n            mode: WorkerCellView.FromDomAttributes.mode(elem),\n            capturedIn: WorkerCellView.FromDomAttributes.capturedIn(elem),\n            capturedOut: WorkerCellView.FromDomAttributes.capturedOut(elem),\n        },\n    }\n    return new WorkerCellView({ ...params, state })\n}",
                        "startLine": 135,
                        "endLine": 150,
                        "references": {
                            "FromDom": "@nav/api/Notebook.WorkerCellView.FromDom",
                            "State": "@nav/api/Notebook.State",
                            "HTMLElement": "https://www.typescriptlang.org/docs/handbook/dom-manipulation.html",
                            "WorkerCellView": "@nav/api/Notebook.WorkerCellView"
                        }
                    },
                    "semantic": {
                        "role": "method",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    }
                }
            ],
            "code": {
                "filePath": "src/lib/notebook/worker-cell-view.ts",
                "declaration": "export class WorkerCellView implements VirtualDOM<'div'>, CellTrait",
                "implementation": "export class WorkerCellView implements VirtualDOM<'div'>, CellTrait {\n    /**\n     * Component's class name for CSS query.\n     */\n    static readonly CssSelector = 'mknb-WorkerCellView'\n    public readonly tag = 'div'\n    /**\n     * Classes associated with the view.\n     */\n    public readonly class = WorkerCellView.CssSelector\n    public readonly children: ChildrenLike\n    /**\n     * Cell's ID.\n     */\n    public readonly cellId: string\n    /**\n     * Cell's attributes.\n     */\n    public readonly cellAttributes: WorkerCellAttributes\n    /**\n     * State manager, owned by the parent {@link NotebookPage}.\n     */\n    public readonly state: State\n\n    /**\n     * The encapsulated code editor view.\n     */\n    public readonly editorView: CodeSnippetView\n    /**\n     * Observable over the source content of the cell.\n     */\n    public readonly content$: BehaviorSubject<string>\n\n    /**\n     * Emit when the cell is invalidated.\n     */\n    public readonly invalidated$: Observable<unknown>\n\n    /**\n     * Current state regarding whether the cell is reactive.\n     */\n    public readonly reactive$ = new BehaviorSubject(false)\n\n    /**\n     * Defines the methods to retrieve constructor's arguments from the DOM element `worker-cell` within\n     * MarkDown content.\n     *\n     * <note level='warning'>\n     * Be mindful of the conversion from `camelCase` to `kebab-case`.\n     * </note>\n     */\n    static readonly FromDomAttributes = {\n        cellId: (e: HTMLElement) =>\n            e.getAttribute('cell-id') ?? e.getAttribute('id') ?? getCellUid(),\n        content: (e: HTMLElement) => e.textContent ?? '',\n        readOnly: (e: HTMLElement) => e.getAttribute('read-only') === 'true',\n        lineNumber: (e: HTMLElement) =>\n            e.getAttribute('line-number') === 'true',\n        workersPool: (e: HTMLElement) => {\n            const wp = e.getAttribute('workers-pool')\n            if (!wp) {\n                throw Error('No worker pool has been bound to the cell')\n            }\n            return wp\n        },\n        mode: (e: HTMLElement) =>\n            e.getAttribute('mode') as unknown as 'javascript' | 'python',\n        capturedIn: (e: HTMLElement) =>\n            (e.getAttribute('captured-in') ?? '')\n                .split(' ')\n                .filter((c) => c !== ''),\n        capturedOut: (e: HTMLElement) =>\n            (e.getAttribute('captured-out') ?? '')\n                .split(' ')\n                .filter((c) => c !== ''),\n    }\n\n    /**\n     * Initialize an instance of {@link WorkerCellView} from a DOM element `worker-cell` in Markdown content\n     *  (the parameter `state` is automatically provided).\n     *\n     * <note level=\"hint\" label=\"Constructor's attributes mapping\">\n     *  The static property {@link WorkerCellView.FromDomAttributes | FromDomAttributes}\n     *  defines the mapping between the DOM element and the constructor's attributes.\n     * </note>\n     *\n     * @param _p\n     * @param _p.elem The DOM element.\n     * @param _p.state The page state.\n     */\n    static FromDom({ elem, state }: { elem: HTMLElement; state: State }) {\n        const params = {\n            cellId: WorkerCellView.FromDomAttributes.cellId(elem),\n            content: WorkerCellView.FromDomAttributes.content(elem),\n            cellAttributes: {\n                readOnly: WorkerCellView.FromDomAttributes.readOnly(elem),\n                lineNumber: WorkerCellView.FromDomAttributes.lineNumber(elem),\n                workersPool: WorkerCellView.FromDomAttributes.workersPool(elem),\n                mode: WorkerCellView.FromDomAttributes.mode(elem),\n                capturedIn: WorkerCellView.FromDomAttributes.capturedIn(elem),\n                capturedOut: WorkerCellView.FromDomAttributes.capturedOut(elem),\n            },\n        }\n        return new WorkerCellView({ ...params, state })\n    }\n\n    /**\n     * Initialize a new instance.\n     *\n     * @param params\n     * @param params.cellId The cell's ID.\n     * @param params.content The cell's content.\n     * @param params.state The page's state.\n     * @param params.cellAttributes Cell's attributes.\n     */\n    constructor(params: {\n        cellId: string\n        content: string\n        state: State\n        cellAttributes: WorkerCellAttributes\n    }) {\n        Object.assign(this, params)\n        this.invalidated$ = this.state.invalidated$.pipe(\n            filter((cellId) => cellId === this.cellId),\n        )\n        this.editorView = new SnippetEditorView({\n            language: this.cellAttributes.mode,\n            readOnly: false,\n            content: params.content,\n            lineNumbers: this.cellAttributes.lineNumbers ?? false,\n            onExecute: () => {\n                this.state.execute(this.cellId).then(\n                    () => {\n                        /*No OP*/\n                    },\n                    () => {\n                        console.error(`Failed to executed ${this.cellId}`)\n                    },\n                )\n            },\n        })\n        this.content$ = this.editorView.content$\n        this.children = [\n            new FutureCellView({\n                language: this.cellAttributes.mode,\n                cellId: this.cellId,\n                state: this.state,\n                editorView: {\n                    tag: 'div',\n                    children: [this.headerView(), this.editorView],\n                },\n                cellAttributes: this.cellAttributes,\n                reactive$: this.reactive$,\n            }),\n        ]\n    }\n\n    /**\n     * Execute the cell.\n     *\n     * @param execArgs See {@link ExecArgs}.\n     * @param ctx Execution context used for logging and tracing.\n     */\n    @Contextual({ async: true, key: (args: ExecArgs) => args.cellId })\n    async execute(execArgs: ExecArgs, ctx?: ContextTrait): Promise<Scope> {\n        const { scope } = execArgs\n        const capturedIn = this.cellAttributes.capturedIn.reduce(\n            (acc, name) => {\n                return { ...acc, [name]: scope.const[name] || scope.let[name] }\n            },\n            {},\n        )\n        const isReactive =\n            Object.values(capturedIn).find(\n                (v) => v instanceof Observable || v instanceof Promise,\n            ) !== undefined\n        this.reactive$.next(isReactive)\n        const workersPool = { ...scope.let, ...scope.const }[\n            this.cellAttributes.workersPool\n        ] as WorkersPoolTypes.WorkersPool\n        if (isReactive) {\n            return executeWorkersPool$(\n                {\n                    ...execArgs,\n                    invalidated$: this.invalidated$,\n                    mode: this.cellAttributes.mode,\n                    workersPool,\n                    capturedIn,\n                    capturedOut: this.cellAttributes.capturedOut,\n                },\n                ctx,\n            )\n        }\n\n        return executeWorkersPool(\n            {\n                ...execArgs,\n                invalidated$: this.invalidated$,\n                mode: this.cellAttributes.mode,\n                workersPool,\n                capturedIn,\n                capturedOut: this.cellAttributes.capturedOut,\n            },\n            ctx,\n        )\n    }\n\n    private headerView(): AnyVirtualDOM {\n        const title: AnyVirtualDOM = {\n            tag: 'div',\n            class: 'd-flex align-items-center px-2',\n            children: [\n                {\n                    tag: 'i',\n                    class: 'fas fa-cog',\n                },\n                {\n                    tag: 'i',\n                    class: 'px-2',\n                },\n                {\n                    tag: 'div',\n                    style: { fontWeight: 'bolder' },\n                    innerText: this.cellAttributes.workersPool,\n                },\n            ],\n        }\n        const separator: AnyVirtualDOM = {\n            tag: 'div',\n            class: 'mx-2',\n        }\n        return {\n            tag: 'div',\n            class: 'd-flex align-items-center mkdocs-bg-info',\n            children: [\n                title,\n                separator,\n                new DropDownCaptureView({\n                    mode: 'in',\n                    variables: this.cellAttributes.capturedIn,\n                }),\n                separator,\n                new DropDownCaptureView({\n                    mode: 'out',\n                    variables: this.cellAttributes.capturedOut,\n                }),\n            ],\n        }\n    }\n}",
                "startLine": 45,
                "endLine": 295,
                "references": {
                    "WorkerCellView": "@nav/api/Notebook.WorkerCellView",
                    "WorkerCellAttributes": "@nav/api/Notebook.WorkerCellAttributes",
                    "State": "@nav/api/Notebook.State",
                    "CellTrait.cellId": "@nav/api/Notebook.CellTrait.cellId",
                    "CellTrait.content$": "@nav/api/Notebook.CellTrait.content$",
                    "CodeSnippetView": "@nav/api/MainModule/MdWidgets.CodeSnippetView",
                    "ExecArgs": "@nav/api/Notebook.ExecArgs",
                    "ContextTrait": "@nav/api/MainModule.ContextTrait",
                    "Scope": "@nav/api/Notebook.Scope",
                    "CellTrait.execute": "@nav/api/Notebook.CellTrait.execute",
                    "CellTrait": "@nav/api/Notebook.CellTrait",
                    "ChildrenLike": "/apps/@rx-vdom/doc/latest?nav=/api.ChildrenLike",
                    "BehaviorSubject": "https://www.learnrxjs.io/learn-rxjs/subjects/subject",
                    "Observable": "https://rxjs.dev/guide/observable",
                    "HTMLElement": "https://www.typescriptlang.org/docs/handbook/dom-manipulation.html",
                    "Promise": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
                    "VirtualDOM": "/apps/@rx-vdom/doc/latest?nav=/api.VirtualDOM"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "BackendClient",
            "documentation": {
                "sections": [
                    {
                        "content": "Represents the minimal required interface from a backend's client provided by py-youwol.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "BackendClient",
            "navPath": "@nav/api/Notebook.BackendClient",
            "attributes": [],
            "callables": [
                {
                    "name": "fetchJson",
                    "documentation": {
                        "sections": [
                            {
                                "content": "Standard  `fetch`  transformed to json.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            },
                            {
                                "title": "Arguments",
                                "content": "\n*  **url**: URL.\n*  **options**: Fetch options.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "arguments",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "BackendClient.fetchJson",
                    "navPath": "@nav/api/Notebook.BackendClient.fetchJson",
                    "code": {
                        "filePath": "src/lib/notebook/interpreter-execution.ts",
                        "declaration": "fetchJson(url: string, options: unknown): Promise<unknown>",
                        "implementation": "",
                        "startLine": 26,
                        "endLine": 27,
                        "references": {
                            "fetchJson": "@nav/api/Notebook.BackendClient.fetchJson",
                            "Promise": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise"
                        }
                    },
                    "semantic": {
                        "role": "method",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    }
                },
                {
                    "name": "fromFetchJson",
                    "documentation": {
                        "sections": [
                            {
                                "content": "Rxjs  `fromFetch`  transformed to json.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            },
                            {
                                "title": "Arguments",
                                "content": "\n*  **url**: URL.\n*  **options**: Fetch options.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "arguments",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "BackendClient.fromFetchJson",
                    "navPath": "@nav/api/Notebook.BackendClient.fromFetchJson",
                    "code": {
                        "filePath": "src/lib/notebook/interpreter-execution.ts",
                        "declaration": "fromFetchJson(url: string, options: unknown): Observable<unknown>",
                        "implementation": "",
                        "startLine": 33,
                        "endLine": 34,
                        "references": {
                            "fromFetchJson": "@nav/api/Notebook.BackendClient.fromFetchJson",
                            "Observable": "https://rxjs.dev/guide/observable"
                        }
                    },
                    "semantic": {
                        "role": "method",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    }
                }
            ],
            "code": {
                "filePath": "src/lib/notebook/interpreter-execution.ts",
                "declaration": "export interface BackendClient",
                "implementation": "export interface BackendClient {\n    /**\n     * Standard `fetch` transformed to json.\n     *\n     * @param url URL.\n     * @param options Fetch options.\n     */\n    fetchJson(url: string, options: unknown): Promise<unknown>\n    /**\n     * Rxjs `fromFetch` transformed to json.\n     *\n     * @param url URL.\n     * @param options Fetch options.\n     */\n    fromFetchJson(url: string, options: unknown): Observable<unknown>\n}",
                "startLine": 19,
                "endLine": 35,
                "references": {
                    "BackendClient": "@nav/api/Notebook.BackendClient",
                    "Promise": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
                    "Observable": "https://rxjs.dev/guide/observable"
                }
            },
            "semantic": {
                "role": "interface",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "CellCommonAttributes",
            "documentation": {
                "sections": [
                    {
                        "content": "The common set for attributes of a notebook cell.\n\nWhen provided from a DOM element in the markdown source, they are defined using kebab case:\n ```\n<some-cell line-numbers='true' read-only='false'></some-cell>\n```",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "CellCommonAttributes",
            "navPath": "@nav/api/Notebook.CellCommonAttributes",
            "attributes": [
                {
                    "name": "lineNumbers",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Whether to display line numbers on cell.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "CellCommonAttributes.lineNumbers",
                    "navPath": "@nav/api/Notebook.CellCommonAttributes.lineNumbers",
                    "code": {
                        "filePath": "src/lib/notebook/notebook-page.ts",
                        "declaration": "lineNumbers?: boolean",
                        "implementation": "",
                        "startLine": 21,
                        "endLine": 22,
                        "references": {
                            "lineNumbers": "@nav/api/Notebook.CellCommonAttributes.lineNumbers"
                        }
                    }
                },
                {
                    "name": "readOnly",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Whether the cell is readonly.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "CellCommonAttributes.readOnly",
                    "navPath": "@nav/api/Notebook.CellCommonAttributes.readOnly",
                    "code": {
                        "filePath": "src/lib/notebook/notebook-page.ts",
                        "declaration": "readOnly?: boolean",
                        "implementation": "",
                        "startLine": 25,
                        "endLine": 26,
                        "references": {
                            "readOnly": "@nav/api/Notebook.CellCommonAttributes.readOnly"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/notebook/notebook-page.ts",
                "declaration": "export interface CellCommonAttributes",
                "implementation": "export interface CellCommonAttributes {\n    /**\n     * Whether to display line numbers on cell.\n     */\n    lineNumbers?: boolean\n    /**\n     * Whether the cell is readonly.\n     */\n    readOnly?: boolean\n}",
                "startLine": 17,
                "endLine": 27,
                "references": {
                    "CellCommonAttributes": "@nav/api/Notebook.CellCommonAttributes"
                }
            },
            "semantic": {
                "role": "interface",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "CellTrait",
            "documentation": {
                "sections": [
                    {
                        "content": "Trait for a Cell within a  <mkapi-api-link nav=\"@nav/api/Notebook.NotebookPage\" semantic=\"class\">NotebookPage</mkapi-api-link> .",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "CellTrait",
            "navPath": "@nav/api/Notebook.CellTrait",
            "attributes": [
                {
                    "name": "cellId",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Cell unique ID.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "CellTrait.cellId",
                    "navPath": "@nav/api/Notebook.CellTrait.cellId",
                    "code": {
                        "filePath": "src/lib/notebook/state.ts",
                        "declaration": "cellId: string",
                        "implementation": "",
                        "startLine": 100,
                        "endLine": 101,
                        "references": {
                            "cellId": "@nav/api/Notebook.CellTrait.cellId"
                        }
                    }
                },
                {
                    "name": "content$",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Observable over the source content of the cell.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "CellTrait.content$",
                    "navPath": "@nav/api/Notebook.CellTrait.content$",
                    "code": {
                        "filePath": "src/lib/notebook/state.ts",
                        "declaration": "content$: BehaviorSubject<string>",
                        "implementation": "",
                        "startLine": 104,
                        "endLine": 105,
                        "references": {
                            "content$": "@nav/api/Notebook.CellTrait.content$",
                            "BehaviorSubject": "https://www.learnrxjs.io/learn-rxjs/subjects/subject"
                        }
                    }
                },
                {
                    "name": "execute",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Define the implementation of cell execution.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "CellTrait.execute",
                    "navPath": "@nav/api/Notebook.CellTrait.execute",
                    "code": {
                        "filePath": "src/lib/notebook/state.ts",
                        "declaration": "execute: (args: ExecArgs, ctx?: ContextTrait) => Promise<Scope>",
                        "implementation": "",
                        "startLine": 108,
                        "endLine": 109,
                        "references": {
                            "execute": "@nav/api/Notebook.CellTrait.execute",
                            "ExecArgs": "@nav/api/Notebook.ExecArgs",
                            "ContextTrait": "@nav/api/MainModule.ContextTrait",
                            "Scope": "@nav/api/Notebook.Scope",
                            "Promise": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/notebook/state.ts",
                "declaration": "export interface CellTrait",
                "implementation": "export interface CellTrait {\n    /**\n     * Cell unique ID.\n     */\n    cellId: string\n    /**\n     * Observable over the source content of the cell.\n     */\n    content$: BehaviorSubject<string>\n    /**\n     * Define the implementation of cell execution.\n     */\n    execute: (args: ExecArgs, ctx?: ContextTrait) => Promise<Scope>\n}",
                "startLine": 96,
                "endLine": 110,
                "references": {
                    "CellTrait": "@nav/api/Notebook.CellTrait",
                    "ExecArgs": "@nav/api/Notebook.ExecArgs",
                    "ContextTrait": "@nav/api/MainModule.ContextTrait",
                    "Scope": "@nav/api/Notebook.Scope",
                    "InterpreterCellView": "@nav/api/Notebook.InterpreterCellView",
                    "JsCellExecutor": "@nav/api/Notebook.JsCellExecutor",
                    "MdCellView": "@nav/api/Notebook.MdCellView",
                    "PyCellExecutor": "@nav/api/Notebook.PyCellExecutor",
                    "WorkerCellView": "@nav/api/Notebook.WorkerCellView",
                    "BehaviorSubject": "https://www.learnrxjs.io/learn-rxjs/subjects/subject",
                    "Promise": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise"
                }
            },
            "semantic": {
                "role": "interface",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "DisplayComponent",
            "documentation": {
                "sections": [
                    {
                        "content": "Represents the type of component of  <mkapi-api-link nav=\"@nav/api/Notebook.DisplayFactory\" semantic=\"type-alias\">DisplayFactory</mkapi-api-link> .",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "DisplayComponent",
            "navPath": "@nav/api/Notebook.DisplayComponent",
            "attributes": [
                {
                    "name": "isCompatible",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Return  `true`  if this display component handle the target data  `t` .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "DisplayComponent.isCompatible",
                    "navPath": "@nav/api/Notebook.DisplayComponent.isCompatible",
                    "code": {
                        "filePath": "src/lib/notebook/display-utils.ts",
                        "declaration": "isCompatible: (t: T) => boolean",
                        "implementation": "",
                        "startLine": 85,
                        "endLine": 86,
                        "references": {
                            "isCompatible": "@nav/api/Notebook.DisplayComponent.isCompatible"
                        }
                    }
                },
                {
                    "name": "name",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Name of the component.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "DisplayComponent.name",
                    "navPath": "@nav/api/Notebook.DisplayComponent.name",
                    "code": {
                        "filePath": "src/lib/notebook/display-utils.ts",
                        "declaration": "name: string",
                        "implementation": "",
                        "startLine": 81,
                        "endLine": 82,
                        "references": {
                            "name": "@nav/api/Notebook.DisplayComponent.name"
                        }
                    }
                },
                {
                    "name": "view",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Create the view from the target data  `t` ,  `t`  does satisfy the condition of  `isCompatible` .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "DisplayComponent.view",
                    "navPath": "@nav/api/Notebook.DisplayComponent.view",
                    "code": {
                        "filePath": "src/lib/notebook/display-utils.ts",
                        "declaration": "view: (t: T) => AnyVirtualDOM",
                        "implementation": "",
                        "startLine": 90,
                        "endLine": 91,
                        "references": {
                            "view": "@nav/api/Notebook.DisplayComponent.view",
                            "AnyVirtualDOM": "/apps/@rx-vdom/doc/latest?nav=/api.AnyVirtualDOM"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/notebook/display-utils.ts",
                "declaration": "export interface DisplayComponent<T = unknown>",
                "implementation": "export interface DisplayComponent<T = unknown> {\n    /**\n     * Name of the component.\n     */\n    name: string\n    /**\n     * Return `true` if this display component handle the target data `t`.\n     */\n    isCompatible: (t: T) => boolean\n\n    /**\n     * Create the view from the target data `t`, `t` does satisfy the condition of `isCompatible`.\n     */\n    view: (t: T) => AnyVirtualDOM\n}",
                "startLine": 77,
                "endLine": 92,
                "references": {
                    "DisplayComponent": "@nav/api/Notebook.DisplayComponent",
                    "AnyVirtualDOM": "/apps/@rx-vdom/doc/latest?nav=/api.AnyVirtualDOM"
                }
            },
            "semantic": {
                "role": "interface",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "ExecInput",
            "documentation": {
                "sections": [
                    {
                        "content": "Represents the inputs when executing a JavaScript snippet.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "ExecInput",
            "navPath": "@nav/api/Notebook.ExecInput",
            "attributes": [
                {
                    "name": "cellId",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Cell ID.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "ExecInput.cellId",
                    "navPath": "@nav/api/Notebook.ExecInput.cellId",
                    "code": {
                        "filePath": "src/lib/notebook/execution-common.ts",
                        "declaration": "cellId: string",
                        "implementation": "",
                        "startLine": 12,
                        "endLine": 13,
                        "references": {
                            "cellId": "@nav/api/Notebook.ExecInput.cellId"
                        }
                    }
                },
                {
                    "name": "displayFactory",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Factory to display HTML elements when  `display`  is called.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "ExecInput.displayFactory",
                    "navPath": "@nav/api/Notebook.ExecInput.displayFactory",
                    "code": {
                        "filePath": "src/lib/notebook/execution-common.ts",
                        "declaration": "displayFactory: DisplayFactory",
                        "implementation": "",
                        "startLine": 32,
                        "endLine": 33,
                        "references": {
                            "displayFactory": "@nav/api/Notebook.ExecInput.displayFactory",
                            "DisplayFactory": "@nav/api/Notebook.DisplayFactory"
                        }
                    }
                },
                {
                    "name": "error$",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Subject in which errors are sent.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "ExecInput.error$",
                    "navPath": "@nav/api/Notebook.ExecInput.error$",
                    "code": {
                        "filePath": "src/lib/notebook/execution-common.ts",
                        "declaration": "error$: Subject<ExecCellError | undefined>",
                        "implementation": "",
                        "startLine": 28,
                        "endLine": 29,
                        "references": {
                            "error$": "@nav/api/Notebook.ExecInput.error$",
                            "ExecCellError": "@nav/api/Notebook.ExecCellError",
                            "Subject": "https://www.learnrxjs.io/learn-rxjs/subjects/subject"
                        }
                    }
                },
                {
                    "name": "invalidated$",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Observable that emits when the associated cell is invalidated.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "ExecInput.invalidated$",
                    "navPath": "@nav/api/Notebook.ExecInput.invalidated$",
                    "code": {
                        "filePath": "src/lib/notebook/execution-common.ts",
                        "declaration": "invalidated$: Observable<unknown>",
                        "implementation": "",
                        "startLine": 36,
                        "endLine": 37,
                        "references": {
                            "invalidated$": "@nav/api/Notebook.ExecInput.invalidated$",
                            "Observable": "https://rxjs.dev/guide/observable"
                        }
                    }
                },
                {
                    "name": "output$",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Subject in which output views are sent (when using  `display`  function).",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "ExecInput.output$",
                    "navPath": "@nav/api/Notebook.ExecInput.output$",
                    "code": {
                        "filePath": "src/lib/notebook/execution-common.ts",
                        "declaration": "output$: Subject<Output>",
                        "implementation": "",
                        "startLine": 24,
                        "endLine": 25,
                        "references": {
                            "output$": "@nav/api/Notebook.ExecInput.output$",
                            "Output": "@nav/api/Notebook.Output",
                            "Subject": "https://www.learnrxjs.io/learn-rxjs/subjects/subject"
                        }
                    }
                },
                {
                    "name": "scope",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Entering scope.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "ExecInput.scope",
                    "navPath": "@nav/api/Notebook.ExecInput.scope",
                    "code": {
                        "filePath": "src/lib/notebook/execution-common.ts",
                        "declaration": "scope: Scope",
                        "implementation": "",
                        "startLine": 20,
                        "endLine": 21,
                        "references": {
                            "scope": "@nav/api/Notebook.ExecInput.scope",
                            "Scope": "@nav/api/Notebook.Scope"
                        }
                    }
                },
                {
                    "name": "src",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Source code to execute.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "ExecInput.src",
                    "navPath": "@nav/api/Notebook.ExecInput.src",
                    "code": {
                        "filePath": "src/lib/notebook/execution-common.ts",
                        "declaration": "src: string",
                        "implementation": "",
                        "startLine": 16,
                        "endLine": 17,
                        "references": {
                            "src": "@nav/api/Notebook.ExecInput.src"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/notebook/execution-common.ts",
                "declaration": "export interface ExecInput",
                "implementation": "export interface ExecInput {\n    /**\n     * Cell ID.\n     */\n    cellId: string\n    /**\n     * Source code to execute.\n     */\n    src: string\n    /**\n     * Entering scope.\n     */\n    scope: Scope\n    /**\n     * Subject in which output views are sent (when using `display` function).\n     */\n    output$: Subject<Output>\n    /**\n     * Subject in which errors are sent.\n     */\n    error$: Subject<ExecCellError | undefined>\n    /**\n     * Factory to display HTML elements when `display` is called.\n     */\n    displayFactory: DisplayFactory\n    /**\n     * Observable that emits when the associated cell is invalidated.\n     */\n    invalidated$: Observable<unknown>\n}",
                "startLine": 8,
                "endLine": 38,
                "references": {
                    "ExecInput": "@nav/api/Notebook.ExecInput",
                    "DisplayFactory": "@nav/api/Notebook.DisplayFactory",
                    "ExecCellError": "@nav/api/Notebook.ExecCellError",
                    "Output": "@nav/api/Notebook.Output",
                    "Scope": "@nav/api/Notebook.Scope",
                    "Subject": "https://www.learnrxjs.io/learn-rxjs/subjects/subject",
                    "Observable": "https://rxjs.dev/guide/observable"
                }
            },
            "semantic": {
                "role": "interface",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "InterpreterApi",
            "documentation": {
                "sections": [
                    {
                        "content": "Defines the request and response structure for the  `/run`  endpoint\na backend should implement to be used as interpreter.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "InterpreterApi",
            "navPath": "@nav/api/Notebook.InterpreterApi",
            "attributes": [
                {
                    "name": "body",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Request payload.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "InterpreterApi.body",
                    "navPath": "@nav/api/Notebook.InterpreterApi.body",
                    "code": {
                        "filePath": "src/lib/notebook/interpreter-cell-view.ts",
                        "declaration": "body: {\n        /**\n         * Unique identifier for the executing cell.\n         */\n        cellId: string\n        /**\n         * Code snippet to be executed.\n         */\n        code: string\n        /**\n         * Key-value map of variables captured from the executing cell.\n         *\n         * **All values must be serializable.**\n         */\n        capturedIn: Record<string, unknown>\n        /**\n         * List of variable names to extract as output after execution.\n         */\n        capturedOut: string[]\n    }",
                        "implementation": "",
                        "startLine": 32,
                        "endLine": 33,
                        "references": {
                            "body": "@nav/api/Notebook.InterpreterApi.body",
                            "Record": "https://www.typescriptlang.org/docs/handbook/utility-types.html#recordkeys-type"
                        }
                    }
                },
                {
                    "name": "response",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Expected response from the backend interpreter.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "InterpreterApi.response",
                    "navPath": "@nav/api/Notebook.InterpreterApi.response",
                    "code": {
                        "filePath": "src/lib/notebook/interpreter-cell-view.ts",
                        "declaration": "response: {\n        /**\n         * Standard output generated during execution.\n         */\n        output: string\n        /**\n         * Standard error output, if any.\n         */\n        error?: Omit<ExecCellError, 'scopeIn' | 'src'>\n        /**\n         * Key-value map of captured output variables.\n         *\n         * **All values must be serializable.**\n         */\n        capturedOut: Record<string, unknown>\n    }",
                        "implementation": "",
                        "startLine": 56,
                        "endLine": 57,
                        "references": {
                            "response": "@nav/api/Notebook.InterpreterApi.response",
                            "ExecCellError": "@nav/api/Notebook.ExecCellError",
                            "Record": "https://www.typescriptlang.org/docs/handbook/utility-types.html#recordkeys-type",
                            "Omit": "https://www.typescriptlang.org/docs/handbook/utility-types.html#omittype-keys"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/notebook/interpreter-cell-view.ts",
                "declaration": "export interface InterpreterApi",
                "implementation": "export interface InterpreterApi {\n    /**\n     * API definition of the (single) `/run` endpoint to implement.\n     */\n    /**\n     * Request payload.\n     */\n    body: {\n        /**\n         * Unique identifier for the executing cell.\n         */\n        cellId: string\n        /**\n         * Code snippet to be executed.\n         */\n        code: string\n        /**\n         * Key-value map of variables captured from the executing cell.\n         *\n         * **All values must be serializable.**\n         */\n        capturedIn: Record<string, unknown>\n        /**\n         * List of variable names to extract as output after execution.\n         */\n        capturedOut: string[]\n    }\n\n    /**\n     * Expected response from the backend interpreter.\n     */\n    response: {\n        /**\n         * Standard output generated during execution.\n         */\n        output: string\n        /**\n         * Standard error output, if any.\n         */\n        error?: Omit<ExecCellError, 'scopeIn' | 'src'>\n        /**\n         * Key-value map of captured output variables.\n         *\n         * **All values must be serializable.**\n         */\n        capturedOut: Record<string, unknown>\n    }\n}",
                "startLine": 25,
                "endLine": 73,
                "references": {
                    "InterpreterApi": "@nav/api/Notebook.InterpreterApi",
                    "ExecCellError": "@nav/api/Notebook.ExecCellError",
                    "Record": "https://www.typescriptlang.org/docs/handbook/utility-types.html#recordkeys-type",
                    "Omit": "https://www.typescriptlang.org/docs/handbook/utility-types.html#omittype-keys"
                }
            },
            "semantic": {
                "role": "interface",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "NotebookOptions",
            "documentation": {
                "sections": [
                    {
                        "content": "Global options for a  <mkapi-api-link nav=\"@nav/api/Notebook.NotebookPage\" semantic=\"class\">NotebookPage</mkapi-api-link> .",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "NotebookOptions",
            "navPath": "@nav/api/Notebook.NotebookOptions",
            "attributes": [
                {
                    "name": "defaultCellAttributes",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The default values for cell's attribute.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "NotebookOptions.defaultCellAttributes",
                    "navPath": "@nav/api/Notebook.NotebookOptions.defaultCellAttributes",
                    "code": {
                        "filePath": "src/lib/notebook/notebook-page.ts",
                        "declaration": "defaultCellAttributes?: CellCommonAttributes",
                        "implementation": "",
                        "startLine": 47,
                        "endLine": 48,
                        "references": {
                            "defaultCellAttributes": "@nav/api/Notebook.NotebookOptions.defaultCellAttributes",
                            "CellCommonAttributes": "@nav/api/Notebook.CellCommonAttributes"
                        }
                    }
                },
                {
                    "name": "markdown",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Options for markdown parsing.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "NotebookOptions.markdown",
                    "navPath": "@nav/api/Notebook.NotebookOptions.markdown",
                    "code": {
                        "filePath": "src/lib/notebook/notebook-page.ts",
                        "declaration": "markdown?: MdParsingOptions",
                        "implementation": "",
                        "startLine": 52,
                        "endLine": 53,
                        "references": {
                            "markdown": "@nav/api/Notebook.NotebookOptions.markdown",
                            "MdParsingOptions": "@nav/api/MainModule.MdParsingOptions"
                        }
                    }
                },
                {
                    "name": "runAtStart",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Whether to run all the cells of a notebook page when loaded.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "NotebookOptions.runAtStart",
                    "navPath": "@nav/api/Notebook.NotebookOptions.runAtStart",
                    "code": {
                        "filePath": "src/lib/notebook/notebook-page.ts",
                        "declaration": "runAtStart?: boolean",
                        "implementation": "",
                        "startLine": 43,
                        "endLine": 44,
                        "references": {
                            "runAtStart": "@nav/api/Notebook.NotebookOptions.runAtStart"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/notebook/notebook-page.ts",
                "declaration": "export interface NotebookOptions",
                "implementation": "export interface NotebookOptions {\n    /**\n     * Whether to run all the cells of a notebook page when loaded.\n     */\n    runAtStart?: boolean\n    /**\n     * The default values for cell's attribute.\n     */\n    defaultCellAttributes?: CellCommonAttributes\n\n    /**\n     * Options for markdown parsing.\n     */\n    markdown?: MdParsingOptions\n}",
                "startLine": 39,
                "endLine": 54,
                "references": {
                    "NotebookOptions": "@nav/api/Notebook.NotebookOptions",
                    "CellCommonAttributes": "@nav/api/Notebook.CellCommonAttributes",
                    "MdParsingOptions": "@nav/api/MainModule.MdParsingOptions"
                }
            },
            "semantic": {
                "role": "interface",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "NotebookStateParameters",
            "documentation": {
                "sections": [
                    {
                        "content": "Parameters to instantiate a  <mkapi-api-link nav=\"@nav/api/Notebook.State\" semantic=\"class\">State</mkapi-api-link> .",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "NotebookStateParameters",
            "navPath": "@nav/api/Notebook.NotebookStateParameters",
            "attributes": [
                {
                    "name": "displayFactory",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Additional custom  <mkapi-api-link nav=\"@nav/api/Notebook.DisplayFactory\" semantic=\"type-alias\">DisplayFactory</mkapi-api-link>  invoked when  `display`  is used.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "NotebookStateParameters.displayFactory",
                    "navPath": "@nav/api/Notebook.NotebookStateParameters.displayFactory",
                    "code": {
                        "filePath": "src/lib/notebook/state.ts",
                        "declaration": "displayFactory?: DisplayFactory",
                        "implementation": "",
                        "startLine": 152,
                        "endLine": 153,
                        "references": {
                            "displayFactory": "@nav/api/Notebook.NotebookStateParameters.displayFactory",
                            "DisplayFactory": "@nav/api/Notebook.DisplayFactory"
                        }
                    }
                },
                {
                    "name": "initialScope",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Initial scope provided to the first executing cell.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "NotebookStateParameters.initialScope",
                    "navPath": "@nav/api/Notebook.NotebookStateParameters.initialScope",
                    "code": {
                        "filePath": "src/lib/notebook/state.ts",
                        "declaration": "initialScope?: Partial<Scope>",
                        "implementation": "",
                        "startLine": 148,
                        "endLine": 149,
                        "references": {
                            "initialScope": "@nav/api/Notebook.NotebookStateParameters.initialScope",
                            "Scope": "@nav/api/Notebook.Scope",
                            "Partial": "https://www.typescriptlang.org/docs/handbook/utility-types.html#partialtype"
                        }
                    }
                },
                {
                    "name": "router",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Application's router.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "NotebookStateParameters.router",
                    "navPath": "@nav/api/Notebook.NotebookStateParameters.router",
                    "code": {
                        "filePath": "src/lib/notebook/state.ts",
                        "declaration": "router: Router",
                        "implementation": "",
                        "startLine": 144,
                        "endLine": 145,
                        "references": {
                            "router": "@nav/api/Notebook.NotebookStateParameters.router",
                            "Router": "@nav/api/MainModule.Router"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/notebook/state.ts",
                "declaration": "export interface NotebookStateParameters",
                "implementation": "export interface NotebookStateParameters {\n    /**\n     * Application's router.\n     */\n    router: Router\n    /**\n     * Initial scope provided to the first executing cell.\n     */\n    initialScope?: Partial<Scope>\n    /**\n     * Additional custom {@link DisplayFactory} invoked when `display` is used.\n     */\n    displayFactory?: DisplayFactory\n}",
                "startLine": 140,
                "endLine": 154,
                "references": {
                    "NotebookStateParameters": "@nav/api/Notebook.NotebookStateParameters",
                    "DisplayFactory": "@nav/api/Notebook.DisplayFactory",
                    "Scope": "@nav/api/Notebook.Scope",
                    "Router": "@nav/api/MainModule.Router",
                    "Partial": "https://www.typescriptlang.org/docs/handbook/utility-types.html#partialtype"
                }
            },
            "semantic": {
                "role": "interface",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "PyodideProxy",
            "documentation": {
                "sections": [
                    {
                        "content": "Definition of a Pyodide proxy.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "PyodideProxy",
            "navPath": "@nav/api/Notebook.PyodideProxy",
            "attributes": [],
            "callables": [
                {
                    "name": "toJs",
                    "documentation": {
                        "sections": [
                            {
                                "content": "Retrieve the translated type in JavaScript.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "PyodideProxy.toJs",
                    "navPath": "@nav/api/Notebook.PyodideProxy.toJs",
                    "code": {
                        "filePath": "src/lib/notebook/py-execution.ts",
                        "declaration": "toJs(options: unknown): T",
                        "implementation": "",
                        "startLine": 24,
                        "endLine": 25,
                        "references": {
                            "toJs": "@nav/api/Notebook.PyodideProxy.toJs"
                        }
                    },
                    "semantic": {
                        "role": "method",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    }
                }
            ],
            "code": {
                "filePath": "src/lib/notebook/py-execution.ts",
                "declaration": "export interface PyodideProxy<T>",
                "implementation": "export interface PyodideProxy<T> {\n    /**\n     * Retrieve the translated type in JavaScript.\n     */\n    toJs(options: unknown): T\n}",
                "startLine": 20,
                "endLine": 26,
                "references": {
                    "PyodideProxy": "@nav/api/Notebook.PyodideProxy"
                }
            },
            "semantic": {
                "role": "interface",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "Scope",
            "documentation": {
                "sections": [
                    {
                        "content": "Represents the scope of a cell.\n\nThis is a work in progress: at least functions and classes are missing.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "Scope",
            "navPath": "@nav/api/Notebook.Scope",
            "attributes": [
                {
                    "name": "const",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The  `const`  variables: keyed by their name and mapped to their values.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "Scope.const",
                    "navPath": "@nav/api/Notebook.Scope.const",
                    "code": {
                        "filePath": "src/lib/notebook/state.ts",
                        "declaration": "const: Record<string, unknown>",
                        "implementation": "",
                        "startLine": 59,
                        "endLine": 60,
                        "references": {
                            "const": "@nav/api/Notebook.Scope.const",
                            "Record": "https://www.typescriptlang.org/docs/handbook/utility-types.html#recordkeys-type"
                        }
                    }
                },
                {
                    "name": "let",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The  `let`  variables: keyed by their name and mapped to their values.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "Scope.let",
                    "navPath": "@nav/api/Notebook.Scope.let",
                    "code": {
                        "filePath": "src/lib/notebook/state.ts",
                        "declaration": "let: Record<string, unknown>",
                        "implementation": "",
                        "startLine": 55,
                        "endLine": 56,
                        "references": {
                            "let": "@nav/api/Notebook.Scope.let",
                            "Record": "https://www.typescriptlang.org/docs/handbook/utility-types.html#recordkeys-type"
                        }
                    }
                },
                {
                    "name": "python",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The exported globals of python runtime.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "Scope.python",
                    "navPath": "@nav/api/Notebook.Scope.python",
                    "code": {
                        "filePath": "src/lib/notebook/state.ts",
                        "declaration": "python: Record<string, unknown>",
                        "implementation": "",
                        "startLine": 64,
                        "endLine": 65,
                        "references": {
                            "python": "@nav/api/Notebook.Scope.python",
                            "Record": "https://www.typescriptlang.org/docs/handbook/utility-types.html#recordkeys-type"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/notebook/state.ts",
                "declaration": "export interface Scope",
                "implementation": "export interface Scope {\n    /**\n     * The `let` variables: keyed by their name and mapped to their values.\n     */\n    let: Record<string, unknown>\n    /**\n     * The `const` variables: keyed by their name and mapped to their values.\n     */\n    const: Record<string, unknown>\n\n    /**\n     * The exported globals of python runtime.\n     */\n    python: Record<string, unknown>\n}",
                "startLine": 51,
                "endLine": 66,
                "references": {
                    "Scope": "@nav/api/Notebook.Scope",
                    "Record": "https://www.typescriptlang.org/docs/handbook/utility-types.html#recordkeys-type"
                }
            },
            "semantic": {
                "role": "interface",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "AstType",
            "documentation": {
                "sections": [
                    {
                        "content": "The different kind of nodes in AST structures.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "AstType",
            "navPath": "@nav/api/Notebook.AstType",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/notebook/js-execution.ts",
                "declaration": "export type AstType =\n    | 'Identifier'\n    | 'VariableDeclaration'\n    | 'BlockStatement'\n    | 'FunctionDeclaration'\n    | 'CallExpression'\n    | 'ObjectExpression'\n    | 'MemberExpression'\n    | 'ClassDeclaration'",
                "implementation": "",
                "startLine": 21,
                "endLine": 22,
                "references": {
                    "AstType": "@nav/api/Notebook.AstType"
                }
            },
            "semantic": {
                "role": "type-alias",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "CellFactory",
            "documentation": {
                "sections": [
                    {
                        "content": "Defines a factory function signature for creating a specific type of cell.\n\nEach factory function is responsible for constructing a cell's behavior and view\nbased on the provided notebook state and HTML representation.\n\nFactory functions are registered in  <mkapi-api-link nav=\"@nav/api/Notebook.State.CellsFactory\" semantic=\"attribute\">State.CellsFactory</mkapi-api-link>  and are invoked\nwhen parsing Markdown source containing corresponding cell elements.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "CellFactory",
            "navPath": "@nav/api/Notebook.CellFactory",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/notebook/state.ts",
                "declaration": "export type CellFactory = (p: {\n    // The notebook page state.\n    state: State\n    // The HTML cell declaration in the Markdown source.\n    elem: HTMLElement\n    // Markdown parsing options.\n    parserOptions: MdParsingOptions\n}) => CellTrait & AnyView",
                "implementation": "",
                "startLine": 164,
                "endLine": 165,
                "references": {
                    "CellFactory": "@nav/api/Notebook.CellFactory",
                    "MdParsingOptions": "@nav/api/MainModule.MdParsingOptions",
                    "State": "@nav/api/Notebook.State",
                    "CellTrait": "@nav/api/Notebook.CellTrait",
                    "AnyView": "@nav/api/MainModule.AnyView",
                    "HTMLElement": "https://www.typescriptlang.org/docs/handbook/dom-manipulation.html"
                }
            },
            "semantic": {
                "role": "type-alias",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "DisplayFactory",
            "documentation": {
                "sections": [
                    {
                        "content": "Represents a factory to display elements on the page.\n\nIt is usually composed by the elements of the  <mkapi-api-link nav=\"@nav/api/Notebook.defaultDisplayFactory\" semantic=\"function\">defaultDisplayFactory</mkapi-api-link> , and eventually includes custom\ncomponents provided to the  <mkapi-api-link nav=\"@nav/api/Notebook.NotebookPage\" semantic=\"class\">NotebookPage</mkapi-api-link>  constructor.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "DisplayFactory",
            "navPath": "@nav/api/Notebook.DisplayFactory",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/notebook/display-utils.ts",
                "declaration": "export type DisplayFactory = DisplayComponent[]",
                "implementation": "",
                "startLine": 99,
                "endLine": 100,
                "references": {
                    "DisplayFactory": "@nav/api/Notebook.DisplayFactory",
                    "DisplayComponent": "@nav/api/Notebook.DisplayComponent"
                }
            },
            "semantic": {
                "role": "type-alias",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "ExecArgs",
            "documentation": {
                "sections": [
                    {
                        "content": "Arguments used to execute a cell, see  <mkapi-api-link nav=\"@nav/api/Notebook.CellTrait.execute\" semantic=\"attribute\">CellTrait.execute</mkapi-api-link> .",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "ExecArgs",
            "navPath": "@nav/api/Notebook.ExecArgs",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/notebook/state.ts",
                "declaration": "export type ExecArgs = Omit<ExecInput, 'invalidated$'> & {\n    /**\n     * The function used to load a submodule from a notebook page.\n     *\n     * @param path Navigation path of the submodule.\n     * @param ctx Execution context used for logging and tracing.\n     * @returns The exported symbols.\n     */\n    load: (path: string, ctx: ContextTrait) => Promise<Record<string, unknown>>\n\n    /**\n     * Owning state of the cell.\n     */\n    owningState: State\n}",
                "implementation": "",
                "startLine": 77,
                "endLine": 78,
                "references": {
                    "ExecArgs": "@nav/api/Notebook.ExecArgs",
                    "ExecInput": "@nav/api/Notebook.ExecInput",
                    "ContextTrait": "@nav/api/MainModule.ContextTrait",
                    "State": "@nav/api/Notebook.State",
                    "Omit": "https://www.typescriptlang.org/docs/handbook/utility-types.html#omittype-keys",
                    "Promise": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
                    "Record": "https://www.typescriptlang.org/docs/handbook/utility-types.html#recordkeys-type"
                }
            },
            "semantic": {
                "role": "type-alias",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "ExecJsInput",
            "documentation": {
                "sections": [
                    {
                        "content": "Represents the inputs when executing a JavaScript snippet.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "ExecJsInput",
            "navPath": "@nav/api/Notebook.ExecJsInput",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/notebook/js-execution.ts",
                "declaration": "export type ExecJsInput = ExecInput & {\n    /**\n     * The function used to load a submodule from another notebook page.\n     * @param path Navigation path of the page.\n     * @param ctx Execution context used for logging and tracing.\n     */\n    load: (\n        path: string,\n        ctx: ContextTrait,\n    ) => Promise<{ [_k: string]: unknown }>\n}",
                "implementation": "",
                "startLine": 103,
                "endLine": 104,
                "references": {
                    "ExecJsInput": "@nav/api/Notebook.ExecJsInput",
                    "ExecInput": "@nav/api/Notebook.ExecInput",
                    "ContextTrait": "@nav/api/MainModule.ContextTrait",
                    "Promise": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise"
                }
            },
            "semantic": {
                "role": "type-alias",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "ExecPyInput",
            "documentation": {
                "sections": [
                    {
                        "content": "Represents the inputs when executing a JavaScript snippet.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "ExecPyInput",
            "navPath": "@nav/api/Notebook.ExecPyInput",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/notebook/py-execution.ts",
                "declaration": "export type ExecPyInput = ExecInput & {\n    /**\n     * Namespace holding pyodide globals.\n     */\n    pyNamespace: PyodideNamespace\n}",
                "implementation": "",
                "startLine": 30,
                "endLine": 31,
                "references": {
                    "ExecPyInput": "@nav/api/Notebook.ExecPyInput",
                    "ExecInput": "@nav/api/Notebook.ExecInput",
                    "PyodideNamespace": "@nav/api/Notebook.PyodideNamespace"
                }
            },
            "semantic": {
                "role": "type-alias",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "ExecWorkerPoolInput",
            "documentation": {
                "sections": [
                    {
                        "content": "Represents the inputs when executing a Workers Pool cell.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "ExecWorkerPoolInput",
            "navPath": "@nav/api/Notebook.ExecWorkerPoolInput",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/notebook/worker-execution.ts",
                "declaration": "export type ExecWorkerPoolInput = ExecInput & {\n    /**\n     * Captured inputs. Keys are variable name and values associated value.\n     */\n    capturedIn: Record<string, unknown>\n    /**\n     * Names of captured output variables.\n     */\n    capturedOut: string[]\n    /**\n     * The worker pool in which the execution is scheduled.\n     */\n    workersPool: WorkersPoolTypes.WorkersPool\n    /**\n     * If `javascript`, the script is interpreted directly, if `python` the script is interpreted through pyodide.\n     */\n    mode: 'javascript' | 'python'\n}",
                "implementation": "",
                "startLine": 21,
                "endLine": 22,
                "references": {
                    "ExecWorkerPoolInput": "@nav/api/Notebook.ExecWorkerPoolInput",
                    "ExecInput": "@nav/api/Notebook.ExecInput",
                    "Record": "https://www.typescriptlang.org/docs/handbook/utility-types.html#recordkeys-type"
                }
            },
            "semantic": {
                "role": "type-alias",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "InterpreterCellAttributes",
            "documentation": {
                "sections": [
                    {
                        "content": "All attributes available for a  <mkapi-api-link nav=\"@nav/api/Notebook.InterpreterCellView\" semantic=\"class\">InterpreterCellView</mkapi-api-link> .",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "InterpreterCellAttributes",
            "navPath": "@nav/api/Notebook.InterpreterCellAttributes",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/notebook/interpreter-cell-view.ts",
                "declaration": "export type InterpreterCellAttributes = CellCommonAttributes & {\n    /**\n     * Name (exported symbol) of the JavaScript HTTP client used as an interpreter.\n     */\n    interpreter: string\n    /**\n     * Language used for syntax highlighting in the editor.\n     */\n    language: 'javascript' | 'python' | 'unknown'\n    /**\n     * Captured variable name forwarded to the interpreter as input.\n     * In the `interpreter-cell` DOM element, it is the attribute `captured-in` with\n     * value defining the name of captured variables separated by space.\n     */\n    capturedIn: string[]\n    /**\n     * Captured variable name forwarded from the interpreter as output.\n     * In the `interpreter-cell` DOM element, it is the attribute `captured-out` with\n     * value defining the name of captured variables separated by space.\n     */\n    capturedOut: string[]\n}",
                "implementation": "",
                "startLine": 77,
                "endLine": 78,
                "references": {
                    "InterpreterCellAttributes": "@nav/api/Notebook.InterpreterCellAttributes",
                    "CellCommonAttributes": "@nav/api/Notebook.CellCommonAttributes"
                }
            },
            "semantic": {
                "role": "type-alias",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "JsCellAttributes",
            "documentation": {
                "sections": [
                    {
                        "content": "All attributes available for a javascript cell: the common ones + 'reactive'.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "JsCellAttributes",
            "navPath": "@nav/api/Notebook.JsCellAttributes",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/notebook/js-cell-view.ts",
                "declaration": "export type JsCellAttributes = CellCommonAttributes & {\n    /**\n     * If the cell is reactive, Observables & Promises referenced are automatically resolved.\n     * It uses a 'combineLatest' policy.\n     */\n    reactive: boolean\n}",
                "implementation": "",
                "startLine": 13,
                "endLine": 14,
                "references": {
                    "JsCellAttributes": "@nav/api/Notebook.JsCellAttributes",
                    "CellCommonAttributes": "@nav/api/Notebook.CellCommonAttributes"
                }
            },
            "semantic": {
                "role": "type-alias",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "Language",
            "documentation": {
                "sections": [
                    {
                        "content": "Accepted language.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "Language",
            "navPath": "@nav/api/Notebook.Language",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/notebook/cell-views.ts",
                "declaration": "export type Language = 'javascript' | 'markdown' | 'python' | 'unknown'",
                "implementation": "",
                "startLine": 34,
                "endLine": 35,
                "references": {
                    "Language": "@nav/api/Notebook.Language"
                }
            },
            "semantic": {
                "role": "type-alias",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "MdCellAttributes",
            "documentation": {
                "sections": [
                    {
                        "content": "All attributes available for a Markdown cell are the common ones for now.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "MdCellAttributes",
            "navPath": "@nav/api/Notebook.MdCellAttributes",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/notebook/md-cell-view.ts",
                "declaration": "export type MdCellAttributes = CellCommonAttributes",
                "implementation": "",
                "startLine": 31,
                "endLine": 32,
                "references": {
                    "MdCellAttributes": "@nav/api/Notebook.MdCellAttributes",
                    "CellCommonAttributes": "@nav/api/Notebook.CellCommonAttributes"
                }
            },
            "semantic": {
                "role": "type-alias",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "NotebookViewParameters",
            "documentation": {
                "sections": [
                    {
                        "content": "Parameters to instantiate a notebook view - either a whole page as ( <mkapi-api-link nav=\"@nav/api/Notebook.NotebookPage\" semantic=\"class\">NotebookPage</mkapi-api-link> ), or a single section\n( <mkapi-api-link nav=\"@nav/api/Notebook.NotebookSection\" semantic=\"class\">NotebookSection</mkapi-api-link> ).",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "NotebookViewParameters",
            "navPath": "@nav/api/Notebook.NotebookViewParameters",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/notebook/notebook-page.ts",
                "declaration": "export type NotebookViewParameters = NotebookStateParameters & {\n    /**\n     * Url pointing to the markdown content, only used if the `src` attribute is not provided.\n     */\n    url?: string\n    /**\n     * Markdown source content. To fetch from a URL leave it empty & provide instead\n     * the `url` attribute.\n     */\n    src?: string\n    /**\n     * Global options for the page, in particular defined the default attribute for the various\n     */\n    options?: NotebookOptions\n}",
                "implementation": "",
                "startLine": 59,
                "endLine": 60,
                "references": {
                    "NotebookViewParameters": "@nav/api/Notebook.NotebookViewParameters",
                    "NotebookStateParameters": "@nav/api/Notebook.NotebookStateParameters",
                    "NotebookOptions": "@nav/api/Notebook.NotebookOptions"
                }
            },
            "semantic": {
                "role": "type-alias",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "Output",
            "documentation": {
                "sections": [
                    {
                        "content": "Type of the outputs generated by a cell.\n\nThe type  `undefined`  is a signal to clear the outputs displayed.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "Output",
            "navPath": "@nav/api/Notebook.Output",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/notebook/state.ts",
                "declaration": "export type Output = AnyVirtualDOM | undefined",
                "implementation": "",
                "startLine": 72,
                "endLine": 73,
                "references": {
                    "Output": "@nav/api/Notebook.Output",
                    "AnyVirtualDOM": "/apps/@rx-vdom/doc/latest?nav=/api.AnyVirtualDOM"
                }
            },
            "semantic": {
                "role": "type-alias",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "OutputMode",
            "documentation": {
                "sections": [
                    {
                        "content": "Display mode for  <mkapi-api-link nav=\"@nav/api/Notebook.DeportedOutputsView\" semantic=\"class\">deported outputs</mkapi-api-link> .",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "OutputMode",
            "navPath": "@nav/api/Notebook.OutputMode",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/notebook/cell-views.ts",
                "declaration": "export type OutputMode = 'normal' | 'fullscreen'",
                "implementation": "",
                "startLine": 376,
                "endLine": 377,
                "references": {
                    "OutputMode": "@nav/api/Notebook.OutputMode"
                }
            },
            "semantic": {
                "role": "type-alias",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "PyCellAttributes",
            "documentation": {
                "sections": [
                    {
                        "content": "All attributes available for a python cell are the common ones for now.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "PyCellAttributes",
            "navPath": "@nav/api/Notebook.PyCellAttributes",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/notebook/py-cell-view.ts",
                "declaration": "export type PyCellAttributes = CellCommonAttributes",
                "implementation": "",
                "startLine": 13,
                "endLine": 14,
                "references": {
                    "PyCellAttributes": "@nav/api/Notebook.PyCellAttributes",
                    "CellCommonAttributes": "@nav/api/Notebook.CellCommonAttributes"
                }
            },
            "semantic": {
                "role": "type-alias",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "WorkerCellAttributes",
            "documentation": {
                "sections": [
                    {
                        "content": "All attributes available for a 'worker' cell.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "WorkerCellAttributes",
            "navPath": "@nav/api/Notebook.WorkerCellAttributes",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/notebook/worker-cell-view.ts",
                "declaration": "export type WorkerCellAttributes = CellCommonAttributes & {\n    /**\n     * Name (exported symbol) of the worker's pool used to execute the code.\n     */\n    workersPool: string\n    /**\n     * Whether to interpret code as JavaScript or Python (pyodide) snippet.\n     */\n    mode: 'javascript' | 'python'\n    /**\n     * The names of the captured variables forwarded to the worker along with the processing task.\n     */\n    capturedIn: string[]\n    /**\n     * The names of the captured variable name forwarded to the main-thread from the worker.\n     */\n    capturedOut: string[]\n}",
                "implementation": "",
                "startLine": 15,
                "endLine": 16,
                "references": {
                    "WorkerCellAttributes": "@nav/api/Notebook.WorkerCellAttributes",
                    "CellCommonAttributes": "@nav/api/Notebook.CellCommonAttributes"
                }
            },
            "semantic": {
                "role": "type-alias",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        }
    ],
    "callables": [
        {
            "name": "defaultDisplayFactory",
            "documentation": {
                "sections": [
                    {
                        "content": "Defines default factory regarding elements passed to the  `display`  function.\n\nThe first item, acting as fallback, is implemented using  <mkapi-api-link nav=\"@nav/api/Notebook.rawView\" semantic=\"function\">rawView</mkapi-api-link> .\n\nThe second item is specific for  `VirtualDOM`  or  `HTMLElement` , see  <mkapi-api-link nav=\"@nav/api/Notebook.htmlView\" semantic=\"function\">htmlView</mkapi-api-link> .",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    },
                    {
                        "title": "Returns",
                        "content": "The default factory.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "returns",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "defaultDisplayFactory",
            "navPath": "@nav/api/Notebook.defaultDisplayFactory",
            "code": {
                "filePath": "src/lib/notebook/display-utils.ts",
                "declaration": "export function defaultDisplayFactory(): DisplayFactory",
                "implementation": "export function defaultDisplayFactory(): DisplayFactory {\n    function isVirtualDOM(obj: unknown): obj is AnyVirtualDOM | RxChild {\n        if (typeof obj !== 'object' || obj === null) {\n            return false\n        }\n        return 'tag' in obj || ('source$' in obj && 'vdomMap' in obj)\n    }\n    return [\n        {\n            name: 'Raw',\n            isCompatible: () => true,\n            view: rawView,\n        },\n        {\n            name: 'HTML',\n            isCompatible: (element: unknown) =>\n                element instanceof HTMLElement || isVirtualDOM(element),\n            view: htmlView,\n        },\n    ]\n}",
                "startLine": 163,
                "endLine": 184,
                "references": {
                    "defaultDisplayFactory": "@nav/api/Notebook.defaultDisplayFactory",
                    "DisplayFactory": "@nav/api/Notebook.DisplayFactory"
                }
            },
            "semantic": {
                "role": "function",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "display",
            "documentation": {
                "sections": [
                    {
                        "content": "Renders and displays elements using registered view generators.\n\nThis function is primarily used in  <mkapi-api-link nav=\"@nav/api/Notebook.JsCellView\" semantic=\"class\">JsCellView</mkapi-api-link> . When invoked from a JavaScript cell,\nthe  `output$`  and  `factory`  parameters are automatically provided, meaning only  `elements` \nneed to be passed explicitly.\n\n**Behavior**\n\n**If an element is not an Observable**\n\n  - Finds the first compatible view generator in  `factory`  (searching in reverse order).\n  - Generates the view using the selected generator.\n  - **The first view generator in  `factory`  is guaranteed to be compatible** and acts as a fallback,\n    providing a raw representation of the object if no other generator is found.\n\n\n**If an element is an Observable**:\n\n  - Subscribes to it and applies the same view generation logic dynamically.\n\n\n**If multiple elements** are provided, they are displayed in a horizontally flexible layout.\n\nOnce rendered, the resulting view is emitted via the  `output$`  stream.\n\nSee  <mkapi-api-link nav=\"@nav/api/Notebook.DisplayFactory\" semantic=\"type-alias\">DisplayFactory</mkapi-api-link>  for available view generators.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    },
                    {
                        "title": "Arguments",
                        "content": "\n*  **output$**: The Subject that emits the rendered elements.\n*  **factory**: A collection of view generators used to render elements.\n*  **elements**: The elements to display.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "arguments",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "display",
            "navPath": "@nav/api/Notebook.display",
            "code": {
                "filePath": "src/lib/notebook/display-utils.ts",
                "declaration": "export function display(\n    output$: Subject<Output>,\n    factory: DisplayFactory,\n    ...elements: unknown[]\n)",
                "implementation": "export function display(\n    output$: Subject<Output>,\n    factory: DisplayFactory,\n    ...elements: unknown[]\n) {\n    const pickView = (e) => {\n        const component = [...factory]\n            .reverse()\n            .find((component) => component.isCompatible(e)) as DisplayComponent\n        return component.view(e)\n    }\n    const views: AnyVirtualDOM[] = elements.map((element) => {\n        if (element instanceof Observable) {\n            return {\n                tag: 'div' as const,\n                children: [\n                    child$({\n                        source$: element,\n                        vdomMap: (value) => pickView(value),\n                    }),\n                ],\n            }\n        }\n        return pickView(element)\n    })\n    output$.next(\n        views.length === 1\n            ? views[0]\n            : {\n                  tag: 'div',\n                  class: 'd-flex align-items-center',\n                  children: views,\n              },\n    )\n}",
                "startLine": 38,
                "endLine": 73,
                "references": {
                    "display": "@nav/api/Notebook.display",
                    "Output": "@nav/api/Notebook.Output",
                    "DisplayFactory": "@nav/api/Notebook.DisplayFactory",
                    "Subject": "https://www.learnrxjs.io/learn-rxjs/subjects/subject"
                }
            },
            "semantic": {
                "role": "function",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "executeJs",
            "documentation": {
                "sections": [
                    {
                        "content": "Execute a given **non-reactive** javascript source content.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    },
                    {
                        "title": "Arguments",
                        "content": "\n*  **inputs**: See  <mkapi-api-link nav=\"@nav/api/Notebook.ExecJsInput\" semantic=\"type-alias\">ExecJsInput</mkapi-api-link> .\n*  **load**: The function used to load a submodule from another notebook page.\n*  **path**: Navigation path of the page.\n*  **ctx**: Execution context used for logging and tracing.\n*  **declarations**: Optional parsed declarations if available.\n*  **ctx**: Execution context used for logging and tracing.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "arguments",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    },
                    {
                        "title": "Returns",
                        "content": "Promise over the scope at exit",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "returns",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "executeJs",
            "navPath": "@nav/api/Notebook.executeJs",
            "code": {
                "filePath": "src/lib/notebook/js-execution.ts",
                "declaration": "export async function executeJs(\n    inputs: ExecJsInput & { declarations?: { const: string[]; let: string[] } },\n    ctx?: ContextTrait,\n): Promise<Scope>",
                "implementation": "export async function executeJs(\n    inputs: ExecJsInput & { declarations?: { const: string[]; let: string[] } },\n    ctx?: ContextTrait,\n): Promise<Scope> {\n    ctx = (ctx || new NoContext()).start('executeJs', ['Exec'])\n    const { src, scope, output$, error$, displayFactory, load, invalidated$ } =\n        inputs\n\n    let declarations = inputs.declarations\n    if (!declarations) {\n        const ast = parseProgram(src, inputs.cellId, error$)\n        declarations = extractGlobalDeclarations(ast)\n    }\n    const displayInOutput = (...element: HTMLElement[]) =>\n        display(output$, displayFactory, ...element)\n\n    const srcPatched = `\nasync function execute_cell(scope, {display, output$, error$, load, invalidated$, formatError, rawSrc}){\n\n    try{\n    \n        const {${extractKeys({ ...scope.const, ...scope.python })}} = {...scope.const, ...scope.python}\n        let {${extractKeys(scope.let)}} = scope.let\n${src}\n        \n        return { \n            const:{ ${extractKeys(scope.const)} ${extractKeys(declarations.const)} },\n            let:{ ${extractKeys(scope.let)} ${extractKeys(declarations.let)} },\n            python:{ ${extractKeys(scope.python)} },\n        }\n    }\n    catch(e) {\n        const error = formatError({cellId:'${inputs.cellId}',e, scopeIn: scope, src: rawSrc, deltaLineInStack:9})\n        error$.next(error)\n        throw e\n    }\n}\nreturn execute_cell\n`\n    let fctUser: Function\n    try {\n        fctUser = new Function(srcPatched)\n    } catch (e) {\n        const error = {\n            cellId: inputs.cellId,\n            kind: 'AST' as const,\n            message: e.message,\n            scopeIn: inputs.scope,\n            src: inputs.src.split('\\n'),\n        }\n        error$.next(error)\n        throw e\n    }\n\n    const scopeOut = await fctUser()(scope, {\n        display: displayInOutput,\n        load: (path: string) => load(path, ctx),\n        invalidated$,\n        output$,\n        error$,\n        formatError,\n        rawSrc: src,\n    })\n    ctx.info('JS cell execution done', { src, scopeIn: scope, scopeOut })\n    ctx.exit()\n    return scopeOut\n}",
                "startLine": 185,
                "endLine": 252,
                "references": {
                    "executeJs": "@nav/api/Notebook.executeJs",
                    "ExecInput": "@nav/api/Notebook.ExecInput",
                    "ContextTrait": "@nav/api/MainModule.ContextTrait",
                    "Promise": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
                    "Scope": "@nav/api/Notebook.Scope"
                }
            },
            "semantic": {
                "role": "function",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "executeJs$",
            "documentation": {
                "sections": [
                    {
                        "content": "Executes a **reactive JavaScript cell** within the notebook.\n\nIt automatically unwrap observables or promises referenced within the cell, and provides their current value in\nplace of the observable.\n\n**Behavior:**\n\n1. **Identify Reactive Inputs:**\n   - The function scans the cell for variables that reference a  <mkapi-ext-link href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\">typescript.Promise</mkapi-ext-link>  or\n      <mkapi-ext-link href=\"https://rxjs.dev/guide/observable\">rxjs.Observable</mkapi-ext-link>  within the **const variables** in the input scope.  `Promise`  are internally transformed\n     as  `Observable`  using  <mkapi-ext-link href=\"https://www.learnrxjs.io/learn-rxjs/operators/creation/from\">rxjs.from</mkapi-ext-link> .\n   - These **reactive inputs** determine when the cell should be executed.\n\n2. **Trigger Execution on Input Changes:**\n   - All reactive inputs are combined using  <mkapi-ext-link href=\"https://rxjs.dev/api/index/function/combineLatest\">rxjs.combineLatest</mkapi-ext-link> .\n   - Each time **any** input emits, the cell **re-executes** with the latest values.\n   - The resulting observable is called  `trigger` , and it emits an object where:\n     - **Keys** = The names of reactive inputs.\n     - **Values** = Their most recent values.\n\n3. **Define the Cell's Input Scope:**\n   - **Reactive inputs:** Values from  `trigger`  (updated on every execution).\n   - **Other  `const`  variables:** Non-reactive const variables available in the input scope.\n\n4. **Call the 'standard'  <mkapi-api-link nav=\"@nav/api/Notebook.executeJs\" semantic=\"function\">executeJs</mkapi-api-link>  function** using the prepared input scope.\n\n5. **Expose Outputs:**\n   - **All  `const`  variables** declared in the cell become  <mkapi-ext-link href=\"https://rxjs.dev/guide/observable\">rxjs.Observable</mkapi-ext-link>  in subsequent cells.\n   - They can then be used as **reactive inputs** for future reactive cells.\n\n<note level=\"warning\" title=\" `let`  variables\" >\n\nTo ensure **predictability and robustness**,  `let`  variables:\n- **Are NOT considered reactive inputs.**\n- **Are NOT included in the input or output scope.**\n\n**Reactive inputs**:\n\nIn the following **non-reactive cell**:\n\n<code-snippet language=\"javascript\">\nconst foo = rxjs.of(42)\nlet bar = rxjs.of(42)\n</code-snippet>\n\nOnly  `foo`  can be used as a **reactive input** in a later reactive cell.\n\n**Input Scope**:\n\nIn the following **non-reactive** cell:\n\n<code-snippet language=\"javascript\">\nconst foo = 42\nlet bar = 42\n</code-snippet>\n\nOnly  `foo`  is available in later reactive cells as a **static** input.\n\n**Output Scope**:\n\nIn the following **reactive** cell:\n\n<code-snippet language=\"javascript\">\n// this is a reactive cell that captured 'foo'\nconst fooSquare = foo * foo\nlet fooDoubled = 2 * foo\n</code-snippet>\n\n `fooSquare`  is available for future cells, while  `fooDoubled`  is **local only**.\n\n</note>\n\n**Future Extensions: Supporting Custom Combination Policies**\n\nCurrently,  `combineLatest`  is the default and only combiner available.\n\nFuture improvements could allow users to specify a **combination policy** such as:\n-  <mkapi-ext-link href=\"https://rxjs.dev/api/index/function/combineLatest\">rxjs.combineLatest</mkapi-ext-link>  (default) – Triggers when any input updates.\n-  <mkapi-ext-link href=\"https://rxjs.dev/api/index/function/withLatestFrom\">rxjs.withLatestFrom</mkapi-ext-link>  – Triggers only when a **specific input** updates.\n-  <mkapi-ext-link href=\"https://rxjs.dev/api/index/function/zip\">rxjs.zip</mkapi-ext-link>  – Triggers **only when all inputs** have emitted at least once.\n\n**For now**, if you need a **custom combination strategy**, manually define a new **intermediate variable**\nthat applies the desired combinator (e.g., *withLatestFrom*, *zip*). Then, reference this variable in the reactive\ncell instead of configuring the strategy directly. For instance, using  <mkapi-ext-link href=\"https://rxjs.dev/api/index/function/zip\">rxjs.zip</mkapi-ext-link>  to synchronize emissions:\n\n<code-snippet language=\"javascript\">\n// this is a non reactive cell combine  `foo$`  and  `bar$`  explicitly\nconst customTrigger$ = rxjs.zip([foo$, bar$])\n</code-snippet>\n\nAnd the reactive cell:\n\n<code-snippet language=\"javascript\">\n// this is a reactive cell using  `customTrigger$`  as reactive input\n// ->  `customTrigger$`  is automatically resolved to the latest emitted values\nconst [fooVal, barVal] = customTrigger$\n</code-snippet>\n\nThe reactive cell treats  `customTrigger$`  as a source of new values,\nensuring  `fooVal`  and  `barVal`  update automatically when  `customTrigger$`  emits ( *i.e.* when **both**\n `foo$`  and  `bar$`  emitted a new value).",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    },
                    {
                        "title": "Arguments",
                        "content": "\n*  **inputs**: See  <mkapi-api-link nav=\"@nav/api/Notebook.ExecJsInput\" semantic=\"type-alias\">ExecJsInput</mkapi-api-link> .\n*  **ctx**: Execution context used for logging and tracing.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "arguments",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    },
                    {
                        "title": "Returns",
                        "content": "Promise over the scope at exit",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "returns",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "executeJs$",
            "navPath": "@nav/api/Notebook.executeJs$",
            "code": {
                "filePath": "src/lib/notebook/js-execution.ts",
                "declaration": "export async function executeJs$(\n    inputs: ExecJsInput,\n    ctx?: ContextTrait,\n): Promise<Scope>",
                "implementation": "export async function executeJs$(\n    inputs: ExecJsInput,\n    ctx?: ContextTrait,\n): Promise<Scope> {\n    ctx = (ctx || new NoContext()).start('executeJs$', ['Exec'])\n\n    const { src, error$, scope, invalidated$, output$ } = inputs\n    const ast = parseProgram(src, inputs.cellId, error$)\n    const declarations = extractGlobalDeclarations(ast)\n    const undefs = extractUndefinedReferences(ast)\n\n    ctx.info('Found undefined references in script', undefs)\n    const select = (scopeConstLet: Record<string, unknown>) => {\n        return Object.entries(scopeConstLet)\n            .filter(\n                ([k, v]) =>\n                    undefs.includes(k) &&\n                    (v instanceof Observable || v instanceof Promise),\n            )\n            .map(([k, v]) => {\n                return [k, v instanceof Promise ? from(v) : v]\n            }) as unknown as [string, Observable<unknown> | Promise<unknown>][]\n    }\n    const reactivesConst = select(scope.const)\n    ctx.info('Undefined references bound to input scope observable retrieved', {\n        reactivesConst,\n    })\n    const values$ = reactivesConst.map(([_, v]) => v)\n\n    const extractValues = (values: unknown[]) => {\n        return values.reduce((acc: Record<string, unknown>, e, i) => {\n            const key = reactivesConst[i][0]\n            return {\n                ...acc,\n                [key]: e,\n            }\n        }, {}) as unknown as Record<string, unknown>\n    }\n    const scope$ = combineLatest(values$).pipe(\n        takeUntil(invalidated$),\n        map(async (values) => {\n            const reactScope = extractValues(values)\n            const patchedScope = {\n                ...scope,\n                let: {}, // No mutable variables injected in reactive cells\n                const: { ...scope.const, ...reactScope },\n            }\n            output$.next(undefined)\n            return await executeJs(\n                { ...inputs, scope: patchedScope, declarations },\n                ctx,\n            )\n        }),\n        switchMap((d) => from(d)),\n        shareReplay({ bufferSize: 1, refCount: true }),\n    )\n    scope$.subscribe()\n\n    const reactScopeConstOut = declarations.const.reduce((acc, k) => {\n        return {\n            ...acc,\n            [k]: scope$.pipe(map((scopeOut) => scopeOut.const[k])),\n        }\n    }, {})\n\n    ctx.info('Output scope observable created', {\n        reactScopeConstOut,\n    })\n    ctx.exit()\n    return {\n        ...scope,\n        const: { ...scope.const, ...reactScopeConstOut },\n    }\n}",
                "startLine": 360,
                "endLine": 434,
                "references": {
                    "executeJs$": "@nav/api/Notebook.executeJs$",
                    "ExecJsInput": "@nav/api/Notebook.ExecJsInput",
                    "ContextTrait": "@nav/api/MainModule.ContextTrait",
                    "Scope": "@nav/api/Notebook.Scope",
                    "Promise": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise"
                }
            },
            "semantic": {
                "role": "function",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "executeJsStatement",
            "documentation": {
                "sections": [
                    {
                        "content": "Execute a given javascript statement. This execution is reactive by default.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    },
                    {
                        "title": "Arguments",
                        "content": "\n*  **inputs**: See  <mkapi-api-link nav=\"@nav/api/Notebook.ExecJsInput\" semantic=\"type-alias\">ExecJsInput</mkapi-api-link> .",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "arguments",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    },
                    {
                        "title": "Returns",
                        "content": "Promise over the scope at exit",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "returns",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "executeJsStatement",
            "navPath": "@nav/api/Notebook.executeJsStatement",
            "code": {
                "filePath": "src/lib/notebook/js-execution.ts",
                "declaration": "export async function executeJsStatement(inputs: ExecJsInput)",
                "implementation": "export async function executeJsStatement(inputs: ExecJsInput) {\n    return await executeJs$({\n        ...inputs,\n        src: `display(${inputs.src})`,\n    })\n}",
                "startLine": 170,
                "endLine": 176,
                "references": {
                    "executeJsStatement": "@nav/api/Notebook.executeJsStatement",
                    "ExecJsInput": "@nav/api/Notebook.ExecJsInput",
                    "Scope": "@nav/api/Notebook.Scope",
                    "Promise": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise"
                }
            },
            "semantic": {
                "role": "function",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "executePy",
            "documentation": {
                "sections": [
                    {
                        "content": "Executes a given Python code snippet using Pyodide within a controlled execution scope.\n\n<note level=\"warning\">\nThe Pyodide runtime must be provided via  `scope.const.pyodide` .\n</note>\n\n## Scope Management\n\n- **Variable Persistence**:\n  - Only **top-level variables** defined in the cell persist to subsequent Python cells.\n  - **Primitive types** (e.g.,  `int` ,  `float` ,  `str` ,  `bool` ) are re-initialized with each execution.\n  - **Non-primitive objects** (e.g., lists, dictionaries, custom classes) are stored in  `globals()` , meaning their\n  state can be **modified** by later cells.\n\n- **JavaScript Integration**:\n  - JavaScript variables declared as  `const`  or  `let`  in prior JS cells **can be accessed and mutated**.\n  - However, **they cannot be reassigned** within Python execution.\n  - See  <mkapi-api-link nav=\"@nav/api/Notebook.registerMknbCellModule\" semantic=\"function\">registerMknbCellModule</mkapi-api-link>  for details on JavaScript-Python variable sharing (some variables may\n  be renamed to comply with Python synthax).\n\n- **Predefined Symbols**:\n  - The following symbols are scoped to the cell and automatically injected into the Python execution environment:\n    -  `display` : A function to render output in the notebook interface.\n    -  `invalidated_` : An observable that emits when the cell is invalidated.\n\n## Execution Lifecycle\n\n- Upon execution, Python code runs within a **unified runtime**, where JavaScript and Python share state.\n- When a cell is **invalidated** (e.g., re-executed or modified), all proxies of **Python objects exposed to\n  JavaScript** are automatically **destroyed** to prevent memory leaks.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    },
                    {
                        "title": "Arguments",
                        "content": "\n*  **inputs**: See  <mkapi-api-link nav=\"@nav/api/Notebook.ExecPyInput\" semantic=\"type-alias\">ExecPyInput</mkapi-api-link>\n*  **ctx**: Execution context used for logging and tracing.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "arguments",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    },
                    {
                        "title": "Returns",
                        "content": "Promise over the scope at exit",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "returns",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "executePy",
            "navPath": "@nav/api/Notebook.executePy",
            "code": {
                "filePath": "src/lib/notebook/py-execution.ts",
                "declaration": "export async function executePy(inputs: ExecPyInput, ctx?: ContextTrait)",
                "implementation": "export async function executePy(inputs: ExecPyInput, ctx?: ContextTrait) {\n    ctx = (ctx ?? new NoContext()).start('executePy', ['Exec'])\n\n    const {\n        cellId,\n        src,\n        scope,\n        output$,\n        error$,\n        displayFactory,\n        invalidated$,\n        pyNamespace,\n    } = inputs\n\n    const pyodide = scope.const.pyodide as Pyodide\n    const sanitizedScope = fixScopeInvalidVar(scope, pyodide)\n    ctx.info('Sanitized scope computed', { sanitizedScope })\n    registerMknbModule(pyodide)\n\n    const displayInOutput = (...element: HTMLElement[]) => {\n        display(output$, displayFactory, ...element)\n    }\n    const pyCellModule = registerMknbCellModule({\n        cellId,\n        pyodide,\n        displayInOutput,\n        invalidated$,\n        error$,\n        scope: sanitizedScope,\n        src,\n    })\n\n    const constKeys = Object.keys(sanitizedScope.const)\n    const letKeys = Object.keys(sanitizedScope.let)\n    Object.entries(scope.python).forEach(([k, v]) => {\n        if (['string', 'number', 'boolean'].includes(typeof v)) {\n            pyNamespace.set(k, v)\n        }\n    })\n    const localsAssignments = Object.keys(scope.python).reduce(\n        (acc, e) => `${acc}\\n${e}=globals()['${e}']`,\n        '',\n    )\n    const importsLet =\n        letKeys.length > 0\n            ? `from ${pyCellModule} import ${String(letKeys)}`\n            : ''\n    const importsConst =\n        constKeys.length > 0\n            ? `from ${pyCellModule} import ${String(constKeys)}`\n            : ''\n\n    const pyVarsCount = Object.keys(scope.python).length\n\n    const srcPatched = `\nreturn async (scope, { pyNamespace }) => {\n    \n    const pyScope = await scope.const.pyodide.runPythonAsync(\\`\n        from mknb import pyFctWrapperJs, HandledException\n        import traceback\n        \n        try:\n            def run():\n                ${indent(localsAssignments, '                ')}\n                from ${pyCellModule} import invalidated_, display\n                ${importsLet}\n                ${importsConst}\n                \n                initial_vars = { k: v for k, v in locals().items() }\n                \n                ${indent(src, '                ')}\n            \n                final_vars = { k: v for k, v in locals().items() }\n                final_keys = final_vars.keys()\n                new_vars = [k for k in final_keys if k not in initial_vars or initial_vars[k] is not final_vars[k] ]   \n                new_scope = { k: final_vars[k] for k in new_vars}\n                return new_scope, new_vars\n            \n            new_scope, new_vars = run()\n            for k, v in new_scope.items():\n                globals()[k] = v\n                \n        except Exception as e:\n            from ${pyCellModule} import emit_error\n            tb = traceback.extract_tb(e.__traceback__)\n            for entry in reversed(tb):\n                if entry.filename == \"<exec>\":\n                    error_line = entry.lineno\n                    break\n            else:\n                error_line = None\n                \n            tb_list = traceback.format_exception(type(e), e, e.__traceback__)\n            emit_error({ \n                \"kind\": \"Runtime\", \n                \"message\": str(e), \n                \"stackTrace\": tb_list, \n                \"lineNumber\": error_line - 13 - ${String(pyVarsCount)}\n            })\n            raise HandledException(\"Handled error: \" + str(e), original_exception=e)\n            \n        new_scope, new_vars\n    \\`, { globals: pyNamespace } )\n    \n    return pyScope.toJs({dict_converter:  Object.fromEntries})\n}`\n    try {\n        ctx.info('Wrapped src defined', { wrappedSrc: srcPatched })\n\n        // eslint-disable-next-line @typescript-eslint/no-implied-eval,@typescript-eslint/no-unsafe-call\n        const [pyScopeOut, newGlobals] = (await new Function(srcPatched)()(\n            scope,\n            { pyNamespace },\n        )) as [Record<string, unknown>, string[]]\n        const scopeOut = {\n            let: scope.let,\n            const: scope.const,\n            python: { ...scope.python, ...pyScopeOut },\n        }\n        ctx.info('Py cell execution done', {\n            src,\n            scopeIn: scope,\n            scopeOut,\n            newGlobals,\n        })\n        invalidated$.pipe(take(1)).subscribe(() => {\n            ctx.info('Destroy py proxies', { scopeOut, newGlobals })\n            Object.entries(scopeOut.python)\n                .filter(([k]) => {\n                    return newGlobals.includes(k)\n                })\n                .filter(([, v]) => isDestroyable(v))\n                .forEach(([k, v]: [k: string, v: { destroy: () => void }]) => {\n                    ctx.info(`Destroy py proxy ${k}`)\n                    v.destroy()\n                })\n        })\n        ctx.exit()\n        return scopeOut\n    } catch (e) {\n        if (isInstanceofPyException(e)) {\n            const error: ExecCellError = {\n                cellId,\n                kind: 'AST',\n                src: src.split('\\n'),\n                message: e.message.split('\\n').slice(-2)[0],\n                stackTrace: e.stack.split('\\n'),\n                scopeIn: scope,\n            }\n            error$.next(error)\n        }\n        ctx.error('Failed to execute cell', e)\n        ctx.exit()\n        throw e\n    }\n}",
                "startLine": 209,
                "endLine": 365,
                "references": {
                    "executePy": "@nav/api/Notebook.executePy",
                    "ExecPyInput": "@nav/api/Notebook.ExecPyInput",
                    "ContextTrait": "@nav/api/MainModule.ContextTrait",
                    "Promise": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
                    "Record": "https://www.typescriptlang.org/docs/handbook/utility-types.html#recordkeys-type"
                }
            },
            "semantic": {
                "role": "function",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "executeWorkersPool",
            "documentation": {
                "sections": [
                    {
                        "content": "Execute a given JavaScript or Python snippet within a workers pool.\n\nThis implementation is for non-reactive cells, see  <mkapi-api-link nav=\"@nav/api/Notebook.executeWorkersPool$\" semantic=\"function\">executeWorkersPool$</mkapi-api-link>  for reactive cells.\n\n**Functionality**",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    },
                    {
                        "title": "Arguments",
                        "content": "\n*  **inputs**: See  <mkapi-api-link nav=\"@nav/api/Notebook.ExecWorkerPoolInput\" semantic=\"type-alias\">ExecWorkerPoolInput</mkapi-api-link> .\n*  **ctx**: Execution context used for logging and tracing.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "arguments",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    },
                    {
                        "title": "Returns",
                        "content": "Promise over the scope at exit.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "returns",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "executeWorkersPool",
            "navPath": "@nav/api/Notebook.executeWorkersPool",
            "code": {
                "filePath": "src/lib/notebook/worker-execution.ts",
                "declaration": "export async function executeWorkersPool(\n    inputs: ExecWorkerPoolInput,\n    ctx?: ContextTrait,\n): Promise<Scope>",
                "implementation": "export async function executeWorkersPool(\n    inputs: ExecWorkerPoolInput,\n    ctx?: ContextTrait,\n): Promise<Scope> {\n    ctx = (ctx ?? new NoContext()).start('executeWorkersPool', ['Exec'])\n    const {\n        src,\n        cellId,\n        error$,\n        invalidated$,\n        mode,\n        workersPool,\n        scope,\n        capturedIn,\n        capturedOut,\n    } = inputs\n    const srcPatched =\n        mode === 'javascript'\n            ? patchSrc({\n                  src,\n                  capturedOut,\n                  capturedIn: Object.keys(capturedIn),\n              })\n            : patchPySrc({ src, capturedOut })\n\n    ctx.info('Inputs prepared', { srcPatched, capturedIn, capturedOut })\n    // eslint-disable-next-line @typescript-eslint/no-implied-eval,@typescript-eslint/no-unsafe-call\n    const task = new Function(srcPatched)() as (\n        input: WorkersPoolTypes.EntryPointArguments<Record<string, unknown>>,\n    ) => void\n\n    const r$ = workersPool\n        .schedule({\n            title: 'Test',\n            entryPoint: task,\n            args: capturedIn,\n        })\n        .pipe(takeUntil(invalidated$))\n\n    r$.pipe(\n        filter((message: WorkersPoolTypes.Message) => message.type === 'Log'),\n    ).subscribe((message) => {\n        ctx.info(message.data.text, message.data.json)\n    })\n    const lastMessage = await lastValueFrom(r$)\n    if (lastMessage.type === 'Exit' && lastMessage.data.error) {\n        error$.next({\n            cellId,\n            kind: 'Runtime',\n            message: lastMessage.data.result.message,\n            stackTrace: lastMessage.data.result.stack?.split('\\n'),\n            src: src.split('\\n'),\n            scopeIn: scope,\n        })\n        throw Error(lastMessage.data.result.message)\n    }\n    ctx.info('Task exited successfully')\n    const data = lastMessage.data as WorkersPoolTypes.MessageExit\n    const results = typeof data.result === 'object' ? data.result : {}\n    ctx.exit()\n    return {\n        let: scope.let,\n        const: { ...scope.const, ...results },\n        python: scope.python,\n    }\n}",
                "startLine": 52,
                "endLine": 118,
                "references": {
                    "executeWorkersPool": "@nav/api/Notebook.executeWorkersPool",
                    "ExecWorkerPoolInput": "@nav/api/Notebook.ExecWorkerPoolInput",
                    "ContextTrait": "@nav/api/MainModule.ContextTrait",
                    "Scope": "@nav/api/Notebook.Scope",
                    "Promise": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise"
                }
            },
            "semantic": {
                "role": "function",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "executeWorkersPool$",
            "documentation": {
                "sections": [
                    {
                        "content": "Executes a reactive JavaScript or Python cell within a worker pool.\n\nThis function is a wrapper around  <mkapi-api-link nav=\"@nav/api/Notebook.executeWorkersPool\" semantic=\"function\">executeWorkersPool</mkapi-api-link> , enabling the execution of computations\nin worker threads with automatic handling of reactive inputs and outputs.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    },
                    {
                        "title": "Arguments",
                        "content": "\n*  **inputs**: See  <mkapi-api-link nav=\"@nav/api/Notebook.ExecWorkerPoolInput\" semantic=\"type-alias\">ExecWorkerPoolInput</mkapi-api-link> .\n*  **ctx**: Execution context used for logging and tracing.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "arguments",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    },
                    {
                        "title": "Returns",
                        "content": "A  `Promise`  resolving to an updated execution scope, with  `capturedOut`  variables exposed as  `const` \nproperties.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "returns",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "executeWorkersPool$",
            "navPath": "@nav/api/Notebook.executeWorkersPool$",
            "code": {
                "filePath": "src/lib/notebook/worker-execution.ts",
                "declaration": "export function executeWorkersPool$(\n    inputs: ExecWorkerPoolInput,\n    ctx?: ContextTrait,\n): Promise<Scope>",
                "implementation": "export function executeWorkersPool$(\n    inputs: ExecWorkerPoolInput,\n    ctx?: ContextTrait,\n): Promise<Scope> {\n    ctx = (ctx ?? new NoContext()).start('executeWorkersPool$', ['Exec'])\n    const { scope, capturedIn, capturedOut, invalidated$ } = inputs\n    const reactives: [string, Observable<unknown>][] = Object.entries(\n        capturedIn,\n    )\n        .filter(([, v]) => v instanceof Observable || v instanceof Promise)\n        .map(([k, v]: [string, Promise<unknown> | Observable<unknown>]) => [\n            k,\n            v instanceof Promise ? from(v) : v,\n        ])\n\n    const capturedOut$: Record<string, ReplaySubject<unknown>> = capturedOut\n        .map((k) => {\n            return [k, new ReplaySubject()]\n        })\n        .reduce(\n            (acc, [k, v]: [string, ReplaySubject<unknown>]) => ({\n                ...acc,\n                [k]: v,\n            }),\n            {},\n        )\n    const inputs$: Observable<unknown>[] = reactives.map(\n        ([, v]) => v,\n    ) as unknown as Observable<unknown>[]\n\n    combineLatest(inputs$)\n        .pipe(\n            takeUntil(invalidated$),\n            map((vs: unknown[]) => {\n                return vs.reduce(\n                    (acc: object, e, currentIndex) => ({\n                        ...acc,\n                        [reactives[currentIndex][0]]: e,\n                    }),\n                    capturedIn,\n                ) as Record<string, unknown>\n            }),\n            switchMap((capturedIn) => {\n                return from(executeWorkersPool({ ...inputs, capturedIn }, ctx))\n            }),\n            shareReplay({ bufferSize: 1, refCount: true }),\n        )\n        .subscribe((scopeOut) => {\n            inputs.capturedOut.forEach((k) => {\n                capturedOut$[k].next(scopeOut.const[k])\n            })\n            ctx.exit()\n        })\n    return Promise.resolve({\n        ...scope,\n        const: {\n            ...scope.const,\n            ...capturedOut$,\n        },\n    })\n}",
                "startLine": 130,
                "endLine": 191,
                "references": {
                    "executeWorkersPool$": "@nav/api/Notebook.executeWorkersPool$",
                    "ExecWorkerPoolInput": "@nav/api/Notebook.ExecWorkerPoolInput",
                    "ContextTrait": "@nav/api/MainModule.ContextTrait",
                    "Scope": "@nav/api/Notebook.Scope",
                    "Promise": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise"
                }
            },
            "semantic": {
                "role": "function",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "fixScopeInvalidVar",
            "documentation": {
                "sections": [
                    {
                        "content": "Sanitizes JavaScript variable names to ensure compatibility with the Python environment:\n\n- **Unauthorized characters** (e.g.,  `$`  in JavaScript) are replaced with an **underscore ( `_` )**.\n- **Python keywords** (e.g.,  `class` ,  `def` ,  `import` ) are **suffixed with an underscore ( `_` )** to avoid conflicts.\n\nThis ensures seamless interoperability between JavaScript and Python when executing code in Pyodide.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    },
                    {
                        "title": "Arguments",
                        "content": "\n*  **scope**: The input scope containing  `const`  and  `let`  variable mappings.\n*  **pyodide**: The Pyodide runtime instance, used to retrieve Python's reserved keywords.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "arguments",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    },
                    {
                        "title": "Returns",
                        "content": "A new scope object with sanitized JavaScript variable names.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "returns",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "fixScopeInvalidVar",
            "navPath": "@nav/api/Notebook.fixScopeInvalidVar",
            "code": {
                "filePath": "src/lib/notebook/py-execution.ts",
                "declaration": "export function fixScopeInvalidVar(scope: Scope, pyodide: Pyodide)",
                "implementation": "export function fixScopeInvalidVar(scope: Scope, pyodide: Pyodide) {\n    const kwlist = pyodide.runPython(\n        'import keyword\\nkeyword.kwlist',\n    ) as string[]\n\n    const fix = (input: string) => {\n        return kwlist.includes(input) ? `${input}_` : input.replace(/\\$/g, '_')\n    }\n    const scopeConst = Object.entries(scope.const).reduce((acc, [k, v]) => {\n        return { ...acc, [fix(k)]: v }\n    }, {})\n    const scopeLet = Object.entries(scope.let).reduce((acc, [k, v]) => {\n        return { ...acc, [fix(k)]: v }\n    }, {})\n    return { ...scope, const: scopeConst, let: scopeLet }\n}",
                "startLine": 94,
                "endLine": 110,
                "references": {
                    "fixScopeInvalidVar": "@nav/api/Notebook.fixScopeInvalidVar",
                    "Scope": "@nav/api/Notebook.Scope",
                    "Pyodide": "@nav/api/Notebook.Pyodide",
                    "Record": "https://www.typescriptlang.org/docs/handbook/utility-types.html#recordkeys-type"
                }
            },
            "semantic": {
                "role": "function",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "htmlView",
            "documentation": {
                "sections": [
                    {
                        "content": "Renderer for  `HTMLElement | AnyVirtualDOM | RxChild`  referenced in  <mkapi-api-link nav=\"@nav/api/Notebook.defaultDisplayFactory\" semantic=\"function\">defaultDisplayFactory</mkapi-api-link> .",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    },
                    {
                        "title": "Arguments",
                        "content": "\n*  **element**: Displayed element.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "arguments",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    },
                    {
                        "title": "Returns",
                        "content": "The resulting  `VirtualDOM` .",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "returns",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "htmlView",
            "navPath": "@nav/api/Notebook.htmlView",
            "code": {
                "filePath": "src/lib/notebook/display-utils.ts",
                "declaration": "export function htmlView(\n    element: HTMLElement | AnyVirtualDOM | RxChild,\n): AnyVirtualDOM",
                "implementation": "export function htmlView(\n    element: HTMLElement | AnyVirtualDOM | RxChild,\n): AnyVirtualDOM {\n    if (element instanceof HTMLElement) {\n        return {\n            tag: 'div',\n            children: [element],\n        }\n    }\n    function isRxChild(e: unknown): e is RxChild {\n        if (typeof e !== 'object' || e === null) {\n            return false\n        }\n        return 'source$' in e && 'vdomMap' in e\n    }\n    if (isRxChild(element)) {\n        return { tag: 'div', children: [element] }\n    }\n    return element\n}",
                "startLine": 133,
                "endLine": 153,
                "references": {
                    "htmlView": "@nav/api/Notebook.htmlView",
                    "HTMLElement": "https://www.typescriptlang.org/docs/handbook/dom-manipulation.html",
                    "AnyVirtualDOM": "/apps/@rx-vdom/doc/latest?nav=/api.AnyVirtualDOM",
                    "RxChild": "/apps/@rx-vdom/doc/latest?nav=/api.RxChild"
                }
            },
            "semantic": {
                "role": "function",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "parseStyle",
            "documentation": {
                "sections": [
                    {
                        "content": "Convert an inlined style defined in a DOM element, to a CSS dictionary  `styleAttribute -> value` .",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    },
                    {
                        "title": "Arguments",
                        "content": "\n*  **styleString**: The string (e.g.  `\"width:100%; height:100%\"` ).",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "arguments",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    },
                    {
                        "title": "Returns",
                        "content": "The CSS dictionary.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "returns",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "parseStyle",
            "navPath": "@nav/api/Notebook.parseStyle",
            "code": {
                "filePath": "src/lib/notebook/display-utils.ts",
                "declaration": "export function parseStyle(styleString: string): CSSAttribute",
                "implementation": "export function parseStyle(styleString: string): CSSAttribute {\n    if (!styleString) {\n        return {}\n    }\n    const stylePairs = styleString.split(';')\n    const styleObject = {}\n\n    stylePairs.forEach((pair) => {\n        const [property, value] = pair.split(':').map((s) => s.trim())\n        if (property && value) {\n            styleObject[property] = value\n        }\n    })\n\n    return styleObject\n}",
                "startLine": 191,
                "endLine": 207,
                "references": {
                    "parseStyle": "@nav/api/Notebook.parseStyle",
                    "CSSAttribute": "/apps/@rx-vdom/doc/latest?nav=/api.CSSAttribute"
                }
            },
            "semantic": {
                "role": "function",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "rawView",
            "documentation": {
                "sections": [
                    {
                        "content": "Fallback renderer referenced in  <mkapi-api-link nav=\"@nav/api/Notebook.defaultDisplayFactory\" semantic=\"function\">defaultDisplayFactory</mkapi-api-link> .\n\n*  For primitive types, an  `HTMLElement`  is generated with  `innerText`  property set to the value.\n\n*  Otherwise an object explorer is displayed.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    },
                    {
                        "title": "Arguments",
                        "content": "\n*  **element**: Displayed element.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "arguments",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    },
                    {
                        "title": "Returns",
                        "content": "The resulting  `VirtualDOM` .",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "returns",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "rawView",
            "navPath": "@nav/api/Notebook.rawView",
            "code": {
                "filePath": "src/lib/notebook/display-utils.ts",
                "declaration": "export function rawView(element: unknown): AnyVirtualDOM",
                "implementation": "export function rawView(element: unknown): AnyVirtualDOM {\n    type PrimitiveType = 'string' | 'number' | 'boolean'\n    if (['string', 'number', 'boolean'].includes(typeof element)) {\n        return {\n            tag: 'div',\n            innerText: element as PrimitiveType,\n        }\n    }\n    const state = new ObjectJs.State({ title: '', data: element })\n    return {\n        tag: 'div' as const,\n        class: 'cm-s-default',\n        children: [new ObjectJs.View({ state })],\n    }\n}",
                "startLine": 111,
                "endLine": 126,
                "references": {
                    "rawView": "@nav/api/Notebook.rawView",
                    "AnyVirtualDOM": "/apps/@rx-vdom/doc/latest?nav=/api.AnyVirtualDOM"
                }
            },
            "semantic": {
                "role": "function",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "registerMknbCellModule",
            "documentation": {
                "sections": [
                    {
                        "content": "Registers a **cell-specific Python module** under the name  `mknb_cell_${cellId}`  within Pyodide.\n\nIt exposes:\n-  `display` : A function to send output elements to the JavaScript execution environment (see  <mkapi-api-link nav=\"@nav/api/Notebook.display\" semantic=\"function\">display</mkapi-api-link> ).\n-  `invalidated_` : An observable that emits when the cell is invalidated. This can be used in Python to clean up resources.\n- JavaScript Scope Variables:\n  - All  `let`  and  `const`  variables from JavaScript are exposed as Python symbols.\n  - Variable names may be adjusted to ensure they are valid Python identifiers (see  <mkapi-api-link nav=\"@nav/api/Notebook.fixScopeInvalidVar\" semantic=\"function\">fixScopeInvalidVar</mkapi-api-link> ).",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    },
                    {
                        "title": "Arguments",
                        "content": "\n*  **cellId**: The unique identifier for the executing cell.\n*  **displayInOutput**: Function to render output elements in JavaScript.\n*  **error$**: A subject to handle execution errors and propagate them to JavaScript.\n*  **invalidated$**: An observable that emits when the cell is invalidated.\n*  **pyodide**: The Pyodide instance used to execute Python code.\n*  **scope**: The execution scope, containing JavaScript variables ( `const` ,  `let` ).\n*  **src**: The source code of the Python cell being executed.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "arguments",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "registerMknbCellModule",
            "navPath": "@nav/api/Notebook.registerMknbCellModule",
            "code": {
                "filePath": "src/lib/notebook/py-execution.ts",
                "declaration": "export function registerMknbCellModule({\n    cellId,\n    pyodide,\n    displayInOutput,\n    invalidated$,\n    error$,\n    scope,\n    src,\n}: {\n    cellId: string\n    pyodide: Pyodide\n    displayInOutput: (...element: HTMLElement[]) => void\n    invalidated$: Observable<unknown>\n    error$: Subject<ExecCellError | undefined>\n    scope: Scope\n    src: string\n})",
                "implementation": "export function registerMknbCellModule({\n    cellId,\n    pyodide,\n    displayInOutput,\n    invalidated$,\n    error$,\n    scope,\n    src,\n}: {\n    cellId: string\n    pyodide: Pyodide\n    displayInOutput: (...element: HTMLElement[]) => void\n    invalidated$: Observable<unknown>\n    error$: Subject<ExecCellError | undefined>\n    scope: Scope\n    src: string\n}) {\n    pyodide.runPython(`\nimport sys\nif 'mknb_cell_${cellId}' in sys.modules:\n    del sys.modules['mknb_cell_${cellId}']    \n    `)\n    pyodide.registerJsModule(`mknb_cell_${cellId}`, {\n        display: (...element: HTMLElement[]) => {\n            displayInOutput(...element)\n        },\n        emit_error: (e: PyodideProxy<Omit<ExecCellError, 'src'>>) => {\n            const converted = e.toJs({ dict_converter: Object.fromEntries })\n            error$.next({ ...converted, src: src.split('\\n'), scopeIn: scope })\n        },\n        invalidated_: invalidated$,\n        ...scope.let,\n        ...scope.const,\n    })\n    return `mknb_cell_${cellId}`\n}",
                "startLine": 130,
                "endLine": 166,
                "references": {
                    "registerMknbCellModule": "@nav/api/Notebook.registerMknbCellModule",
                    "ExecCellError": "@nav/api/Notebook.ExecCellError",
                    "Pyodide": "@nav/api/Notebook.Pyodide",
                    "Scope": "@nav/api/Notebook.Scope",
                    "HTMLElement": "https://www.typescriptlang.org/docs/handbook/dom-manipulation.html",
                    "Subject": "https://www.learnrxjs.io/learn-rxjs/subjects/subject",
                    "Observable": "https://rxjs.dev/guide/observable"
                }
            },
            "semantic": {
                "role": "function",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        }
    ],
    "files": [
        {
            "name": "index.ts",
            "path": "src/lib/notebook/views/index.ts",
            "documentation": {
                "sections": [
                    {
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "content": "This module provides a collection of lightweight UI components designed for use within a notebook page.\nAdditionally, it re-exports the  component for easy integration.\n\nFor layout-specific elements, refer to the  submodule.\n\n## Quick Overview\n\n### \n\nThe `CodeSnippet` component offers a simple **code editor** with syntax highlighting.\n\n<js-cell>\nlet codeEditor = new Views.CodeSnippet({\n    language: 'javascript',\n    content: 'const foo = 42',\n    cmConfig: { readOnly: false }\n})\ndisplay(codeEditor)\ndisplay(codeEditor.content$)\n</js-cell>\n\n### \n\nThe `DropDown` component provides a **selectable list** with customizable display names.\n\n<js-cell>\nlet dropdown = new Views.DropDown({\n    items: {foo:42, bar:84},\n    selected: 'foo',\n    displayedNames: { 'foo': 'Foo', 'bar': 'Bar'}\n})\ndisplay(dropdown)\ndisplay(dropdown.value$)\n</js-cell>\n\n### \n\nThe `Range` component creates an **interactive slider** for numeric input.\n\n<js-cell>\nlet range = new Views.Range()\ndisplay(range)\ndisplay(range.value$)\n</js-cell>\n\n### \n\nThe `Text` component supports **Markdown formatting** and **LaTeX expressions** for mathematical notation.\n\n<js-cell>\ndisplay(new Views.Text('**a simple example**'))\ndisplay(new Views.Text(String.raw`**including latex inlined**: \\(ax^2 + bx + c = 0\\)`))\ndisplay(new Views.Text(String.raw`**including latex block**: $$x = {-b \\pm \\sqrt{b^2-4ac} \\over 2a}$$`))\n</js-cell>\n\n### | Notification\n\nThe `notify` function enables notification:\n\n<js-cell>\nconst notification = {\n    tag: 'div',\n    class: 'p-3',\n    innerText: 'A notification...'\n}\ndisplay({\n    tag: 'button',\n    class: 'btn btn-sm btn-primary',\n    innerText: 'Notify',\n    onclick: ()=> {\n        Views.notify({content:notification, level:'info', duration:3000})\n    }\n})\n</js-cell>",
                        "contentType": "markdown"
                    }
                ]
            }
        },
        {
            "name": "cell-views.ts",
            "path": "src/lib/notebook/cell-views.ts",
            "documentation": {
                "sections": [
                    {
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "content": "This file gathers various views used when rendering the .",
                        "contentType": "markdown"
                    }
                ]
            }
        },
        {
            "name": "index.ts",
            "path": "src/lib/notebook/index.ts",
            "documentation": {
                "sections": [
                    {
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "content": "This module offers functionalities akin to a notebook page.\n\nThe primary entry point is , which serves as a wrapper for parsing markdown content.\n\nThe markdown source can contain a series of executable cells, including:\n\n*  : Run JavaScript snippets.\n\n*  : Run Markdown snippets, eventually including references to JavScript variables.\n\n*  : Run python snippets in the browser using\n   <a target=\"_blank\" href=\"https://pyodide.org/en/stable/\">pyodide</a>.\n\n*  : Run code snippets using a given backend interpreter for a given language.\n\n*  : Run code snippets in\n   <a target=\"_blank\" href=\"https://developer.mozilla.org/fr/docs/Web/API/Web_Workers_API\">Web Workers</a>.\n\nCells are identified within the Markdown source using specific DOM elements, respectively `js-cell`, `md-cell`,\n`py-cell`, `interpreter-cell` and `worker-cell` for the above list.\n\nCells feature attributes provided with the DOM element,\nrefer to the associated , , ,\n and .\n\n\n<note level=\"hint\">\nIt is possible to register custom cells using .\n</note>\n\nThe entry point of the module is the ; most of the implementation logic regarding synchronization\nis included in the  class.\n\n**Example**\n\n<js-cell cell-id=\"example\">\nconst version = \"{{mkdocs-version}}\"\n\nconst { MkDocs } = await webpm.install({\n    esm:[ `mkdocs-ts#${version} as MkDocs`],\n    css: [\n        'bootstrap#5.3.3~bootstrap.min.css',\n        `mkdocs-ts#${version}~assets/mkdocs-light.css`,\n        'fontawesome#5.12.1~css/all.min.css',\n    ]\n})\nconst NotebookModule = await MkDocs.installNotebookModule()\nconst src =  `\n### Hello world\n\n<js-cell>\ndisplay('Hello World')\n</js-cell>\n`\nconst navigation = {\n    name: 'Notebook',\n    layout: ({router}) => new NotebookModule.NotebookPage({\n        src,\n        router,\n    }),\n}\nconst router = new MkDocs.Router({\n    navigation,\n    browserClient: (p) => new MkDocs.MockBrowser(p)\n})\n\nconst app = new MkDocs.DefaultLayout.Layout({\n    router,\n    name: 'Demo App',\n})\n\ndisplay(app)\n</js-cell>\n\n<cell-output cell-id=\"example\" full-screen=\"true\" style=\"aspect-ratio: 1 / 1; min-height: 0px;\">\n</cell-output>",
                        "contentType": "markdown"
                    }
                ]
            }
        },
        {
            "name": "deported-outputs-view.ts",
            "path": "src/lib/notebook/deported-outputs-view.ts",
            "documentation": {
                "sections": [
                    {
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "content": "",
                        "contentType": "markdown"
                    }
                ]
            }
        },
        {
            "name": "interpreter-cell-view.ts",
            "path": "src/lib/notebook/interpreter-cell-view.ts",
            "documentation": {
                "sections": [
                    {
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "content": "",
                        "contentType": "markdown"
                    }
                ]
            }
        },
        {
            "name": "md-cell-view.ts",
            "path": "src/lib/notebook/md-cell-view.ts",
            "documentation": {
                "sections": [
                    {
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "content": "",
                        "contentType": "markdown"
                    }
                ]
            }
        },
        {
            "name": "js-cell-view.ts",
            "path": "src/lib/notebook/js-cell-view.ts",
            "documentation": {
                "sections": [
                    {
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "content": "",
                        "contentType": "markdown"
                    }
                ]
            }
        },
        {
            "name": "notebook-page.ts",
            "path": "src/lib/notebook/notebook-page.ts",
            "documentation": {
                "sections": [
                    {
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "content": "",
                        "contentType": "markdown"
                    }
                ]
            }
        },
        {
            "name": "py-cell-view.ts",
            "path": "src/lib/notebook/py-cell-view.ts",
            "documentation": {
                "sections": [
                    {
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "content": "",
                        "contentType": "markdown"
                    }
                ]
            }
        },
        {
            "name": "state.ts",
            "path": "src/lib/notebook/state.ts",
            "documentation": {
                "sections": [
                    {
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "content": "",
                        "contentType": "markdown"
                    }
                ]
            }
        },
        {
            "name": "worker-cell-view.ts",
            "path": "src/lib/notebook/worker-cell-view.ts",
            "documentation": {
                "sections": [
                    {
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "content": "",
                        "contentType": "markdown"
                    }
                ]
            }
        },
        {
            "name": "js-execution.ts",
            "path": "src/lib/notebook/js-execution.ts",
            "documentation": {
                "sections": [
                    {
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "content": "",
                        "contentType": "markdown"
                    }
                ]
            }
        },
        {
            "name": "interpreter-execution.ts",
            "path": "src/lib/notebook/interpreter-execution.ts",
            "documentation": {
                "sections": [
                    {
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "content": "",
                        "contentType": "markdown"
                    }
                ]
            }
        },
        {
            "name": "display-utils.ts",
            "path": "src/lib/notebook/display-utils.ts",
            "documentation": {
                "sections": [
                    {
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "content": "",
                        "contentType": "markdown"
                    }
                ]
            }
        },
        {
            "name": "execution-common.ts",
            "path": "src/lib/notebook/execution-common.ts",
            "documentation": {
                "sections": [
                    {
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "content": "",
                        "contentType": "markdown"
                    }
                ]
            }
        },
        {
            "name": "py-execution.ts",
            "path": "src/lib/notebook/py-execution.ts",
            "documentation": {
                "sections": [
                    {
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "content": "",
                        "contentType": "markdown"
                    }
                ]
            }
        },
        {
            "name": "worker-execution.ts",
            "path": "src/lib/notebook/worker-execution.ts",
            "documentation": {
                "sections": [
                    {
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "content": "",
                        "contentType": "markdown"
                    }
                ]
            }
        }
    ],
    "children": [
        {
            "name": "Views",
            "semantic": {
                "role": "module",
                "labels": [],
                "attributes": {},
                "relations": {}
            },
            "path": "mkdocs-ts/Notebook.Views",
            "navPath": "@nav/api/Notebook/Views",
            "isLeaf": false
        }
    ],
    "semantic": {
        "role": "module",
        "labels": [],
        "attributes": {},
        "relations": {}
    }
}
