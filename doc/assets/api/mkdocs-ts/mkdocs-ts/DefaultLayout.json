{
    "name": "DefaultLayout",
    "documentation": {
        "sections": []
    },
    "path": "mkdocs-ts/DefaultLayout",
    "navPath": "@nav[mkdocs-ts]",
    "attributes": [
        {
            "name": "bundledFaIcons",
            "semantic": {
                "role": "global",
                "labels": [],
                "attributes": {},
                "relations": {}
            },
            "documentation": {
                "sections": [
                    {
                        "content": "Specification of bundled font-awesome icons.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "bundledFaIcons",
            "navPath": "@nav[mkdocs-ts]/DefaultLayout.bundledFaIcons",
            "code": {
                "filePath": "src/lib/default-layout/fa-icons.ts",
                "declaration": "bundledFaIcons = {\n    'fa-columns': faColumns,\n    'fa-times': faTimes,\n    'fa-chevron-right': faChevronRight,\n    'fa-chevron-left': faChevronLeft,\n    'fa-chevron-down': faChevronDown,\n    'fa-bookmark': faBookmark,\n    'far-bookmark': farBookmark,\n    'fa-code-branch': faCodeBranch,\n    'fa-list-ul': faListUl,\n    'fa-code': faCode,\n    'fa-external-link-alt': faExternalLinkAlt,\n    'fa-book-open': faBookOpen,\n    'fab-github': fabGithub,\n    'fa-pen-fancy': faPenFancy,\n    'fa-file-alt': faFileAlt,\n    'fa-info-circle': faInfoCircle,\n    'fa-fire': faFire,\n    'fa-check': faCheck,\n    'fa-question-circle': faQuestionCircle,\n    'fa-exclamation-triangle': faExclamationTriangle,\n    'fa-times-circle': faTimesCircle,\n    'fa-bolt': faBolt,\n    'fa-bug': faBug,\n    'fa-flask': faFlask,\n    'fa-quote-right': faQuoteRight,\n    'fa-spinner': faSpinner,\n}",
                "implementation": "",
                "startLine": 32,
                "endLine": 33,
                "references": {
                    "bundledFaIcons": "@nav[mkdocs-ts]/DefaultLayout.bundledFaIcons"
                }
            }
        },
        {
            "name": "defaultDisplayOptions",
            "semantic": {
                "role": "global",
                "labels": [],
                "attributes": {},
                "relations": {}
            },
            "documentation": {
                "sections": [
                    {
                        "content": "Default values of  <mkapi-api-link nav=\"@nav[mkdocs-ts]/DefaultLayout.DisplayOptions\" semantic=\"type-alias\">DisplayOptions</mkapi-api-link> .",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "defaultDisplayOptions",
            "navPath": "@nav[mkdocs-ts]/DefaultLayout.defaultDisplayOptions",
            "code": {
                "filePath": "src/lib/default-layout/common.ts",
                "declaration": "defaultDisplayOptions: DisplayOptions = {\n    toggleTocWidth: 1600,\n    tocMinWidth: 250,\n    tocMaxWidth: 400,\n    toggleNavWidth: 1300,\n    navMaxWidth: 500,\n    navMinWidth: '25rem',\n    sidePanelsZIndex: 100,\n    pageWidth: '35rem',\n    translationTime: 400,\n    pageVertPadding: '3rem',\n    forceTocDisplayMode: undefined,\n    forceNavDisplayMode: undefined,\n}",
                "implementation": "",
                "startLine": 114,
                "endLine": 115,
                "references": {
                    "defaultDisplayOptions": "@nav[mkdocs-ts]/DefaultLayout.defaultDisplayOptions",
                    "DisplayOptions": "@nav[mkdocs-ts]/DefaultLayout.DisplayOptions"
                }
            }
        }
    ],
    "types": [
        {
            "name": "BookmarksView",
            "documentation": {
                "sections": [
                    {
                        "content": "Displays a list of bookmarks as navigable items in a horizontal row.\n\nBookmarks are resolved from navigation paths and updated reactively.\nTypically defined as expanded content of  <mkapi-api-link nav=\"@nav[mkdocs-ts]/DefaultLayout.TopBanner\" semantic=\"class\">TopBanner</mkapi-api-link> .\n\n<note level=\"hint\">\nThe  `bookmarks$`  observable required by the constructor is usually also provided to  <mkapi-api-link nav=\"@nav[mkdocs-ts]/DefaultLayout.DefaultLayoutParams\" semantic=\"interface\">DefaultLayoutParams</mkapi-api-link> \nwhen creating the  <mkapi-api-link nav=\"@nav[mkdocs-ts]/DefaultLayout.Layout\" semantic=\"class\">Layout</mkapi-api-link> .\n</note>",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "BookmarksView",
            "navPath": "@nav[mkdocs-ts]/DefaultLayout.BookmarksView",
            "attributes": [
                {
                    "name": "children",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Children of the element.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "BookmarksView.children",
                    "navPath": "@nav[mkdocs-ts]/DefaultLayout.BookmarksView.children",
                    "code": {
                        "filePath": "src/lib/default-layout/top-banner.view.ts",
                        "declaration": "public readonly children: ChildrenLike",
                        "implementation": "",
                        "startLine": 344,
                        "endLine": 345,
                        "references": {
                            "children": "@nav[mkdocs-ts]/DefaultLayout.BookmarksView.children",
                            "ChildrenLike": "/apps/@rx-vdom/doc/latest?nav=/api.ChildrenLike",
                            "VirtualDOM.children": "/apps/@rx-vdom/doc/latest?nav=/api.VirtualDOM.children"
                        }
                    }
                },
                {
                    "name": "class",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The class associated with the element, equivalent to the  `className`  property of  `HTMLElement` .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "BookmarksView.class",
                    "navPath": "@nav[mkdocs-ts]/DefaultLayout.BookmarksView.class",
                    "code": {
                        "filePath": "src/lib/default-layout/top-banner.view.ts",
                        "declaration": "public readonly class = `${BookmarksView.CssSelector} d-flex align-items-center justify-content-center d-flex`",
                        "implementation": "",
                        "startLine": 343,
                        "endLine": 344,
                        "references": {
                            "class": "@nav[mkdocs-ts]/DefaultLayout.BookmarksView.class"
                        }
                    }
                },
                {
                    "name": "tag",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The tag of the element, equivalent to the  `tagName`  property of  `HTMLElement` .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "BookmarksView.tag",
                    "navPath": "@nav[mkdocs-ts]/DefaultLayout.BookmarksView.tag",
                    "code": {
                        "filePath": "src/lib/default-layout/top-banner.view.ts",
                        "declaration": "public readonly tag = 'div'",
                        "implementation": "",
                        "startLine": 342,
                        "endLine": 343,
                        "references": {
                            "tag": "@nav[mkdocs-ts]/DefaultLayout.BookmarksView.tag",
                            "VirtualDOM.tag": "/apps/@rx-vdom/doc/latest?nav=/api.VirtualDOM.tag"
                        }
                    }
                },
                {
                    "name": "CssSelector",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Component's class name for CSS query.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "BookmarksView.CssSelector",
                    "navPath": "@nav[mkdocs-ts]/DefaultLayout.BookmarksView.CssSelector",
                    "code": {
                        "filePath": "src/lib/default-layout/top-banner.view.ts",
                        "declaration": "static readonly CssSelector = 'mkdocs-BookmarksView'",
                        "implementation": "",
                        "startLine": 341,
                        "endLine": 342,
                        "references": {
                            "CssSelector": "@nav[mkdocs-ts]/DefaultLayout.BookmarksView.CssSelector"
                        }
                    }
                }
            ],
            "callables": [
                {
                    "name": "constructor",
                    "documentation": {
                        "sections": [
                            {
                                "content": "Initializes a new instance.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            },
                            {
                                "title": "Arguments",
                                "content": "\n*  **bookmarks$**: Observable of the bookmarks' navigation path.\n*  **router**: Applications's router.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "arguments",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "BookmarksView.constructor",
                    "navPath": "@nav[mkdocs-ts]/DefaultLayout.BookmarksView.constructor",
                    "code": {
                        "filePath": "src/lib/default-layout/top-banner.view.ts",
                        "declaration": "constructor({\n    bookmarks$,\n    router,\n}: {\n    bookmarks$?: Observable<string[]>\n    router: Router\n})",
                        "implementation": "constructor({\n    bookmarks$,\n    router,\n}: {\n    bookmarks$?: Observable<string[]>\n    router: Router\n}) {\n    if (!bookmarks$) {\n        return\n    }\n    const source$ = combineLatest([bookmarks$, router.explorerState.root$])\n    this.children = replace$({\n        policy: 'replace',\n        source$,\n        vdomMap: ([bookmarks, _root]) => {\n            return bookmarks.map((bookmark) => {\n                const node = router.explorerState.getNode(\n                    bookmark,\n                ) as unknown\n                return node\n                    ? new BookmarkView({\n                          node: node as NavNodeResolved<unknown, NavHeader>,\n                          router,\n                      })\n                    : EmptyDiv\n            })\n        },\n    })\n}",
                        "startLine": 353,
                        "endLine": 382,
                        "references": {
                            "BookmarksView": "@nav[mkdocs-ts]/DefaultLayout.BookmarksView",
                            "Router": "@nav[mkdocs-ts].Router",
                            "Observable": "https://rxjs.dev/guide/observable"
                        }
                    },
                    "semantic": {
                        "role": "constructor",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    }
                }
            ],
            "code": {
                "filePath": "src/lib/default-layout/top-banner.view.ts",
                "declaration": "export class BookmarksView implements VirtualDOM<'div'>",
                "implementation": "export class BookmarksView implements VirtualDOM<'div'> {\n    /**\n     * Component's class name for CSS query.\n     */\n    static readonly CssSelector = 'mkdocs-BookmarksView'\n    public readonly tag = 'div'\n    public readonly class = `${BookmarksView.CssSelector} d-flex align-items-center justify-content-center d-flex`\n    public readonly children: ChildrenLike\n\n    /**\n     * Initializes a new instance.\n     *\n     * @param _p Parameters\n     * @param _p.bookmarks$ Observable of the bookmarks' navigation path.\n     * @param _p.router Applications's router.\n     */\n    constructor({\n        bookmarks$,\n        router,\n    }: {\n        bookmarks$?: Observable<string[]>\n        router: Router\n    }) {\n        if (!bookmarks$) {\n            return\n        }\n        const source$ = combineLatest([bookmarks$, router.explorerState.root$])\n        this.children = replace$({\n            policy: 'replace',\n            source$,\n            vdomMap: ([bookmarks, _root]) => {\n                return bookmarks.map((bookmark) => {\n                    const node = router.explorerState.getNode(\n                        bookmark,\n                    ) as unknown\n                    return node\n                        ? new BookmarkView({\n                              node: node as NavNodeResolved<unknown, NavHeader>,\n                              router,\n                          })\n                        : EmptyDiv\n                })\n            },\n        })\n    }\n}",
                "startLine": 337,
                "endLine": 383,
                "references": {
                    "BookmarksView": "@nav[mkdocs-ts]/DefaultLayout.BookmarksView",
                    "Router": "@nav[mkdocs-ts].Router",
                    "Observable": "https://rxjs.dev/guide/observable",
                    "ChildrenLike": "/apps/@rx-vdom/doc/latest?nav=/api.ChildrenLike",
                    "VirtualDOM.children": "/apps/@rx-vdom/doc/latest?nav=/api.VirtualDOM.children",
                    "VirtualDOM.tag": "/apps/@rx-vdom/doc/latest?nav=/api.VirtualDOM.tag",
                    "VirtualDOM": "/apps/@rx-vdom/doc/latest?nav=/api.VirtualDOM"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "BookmarkView",
            "documentation": {
                "sections": [
                    {
                        "content": "A single bookmark view.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "BookmarkView",
            "navPath": "@nav[mkdocs-ts]/DefaultLayout.BookmarkView",
            "attributes": [
                {
                    "name": "children",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Children of the element.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "BookmarkView.children",
                    "navPath": "@nav[mkdocs-ts]/DefaultLayout.BookmarkView.children",
                    "code": {
                        "filePath": "src/lib/default-layout/top-banner.view.ts",
                        "declaration": "public readonly children: ChildrenLike",
                        "implementation": "",
                        "startLine": 394,
                        "endLine": 395,
                        "references": {
                            "children": "@nav[mkdocs-ts]/DefaultLayout.BookmarkView.children",
                            "ChildrenLike": "/apps/@rx-vdom/doc/latest?nav=/api.ChildrenLike",
                            "VirtualDOM.children": "/apps/@rx-vdom/doc/latest?nav=/api.VirtualDOM.children"
                        }
                    }
                },
                {
                    "name": "class",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The class associated with the element, equivalent to the  `className`  property of  `HTMLElement` .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "BookmarkView.class",
                    "navPath": "@nav[mkdocs-ts]/DefaultLayout.BookmarkView.class",
                    "code": {
                        "filePath": "src/lib/default-layout/top-banner.view.ts",
                        "declaration": "public readonly class = BookmarkView.CssSelector",
                        "implementation": "",
                        "startLine": 393,
                        "endLine": 394,
                        "references": {
                            "class": "@nav[mkdocs-ts]/DefaultLayout.BookmarkView.class"
                        }
                    }
                },
                {
                    "name": "tag",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The tag of the element, equivalent to the  `tagName`  property of  `HTMLElement` .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "BookmarkView.tag",
                    "navPath": "@nav[mkdocs-ts]/DefaultLayout.BookmarkView.tag",
                    "code": {
                        "filePath": "src/lib/default-layout/top-banner.view.ts",
                        "declaration": "public readonly tag = 'div'",
                        "implementation": "",
                        "startLine": 392,
                        "endLine": 393,
                        "references": {
                            "tag": "@nav[mkdocs-ts]/DefaultLayout.BookmarkView.tag",
                            "VirtualDOM.tag": "/apps/@rx-vdom/doc/latest?nav=/api.VirtualDOM.tag"
                        }
                    }
                },
                {
                    "name": "CssSelector",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Component's class name for CSS query.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "BookmarkView.CssSelector",
                    "navPath": "@nav[mkdocs-ts]/DefaultLayout.BookmarkView.CssSelector",
                    "code": {
                        "filePath": "src/lib/default-layout/top-banner.view.ts",
                        "declaration": "static readonly CssSelector: string = 'mkdocs-BookmarkView mx-3'",
                        "implementation": "",
                        "startLine": 390,
                        "endLine": 391,
                        "references": {
                            "CssSelector": "@nav[mkdocs-ts]/DefaultLayout.BookmarkView.CssSelector"
                        }
                    }
                }
            ],
            "callables": [
                {
                    "name": "constructor",
                    "documentation": {
                        "sections": [
                            {
                                "content": "Initializes a new instance.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            },
                            {
                                "title": "Arguments",
                                "content": "\n*  **node**: Node associated to the bookmark.\n*  **router**: Application's router.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "arguments",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "BookmarkView.constructor",
                    "navPath": "@nav[mkdocs-ts]/DefaultLayout.BookmarkView.constructor",
                    "code": {
                        "filePath": "src/lib/default-layout/top-banner.view.ts",
                        "declaration": "constructor({\n    node,\n    router,\n}: {\n    node: NavNodeResolved<unknown, NavHeader>\n    router: Router\n})",
                        "implementation": "constructor({\n    node,\n    router,\n}: {\n    node: NavNodeResolved<unknown, NavHeader>\n    router: Router\n}) {\n    this.children = [\n        {\n            tag: 'a',\n            class: attr$({\n                source$: router.path$,\n                vdomMap: (path) => {\n                    return path === node.href\n                        ? 'mkdocs-text-5 selected mkdocs-text-focus'\n                        : 'mkdocs-text-4'\n                },\n                wrapper: (d) =>\n                    `${d} mkdocs-hover-text-5 text-center d-flex flex-column align-items-center`,\n                untilFirst: 'mkdocs-text-4',\n            }),\n            style: {\n                textDecoration: 'none',\n            },\n            href: node.href,\n            children: [\n                {\n                    tag: 'div',\n                    innerText: node.name,\n                },\n            ],\n            onclick: (ev) => {\n                ev.preventDefault()\n                router.fireNavigateTo({ path: node.href })\n                if (node.href === '/') {\n                    router.explorerState.expandedNodes$.next(['/'])\n                    return\n                }\n                const expanded =\n                    router.explorerState.expandedNodes$.value.filter(\n                        (n) => {\n                            return n.startsWith(node.href)\n                        },\n                    )\n                router.explorerState.expandedNodes$.next(['/', ...expanded])\n            },\n        },\n    ]\n}",
                        "startLine": 402,
                        "endLine": 451,
                        "references": {
                            "BookmarkView": "@nav[mkdocs-ts]/DefaultLayout.BookmarkView",
                            "NavNodeResolved": "@nav[mkdocs-ts].NavNodeResolved",
                            "NavHeader": "@nav[mkdocs-ts]/DefaultLayout.NavHeader",
                            "Router": "@nav[mkdocs-ts].Router"
                        }
                    },
                    "semantic": {
                        "role": "constructor",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    }
                }
            ],
            "code": {
                "filePath": "src/lib/default-layout/top-banner.view.ts",
                "declaration": "export class BookmarkView implements VirtualDOM<'div'>",
                "implementation": "export class BookmarkView implements VirtualDOM<'div'> {\n    /**\n     * Component's class name for CSS query.\n     */\n    static readonly CssSelector: string = 'mkdocs-BookmarkView mx-3'\n\n    public readonly tag = 'div'\n    public readonly class = BookmarkView.CssSelector\n    public readonly children: ChildrenLike\n    /**\n     * Initializes a new instance.\n     *\n     * @param _p Parameters\n     * @param _p.node Node associated to the bookmark.\n     * @param _p.router Application's router.\n     */\n    constructor({\n        node,\n        router,\n    }: {\n        node: NavNodeResolved<unknown, NavHeader>\n        router: Router\n    }) {\n        this.children = [\n            {\n                tag: 'a',\n                class: attr$({\n                    source$: router.path$,\n                    vdomMap: (path) => {\n                        return path === node.href\n                            ? 'mkdocs-text-5 selected mkdocs-text-focus'\n                            : 'mkdocs-text-4'\n                    },\n                    wrapper: (d) =>\n                        `${d} mkdocs-hover-text-5 text-center d-flex flex-column align-items-center`,\n                    untilFirst: 'mkdocs-text-4',\n                }),\n                style: {\n                    textDecoration: 'none',\n                },\n                href: node.href,\n                children: [\n                    {\n                        tag: 'div',\n                        innerText: node.name,\n                    },\n                ],\n                onclick: (ev) => {\n                    ev.preventDefault()\n                    router.fireNavigateTo({ path: node.href })\n                    if (node.href === '/') {\n                        router.explorerState.expandedNodes$.next(['/'])\n                        return\n                    }\n                    const expanded =\n                        router.explorerState.expandedNodes$.value.filter(\n                            (n) => {\n                                return n.startsWith(node.href)\n                            },\n                        )\n                    router.explorerState.expandedNodes$.next(['/', ...expanded])\n                },\n            },\n        ]\n    }\n}",
                "startLine": 386,
                "endLine": 452,
                "references": {
                    "BookmarkView": "@nav[mkdocs-ts]/DefaultLayout.BookmarkView",
                    "NavNodeResolved": "@nav[mkdocs-ts].NavNodeResolved",
                    "NavHeader": "@nav[mkdocs-ts]/DefaultLayout.NavHeader",
                    "Router": "@nav[mkdocs-ts].Router",
                    "ChildrenLike": "/apps/@rx-vdom/doc/latest?nav=/api.ChildrenLike",
                    "VirtualDOM.children": "/apps/@rx-vdom/doc/latest?nav=/api.VirtualDOM.children",
                    "VirtualDOM.tag": "/apps/@rx-vdom/doc/latest?nav=/api.VirtualDOM.tag",
                    "VirtualDOM": "/apps/@rx-vdom/doc/latest?nav=/api.VirtualDOM"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "FooterView",
            "documentation": {
                "sections": [
                    {
                        "content": "The page footer.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "FooterView",
            "navPath": "@nav[mkdocs-ts]/DefaultLayout.FooterView",
            "attributes": [
                {
                    "name": "children",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Children of the element.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "FooterView.children",
                    "navPath": "@nav[mkdocs-ts]/DefaultLayout.FooterView.children",
                    "code": {
                        "filePath": "src/lib/default-layout/page.view.ts",
                        "declaration": "public readonly children: ChildrenLike",
                        "implementation": "",
                        "startLine": 211,
                        "endLine": 212,
                        "references": {
                            "children": "@nav[mkdocs-ts]/DefaultLayout.FooterView.children",
                            "ChildrenLike": "/apps/@rx-vdom/doc/latest?nav=/api.ChildrenLike",
                            "VirtualDOM.children": "/apps/@rx-vdom/doc/latest?nav=/api.VirtualDOM.children"
                        }
                    }
                },
                {
                    "name": "class",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The class associated with the element, equivalent to the  `className`  property of  `HTMLElement` .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "FooterView.class",
                    "navPath": "@nav[mkdocs-ts]/DefaultLayout.FooterView.class",
                    "code": {
                        "filePath": "src/lib/default-layout/page.view.ts",
                        "declaration": "public readonly class =\n        'w-75 mx-auto mkdocs-FooterView d-flex align-items-center flex-wrap justify-content-center border-top py-1'",
                        "implementation": "",
                        "startLine": 209,
                        "endLine": 210,
                        "references": {
                            "class": "@nav[mkdocs-ts]/DefaultLayout.FooterView.class"
                        }
                    }
                },
                {
                    "name": "tag",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The tag of the element, equivalent to the  `tagName`  property of  `HTMLElement` .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "FooterView.tag",
                    "navPath": "@nav[mkdocs-ts]/DefaultLayout.FooterView.tag",
                    "code": {
                        "filePath": "src/lib/default-layout/page.view.ts",
                        "declaration": "public readonly tag = 'div'",
                        "implementation": "",
                        "startLine": 208,
                        "endLine": 209,
                        "references": {
                            "tag": "@nav[mkdocs-ts]/DefaultLayout.FooterView.tag",
                            "VirtualDOM.tag": "/apps/@rx-vdom/doc/latest?nav=/api.VirtualDOM.tag"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/default-layout/page.view.ts",
                "declaration": "export class FooterView implements VirtualDOM<'div'>",
                "implementation": "export class FooterView implements VirtualDOM<'div'> {\n    public readonly tag = 'div'\n    public readonly class =\n        'w-75 mx-auto mkdocs-FooterView d-flex align-items-center flex-wrap justify-content-center border-top py-1'\n    public readonly children: ChildrenLike\n\n    constructor(params?: { sourceName: string; sourceUrl: string }) {\n        const assetId = window.btoa(pkgJson.name)\n        const baseIconPath = `/api/assets-gateway/webpm/resources/${assetId}/${pkgJson.version}/assets`\n        const mkdocs: AnyVirtualDOM = {\n            tag: 'div',\n            class: 'd-flex align-items-center',\n            children: [\n                {\n                    tag: 'div',\n                    innerText: 'Made with',\n                },\n                {\n                    tag: 'div',\n                    class: 'mx-2',\n                },\n                {\n                    tag: 'img',\n                    src: `${baseIconPath}/mkdocs-ts.svg`,\n                    width: 25,\n                },\n                {\n                    tag: 'a',\n                    class: 'mx-1',\n                    innerText: 'mkdocs-ts',\n                    target: '_blank',\n                    href: '/apps/@mkdocs-ts/doc/latest',\n                },\n            ],\n        }\n        const sources = () => ({\n            tag: 'div' as const,\n            class: 'd-flex align-items-center px-1 border rounded mx-2 my-1',\n            children: [\n                faIconTyped('fa-code-branch'),\n                {\n                    tag: 'a' as const,\n                    class: 'mx-1',\n                    innerText: params?.sourceName,\n                    target: '_blank',\n                    href: params?.sourceUrl,\n                },\n            ],\n        })\n        this.children = [params ? sources() : undefined, mkdocs]\n    }\n}",
                "startLine": 207,
                "endLine": 259,
                "references": {
                    "FooterView": "@nav[mkdocs-ts]/DefaultLayout.FooterView",
                    "ChildrenLike": "/apps/@rx-vdom/doc/latest?nav=/api.ChildrenLike",
                    "VirtualDOM.children": "/apps/@rx-vdom/doc/latest?nav=/api.VirtualDOM.children",
                    "VirtualDOM.tag": "/apps/@rx-vdom/doc/latest?nav=/api.VirtualDOM.tag",
                    "VirtualDOM": "/apps/@rx-vdom/doc/latest?nav=/api.VirtualDOM"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "Layout",
            "documentation": {
                "sections": [
                    {
                        "content": "Represents the default layout of the library.\n\n**Structure**\n\nThis layout is organized into a column-based structure, proceeding from left to right:\n\n- **Navigation Column**:\n  The navigation panel provides access to the various   <mkapi-api-link nav=\"@nav[mkdocs-ts].Navigation\" semantic=\"type-alias\">Navigation</mkapi-api-link>  nodes, see  <mkapi-api-link nav=\"@nav[mkdocs-ts]/DefaultLayout.NavigationView\" semantic=\"class\">NavigationView</mkapi-api-link> .\n\n- **Page Column**:\n  Displays the content of the selected navigation node, by default using  <mkapi-api-link nav=\"@nav[mkdocs-ts]/DefaultLayout.PageView\" semantic=\"class\">PageView</mkapi-api-link> .\n  This column is customizable via  <mkapi-api-link nav=\"@nav[mkdocs-ts]/DefaultLayout.DefaultLayoutParams.page\" semantic=\"attribute\">DefaultLayoutParams.page</mkapi-api-link> .\n\n- **Table Of Content Column**:\n  Provides quick access to structured content, by default using  <mkapi-api-link nav=\"@nav[mkdocs-ts]/DefaultLayout.TOCView\" semantic=\"class\">TOCView</mkapi-api-link> .\n  Customization options are available through the  `toc`  attribute of  <mkapi-api-link nav=\"@nav[mkdocs-ts]/DefaultLayout.NavLayout\" semantic=\"type-alias\">NavLayout</mkapi-api-link> ,\n  applicable to navigation nodes.\n\nThe layout can optionally includes a top-banner and a footer.\n\n**Responsive Behavior**\n\nOn smaller screens, the navigation and TOC columns collapse into an expandable menu for better usability.\n\n**Configuration**\n\n For detailed configuration options, see  <mkapi-api-link nav=\"@nav[mkdocs-ts]/DefaultLayout.DefaultLayoutParams\" semantic=\"interface\">DefaultLayoutParams</mkapi-api-link> .",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "Layout",
            "navPath": "@nav[mkdocs-ts]/DefaultLayout.Layout",
            "attributes": [
                {
                    "name": "children",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Children of the element.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "Layout.children",
                    "navPath": "@nav[mkdocs-ts]/DefaultLayout.Layout.children",
                    "code": {
                        "filePath": "src/lib/default-layout/default-layout.view.ts",
                        "declaration": "public readonly children: ChildrenLike",
                        "implementation": "",
                        "startLine": 75,
                        "endLine": 76,
                        "references": {
                            "children": "@nav[mkdocs-ts]/DefaultLayout.Layout.children",
                            "ChildrenLike": "/apps/@rx-vdom/doc/latest?nav=/api.ChildrenLike",
                            "VirtualDOM.children": "/apps/@rx-vdom/doc/latest?nav=/api.VirtualDOM.children"
                        }
                    }
                },
                {
                    "name": "class",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The class associated with the element, equivalent to the  `className`  property of  `HTMLElement` .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "Layout.class",
                    "navPath": "@nav[mkdocs-ts]/DefaultLayout.Layout.class",
                    "code": {
                        "filePath": "src/lib/default-layout/default-layout.view.ts",
                        "declaration": "public readonly class = `${Layout.CssSelector} d-flex flex-column h-100 w-100 overflow-y-auto overflow-x-hidden`",
                        "implementation": "",
                        "startLine": 76,
                        "endLine": 77,
                        "references": {
                            "class": "@nav[mkdocs-ts]/DefaultLayout.Layout.class"
                        }
                    }
                },
                {
                    "name": "connectedCallback",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Lifecycle hook called just after the element has been attached to the document's DOM.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "Layout.connectedCallback",
                    "navPath": "@nav[mkdocs-ts]/DefaultLayout.Layout.connectedCallback",
                    "code": {
                        "filePath": "src/lib/default-layout/default-layout.view.ts",
                        "declaration": "public readonly connectedCallback: (e: RxHTMLElement<'div'>) => void",
                        "implementation": "",
                        "startLine": 87,
                        "endLine": 88,
                        "references": {
                            "connectedCallback": "@nav[mkdocs-ts]/DefaultLayout.Layout.connectedCallback",
                            "RxHTMLElement": "/apps/@rx-vdom/doc/latest?nav=/api.RxHTMLElement",
                            "VirtualDOM.connectedCallback": "/apps/@rx-vdom/doc/latest?nav=/api.VirtualDOM.connectedCallback"
                        }
                    }
                },
                {
                    "name": "displayModeNav$",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The display mode regarding the navigation panel.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "Layout.displayModeNav$",
                    "navPath": "@nav[mkdocs-ts]/DefaultLayout.Layout.displayModeNav$",
                    "code": {
                        "filePath": "src/lib/default-layout/default-layout.view.ts",
                        "declaration": "public readonly displayModeNav$ = new BehaviorSubject<DisplayMode>('pined')",
                        "implementation": "",
                        "startLine": 81,
                        "endLine": 82,
                        "references": {
                            "displayModeNav$": "@nav[mkdocs-ts]/DefaultLayout.Layout.displayModeNav$",
                            "DisplayMode": "@nav[mkdocs-ts]/DefaultLayout.DisplayMode",
                            "BehaviorSubject": "https://www.learnrxjs.io/learn-rxjs/subjects/subject"
                        }
                    }
                },
                {
                    "name": "displayModeToc$",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The display mode regarding the table of content.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "Layout.displayModeToc$",
                    "navPath": "@nav[mkdocs-ts]/DefaultLayout.Layout.displayModeToc$",
                    "code": {
                        "filePath": "src/lib/default-layout/default-layout.view.ts",
                        "declaration": "public readonly displayModeToc$ = new BehaviorSubject<DisplayMode>('pined')",
                        "implementation": "",
                        "startLine": 85,
                        "endLine": 86,
                        "references": {
                            "displayModeToc$": "@nav[mkdocs-ts]/DefaultLayout.Layout.displayModeToc$",
                            "DisplayMode": "@nav[mkdocs-ts]/DefaultLayout.DisplayMode",
                            "BehaviorSubject": "https://www.learnrxjs.io/learn-rxjs/subjects/subject"
                        }
                    }
                },
                {
                    "name": "onclick",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/click_event)",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "Layout.onclick",
                    "navPath": "@nav[mkdocs-ts]/DefaultLayout.Layout.onclick",
                    "code": {
                        "filePath": "src/lib/default-layout/default-layout.view.ts",
                        "declaration": "public readonly onclick: (ev: MouseEvent) => void",
                        "implementation": "",
                        "startLine": 95,
                        "endLine": 96,
                        "references": {
                            "onclick": "@nav[mkdocs-ts]/DefaultLayout.Layout.onclick",
                            "MouseEvent": "https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent"
                        }
                    }
                },
                {
                    "name": "tag",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The tag of the element, equivalent to the  `tagName`  property of  `HTMLElement` .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "Layout.tag",
                    "navPath": "@nav[mkdocs-ts]/DefaultLayout.Layout.tag",
                    "code": {
                        "filePath": "src/lib/default-layout/default-layout.view.ts",
                        "declaration": "public readonly tag = 'div'",
                        "implementation": "",
                        "startLine": 74,
                        "endLine": 75,
                        "references": {
                            "tag": "@nav[mkdocs-ts]/DefaultLayout.Layout.tag",
                            "VirtualDOM.tag": "/apps/@rx-vdom/doc/latest?nav=/api.VirtualDOM.tag"
                        }
                    }
                },
                {
                    "name": "CssSelector",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Component's class name for CSS query.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "Layout.CssSelector",
                    "navPath": "@nav[mkdocs-ts]/DefaultLayout.Layout.CssSelector",
                    "code": {
                        "filePath": "src/lib/default-layout/default-layout.view.ts",
                        "declaration": "static readonly CssSelector = 'mkdocs-DefaultLayoutView'",
                        "implementation": "",
                        "startLine": 71,
                        "endLine": 72,
                        "references": {
                            "CssSelector": "@nav[mkdocs-ts]/DefaultLayout.Layout.CssSelector"
                        }
                    }
                }
            ],
            "callables": [
                {
                    "name": "constructor",
                    "documentation": {
                        "sections": [
                            {
                                "content": "Initializes a new instance.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            },
                            {
                                "title": "Arguments",
                                "content": "\n*  **params**: See  <mkapi-api-link nav=\"@nav[mkdocs-ts]/DefaultLayout.DefaultLayoutParams\" semantic=\"interface\">DefaultLayoutParams</mkapi-api-link> .\n*  **ctx**: Execution context used for logging and tracing.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "arguments",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "Layout.constructor",
                    "navPath": "@nav[mkdocs-ts]/DefaultLayout.Layout.constructor",
                    "code": {
                        "filePath": "src/lib/default-layout/default-layout.view.ts",
                        "declaration": "constructor(params: DefaultLayoutParams, ctx?: ContextTrait)",
                        "implementation": "constructor(params: DefaultLayoutParams, ctx?: ContextTrait) {\n    this.context = ctx\n    const context = this.ctx().start('new Layout', ['View'])\n    const {\n        router,\n        page,\n        topBanner,\n        footer,\n        displayOptions,\n        bookmarks$,\n        navFooter,\n    } = params\n\n    this.displayOptions = Object.assign(\n        this.displayOptions,\n        displayOptions ?? {},\n    )\n\n    this.connectedCallback = this.getConnectedCallback(router)\n\n    this.onclick = (event: MouseEvent) => {\n        handleInternalLinkClick({ router, event })\n    }\n\n    const viewInputs = {\n        router,\n        layoutOptions: this.displayOptions,\n        bookmarks$,\n    }\n\n    const navigationBoundingBox$ = new ReplaySubject<DOMRect>(1)\n    const tocBoundingBox$ = new ReplaySubject<DOMRect>(1)\n\n    const topBannerView = topBanner\n        ? new TopBanner({\n              router,\n              navigationBoundingBox$,\n              tocBoundingBox$,\n              navDisplayMode$: this.displayModeNav$,\n              spec: topBanner,\n              pageScrollTop$: this.pageScrollTop$,\n          })\n        : new EmptyTopBanner()\n\n    const footerView = new FooterWrapper({\n        router,\n        footer,\n        withNav: navFooter,\n    })\n\n    const contentView = page\n        ? page(viewInputs)\n        : new PageView({ router: router }, context)\n\n    const pageView = new WrapperPageView({\n        content: contentView,\n        displayOptions: this.displayOptions,\n        displayModeNav$: this.displayModeNav$,\n        displayModeToc$: this.displayModeToc$,\n        minHeight$: LayoutObserver.minPageHeight$(\n            this.appBoundingBox$,\n            topBannerView.boundingBox$,\n            footerView.boundingBox$,\n        ),\n    })\n    this.layoutObserver = new LayoutObserver(\n        {\n            boxes: {\n                pageBBox$: pageView.boundingBox$,\n                topBannerBBox$: topBannerView.boundingBox$,\n                footerBBox$: footerView.boundingBox$,\n                appBBox$: this.appBoundingBox$,\n                navBBox$: navigationBoundingBox$,\n                tocBBox$: tocBoundingBox$,\n            },\n            pageScrollTop$: this.pageScrollTop$,\n            displayModeNav$: this.displayModeNav$,\n            displayModeToc$: this.displayModeToc$,\n            displayModeOptions: this.displayOptions,\n        },\n        context,\n    )\n\n    const navView = new NavigationView({\n        router: router,\n        displayOptions: this.displayOptions,\n        bookmarks$: bookmarks$,\n    })\n    const { pined: pinedNav, expandable: expandableNav } = this.sideView(\n        navView,\n        this.displayModeNav$,\n        navigationBoundingBox$,\n        this.displayOptions.sidePanelsZIndex,\n        ExpandableNavColumn,\n    )\n\n    const tocView = new TocWrapperView({\n        router,\n        displayMode$: this.displayModeToc$,\n        displayOptions: this.displayOptions,\n        content$: contentView.content$,\n    })\n    const { pined: pinedToc, expandable: expandableToc } = this.sideView(\n        tocView,\n        this.displayModeToc$,\n        tocBoundingBox$,\n        this.displayOptions.sidePanelsZIndex,\n        ExpandableTocColumn,\n    )\n\n    const hSep = {\n        tag: 'div' as const,\n        class: 'flex-grow-1',\n    }\n    this.children = [\n        topBannerView,\n        {\n            tag: 'div',\n            class: 'd-flex w-100',\n            children: [\n                this.layoutObserver.switchMode('nav', {\n                    pined: pinedNav,\n                    expandable: expandableNav,\n                    removed: EmptyDiv,\n                }),\n                hSep,\n                pageView,\n                this.layoutObserver.switchMode('toc', {\n                    pined: hSep,\n                    expandable: EmptyDiv,\n                    removed: hSep,\n                }),\n                this.layoutObserver.switchMode('toc', {\n                    pined: pinedToc,\n                    expandable: expandableToc,\n                    removed: new EmptyToc(tocBoundingBox$),\n                }),\n            ],\n        },\n        footerView,\n    ]\n    context.exit()\n}",
                        "startLine": 103,
                        "endLine": 246,
                        "references": {
                            "Layout": "@nav[mkdocs-ts]/DefaultLayout.Layout",
                            "DefaultLayoutParams": "@nav[mkdocs-ts]/DefaultLayout.DefaultLayoutParams",
                            "ContextTrait": "@nav[mkdocs-ts].ContextTrait"
                        }
                    },
                    "semantic": {
                        "role": "constructor",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    }
                }
            ],
            "code": {
                "filePath": "src/lib/default-layout/default-layout.view.ts",
                "declaration": "export class Layout implements VirtualDOM<'div'>",
                "implementation": "export class Layout implements VirtualDOM<'div'> {\n    /**\n     * Component's class name for CSS query.\n     */\n    static readonly CssSelector = 'mkdocs-DefaultLayoutView'\n    public readonly displayOptions: DisplayOptions = defaultDisplayOptions\n\n    public readonly tag = 'div'\n    public readonly children: ChildrenLike\n    public readonly class = `${Layout.CssSelector} d-flex flex-column h-100 w-100 overflow-y-auto overflow-x-hidden`\n\n    /**\n     * The display mode regarding the navigation panel.\n     */\n    public readonly displayModeNav$ = new BehaviorSubject<DisplayMode>('pined')\n    /**\n     * The display mode regarding the table of content.\n     */\n    public readonly displayModeToc$ = new BehaviorSubject<DisplayMode>('pined')\n\n    public readonly connectedCallback: (e: RxHTMLElement<'div'>) => void\n\n    private readonly context?: ContextTrait\n\n    public readonly pageScrollTop$ = new BehaviorSubject(0)\n\n    public readonly layoutObserver: LayoutObserver\n\n    public readonly onclick: (ev: MouseEvent) => void\n    private appBoundingBox$ = new ReplaySubject<DOMRect>(1)\n    /**\n     * Initializes a new instance.\n     *\n     * @param params See {@link DefaultLayoutParams}.\n     * @param ctx Execution context used for logging and tracing.\n     */\n    constructor(params: DefaultLayoutParams, ctx?: ContextTrait) {\n        this.context = ctx\n        const context = this.ctx().start('new Layout', ['View'])\n        const {\n            router,\n            page,\n            topBanner,\n            footer,\n            displayOptions,\n            bookmarks$,\n            navFooter,\n        } = params\n\n        this.displayOptions = Object.assign(\n            this.displayOptions,\n            displayOptions ?? {},\n        )\n\n        this.connectedCallback = this.getConnectedCallback(router)\n\n        this.onclick = (event: MouseEvent) => {\n            handleInternalLinkClick({ router, event })\n        }\n\n        const viewInputs = {\n            router,\n            layoutOptions: this.displayOptions,\n            bookmarks$,\n        }\n\n        const navigationBoundingBox$ = new ReplaySubject<DOMRect>(1)\n        const tocBoundingBox$ = new ReplaySubject<DOMRect>(1)\n\n        const topBannerView = topBanner\n            ? new TopBanner({\n                  router,\n                  navigationBoundingBox$,\n                  tocBoundingBox$,\n                  navDisplayMode$: this.displayModeNav$,\n                  spec: topBanner,\n                  pageScrollTop$: this.pageScrollTop$,\n              })\n            : new EmptyTopBanner()\n\n        const footerView = new FooterWrapper({\n            router,\n            footer,\n            withNav: navFooter,\n        })\n\n        const contentView = page\n            ? page(viewInputs)\n            : new PageView({ router: router }, context)\n\n        const pageView = new WrapperPageView({\n            content: contentView,\n            displayOptions: this.displayOptions,\n            displayModeNav$: this.displayModeNav$,\n            displayModeToc$: this.displayModeToc$,\n            minHeight$: LayoutObserver.minPageHeight$(\n                this.appBoundingBox$,\n                topBannerView.boundingBox$,\n                footerView.boundingBox$,\n            ),\n        })\n        this.layoutObserver = new LayoutObserver(\n            {\n                boxes: {\n                    pageBBox$: pageView.boundingBox$,\n                    topBannerBBox$: topBannerView.boundingBox$,\n                    footerBBox$: footerView.boundingBox$,\n                    appBBox$: this.appBoundingBox$,\n                    navBBox$: navigationBoundingBox$,\n                    tocBBox$: tocBoundingBox$,\n                },\n                pageScrollTop$: this.pageScrollTop$,\n                displayModeNav$: this.displayModeNav$,\n                displayModeToc$: this.displayModeToc$,\n                displayModeOptions: this.displayOptions,\n            },\n            context,\n        )\n\n        const navView = new NavigationView({\n            router: router,\n            displayOptions: this.displayOptions,\n            bookmarks$: bookmarks$,\n        })\n        const { pined: pinedNav, expandable: expandableNav } = this.sideView(\n            navView,\n            this.displayModeNav$,\n            navigationBoundingBox$,\n            this.displayOptions.sidePanelsZIndex,\n            ExpandableNavColumn,\n        )\n\n        const tocView = new TocWrapperView({\n            router,\n            displayMode$: this.displayModeToc$,\n            displayOptions: this.displayOptions,\n            content$: contentView.content$,\n        })\n        const { pined: pinedToc, expandable: expandableToc } = this.sideView(\n            tocView,\n            this.displayModeToc$,\n            tocBoundingBox$,\n            this.displayOptions.sidePanelsZIndex,\n            ExpandableTocColumn,\n        )\n\n        const hSep = {\n            tag: 'div' as const,\n            class: 'flex-grow-1',\n        }\n        this.children = [\n            topBannerView,\n            {\n                tag: 'div',\n                class: 'd-flex w-100',\n                children: [\n                    this.layoutObserver.switchMode('nav', {\n                        pined: pinedNav,\n                        expandable: expandableNav,\n                        removed: EmptyDiv,\n                    }),\n                    hSep,\n                    pageView,\n                    this.layoutObserver.switchMode('toc', {\n                        pined: hSep,\n                        expandable: EmptyDiv,\n                        removed: hSep,\n                    }),\n                    this.layoutObserver.switchMode('toc', {\n                        pined: pinedToc,\n                        expandable: expandableToc,\n                        removed: new EmptyToc(tocBoundingBox$),\n                    }),\n                ],\n            },\n            footerView,\n        ]\n        context.exit()\n    }\n\n    ctx(ctx?: ContextTrait) {\n        if (ctx) {\n            return ctx\n        }\n        return this.context ?? new NoContext()\n    }\n\n    private sideView<T extends TocWrapperView | NavigationView>(\n        content: T,\n        displayMode$: BehaviorSubject<DisplayMode>,\n        bbox$: Subject<BBox>,\n        zIndex: number,\n        Expandable: new (\n            p: ExpandableParams<T>,\n        ) => T extends TocWrapperView\n            ? ExpandableTocColumn\n            : ExpandableNavColumn,\n    ): {\n        pined: AnyVirtualDOM\n        expandable: AnyVirtualDOM\n    } {\n        const pined = StickyColumnContainer.wrap(\n            content,\n            this.layoutObserver,\n            bbox$,\n            zIndex,\n        )\n        const expandable = new Expandable({\n            content,\n            layoutObserver: this.layoutObserver,\n            displayOptions: this.displayOptions,\n            displayMode$,\n            boundingBox$: bbox$,\n        })\n        return {\n            pined,\n            expandable,\n        }\n    }\n\n    private getConnectedCallback(router: Router) {\n        return (e: RxHTMLElement<'div'>) => {\n            const patchScrollTo = ({ top, left, behavior }: ScrollToOptions) =>\n                this.layoutObserver.boxes$\n                    .pipe(take(1))\n                    .subscribe(({ topBanner }) => {\n                        e.scrollTo({\n                            left,\n                            behavior,\n                            top: top ? top - topBanner.height : 0,\n                        })\n                    })\n\n            router.setScrollableElement(e, patchScrollTo)\n            e.ownSubscriptions(\n                router.path$.subscribe(() => {\n                    if (this.displayModeNav$.value === 'expanded') {\n                        this.displayModeNav$.next('hidden')\n                    }\n                }),\n            )\n            e.addEventListener('scroll', () => {\n                this.pageScrollTop$.next(e.scrollTop)\n            })\n            plugBoundingBoxObserver(e, this.appBoundingBox$)\n        }\n    }\n}",
                "startLine": 67,
                "endLine": 315,
                "references": {
                    "Layout": "@nav[mkdocs-ts]/DefaultLayout.Layout",
                    "DefaultLayoutParams": "@nav[mkdocs-ts]/DefaultLayout.DefaultLayoutParams",
                    "ContextTrait": "@nav[mkdocs-ts].ContextTrait",
                    "DisplayMode": "@nav[mkdocs-ts]/DefaultLayout.DisplayMode",
                    "LayoutObserver": "@nav[mkdocs-ts]/DefaultLayout.LayoutObserver",
                    "ChildrenLike": "/apps/@rx-vdom/doc/latest?nav=/api.ChildrenLike",
                    "VirtualDOM.children": "/apps/@rx-vdom/doc/latest?nav=/api.VirtualDOM.children",
                    "RxHTMLElement": "/apps/@rx-vdom/doc/latest?nav=/api.RxHTMLElement",
                    "VirtualDOM.connectedCallback": "/apps/@rx-vdom/doc/latest?nav=/api.VirtualDOM.connectedCallback",
                    "BehaviorSubject": "https://www.learnrxjs.io/learn-rxjs/subjects/subject",
                    "MouseEvent": "https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent",
                    "VirtualDOM.tag": "/apps/@rx-vdom/doc/latest?nav=/api.VirtualDOM.tag",
                    "VirtualDOM": "/apps/@rx-vdom/doc/latest?nav=/api.VirtualDOM"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "LayoutObserver",
            "documentation": {
                "sections": [
                    {
                        "content": "Observes layout dimensions and visibility as screen size or display mode changes.\nUsed to coordinate layout behaviors like navigation or TOC visibility and transitions.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "LayoutObserver",
            "navPath": "@nav[mkdocs-ts]/DefaultLayout.LayoutObserver",
            "attributes": [
                {
                    "name": "boxes$",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Emits rounded layout bounding boxes whenever their dimensions change.\nShared replayed for efficient subscriptions.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "LayoutObserver.boxes$",
                    "navPath": "@nav[mkdocs-ts]/DefaultLayout.LayoutObserver.boxes$",
                    "code": {
                        "filePath": "src/lib/default-layout/common.ts",
                        "declaration": "public readonly boxes$: Observable<{\n        page: BBox\n        topBanner: BBox\n        footer: BBox\n        app: BBox\n        nav: BBox\n        toc: BBox\n    }>",
                        "implementation": "",
                        "startLine": 379,
                        "endLine": 380,
                        "references": {
                            "boxes$": "@nav[mkdocs-ts]/DefaultLayout.LayoutObserver.boxes$",
                            "BBox": "@nav[mkdocs-ts]/DefaultLayout.BBox",
                            "Observable": "https://rxjs.dev/guide/observable"
                        }
                    }
                },
                {
                    "name": "displayModeNav$",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Tracks the current display mode of the navigation panel. May be externally controlled or automatically updated.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "LayoutObserver.displayModeNav$",
                    "navPath": "@nav[mkdocs-ts]/DefaultLayout.LayoutObserver.displayModeNav$",
                    "code": {
                        "filePath": "src/lib/default-layout/common.ts",
                        "declaration": "public readonly displayModeNav$: BehaviorSubject<DisplayMode>",
                        "implementation": "",
                        "startLine": 398,
                        "endLine": 399,
                        "references": {
                            "displayModeNav$": "@nav[mkdocs-ts]/DefaultLayout.LayoutObserver.displayModeNav$",
                            "DisplayMode": "@nav[mkdocs-ts]/DefaultLayout.DisplayMode",
                            "BehaviorSubject": "https://www.learnrxjs.io/learn-rxjs/subjects/subject"
                        }
                    }
                },
                {
                    "name": "displayModeOptions",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Holds configuration for display mode toggling and force-mode settings.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "LayoutObserver.displayModeOptions",
                    "navPath": "@nav[mkdocs-ts]/DefaultLayout.LayoutObserver.displayModeOptions",
                    "code": {
                        "filePath": "src/lib/default-layout/common.ts",
                        "declaration": "public readonly displayModeOptions: DisplayModeOptions",
                        "implementation": "",
                        "startLine": 394,
                        "endLine": 395,
                        "references": {
                            "displayModeOptions": "@nav[mkdocs-ts]/DefaultLayout.LayoutObserver.displayModeOptions",
                            "DisplayModeOptions": "@nav[mkdocs-ts]/DefaultLayout.DisplayModeOptions"
                        }
                    }
                },
                {
                    "name": "displayModeToc$",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Tracks the current display mode of the TOC (Table of Contents) panel.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "LayoutObserver.displayModeToc$",
                    "navPath": "@nav[mkdocs-ts]/DefaultLayout.LayoutObserver.displayModeToc$",
                    "code": {
                        "filePath": "src/lib/default-layout/common.ts",
                        "declaration": "public readonly displayModeToc$: BehaviorSubject<DisplayMode>",
                        "implementation": "",
                        "startLine": 402,
                        "endLine": 403,
                        "references": {
                            "displayModeToc$": "@nav[mkdocs-ts]/DefaultLayout.LayoutObserver.displayModeToc$",
                            "DisplayMode": "@nav[mkdocs-ts]/DefaultLayout.DisplayMode",
                            "BehaviorSubject": "https://www.learnrxjs.io/learn-rxjs/subjects/subject"
                        }
                    }
                },
                {
                    "name": "pageVisible$",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Represents the visible vertical area of the page content, taking banners and scroll position into account.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "LayoutObserver.pageVisible$",
                    "navPath": "@nav[mkdocs-ts]/DefaultLayout.LayoutObserver.pageVisible$",
                    "code": {
                        "filePath": "src/lib/default-layout/common.ts",
                        "declaration": "public readonly pageVisible$: Observable<{ top: number; height: number }>",
                        "implementation": "",
                        "startLine": 390,
                        "endLine": 391,
                        "references": {
                            "pageVisible$": "@nav[mkdocs-ts]/DefaultLayout.LayoutObserver.pageVisible$",
                            "Observable": "https://rxjs.dev/guide/observable"
                        }
                    }
                }
            ],
            "callables": [
                {
                    "name": "constructor",
                    "documentation": {
                        "sections": [
                            {
                                "content": "Creates a new instance to watch layout bounding boxes and display mode settings.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            },
                            {
                                "title": "Arguments",
                                "content": "\n*  **boxes**: Various bounding box observables.\n*  **displayModeNav$**: Reactive subject controlling navigation display mode.\n*  **displayModeOptions**: Configuration for display mode behaviors .\n*  **displayModeToc$**: Reactive subject controlling TOC display mode.\n*  **pageScrollTop$**: Stream of vertical scroll position for the page.\n*  **ctx**: Logging and debugging context provider.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "arguments",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "LayoutObserver.constructor",
                    "navPath": "@nav[mkdocs-ts]/DefaultLayout.LayoutObserver.constructor",
                    "code": {
                        "filePath": "src/lib/default-layout/common.ts",
                        "declaration": "constructor(\n    p: {\n        boxes: {\n            pageBBox$: BBox$\n            topBannerBBox$: BBox$\n            footerBBox$: BBox$\n            appBBox$: BBox$\n            navBBox$: BBox$\n            tocBBox$: BBox$\n        }\n        pageScrollTop$: Observable<number>\n        displayModeNav$: BehaviorSubject<DisplayMode>\n        displayModeToc$: BehaviorSubject<DisplayMode>\n        displayModeOptions: DisplayModeOptions\n    },\n    ctx?: ContextTrait,\n)",
                        "implementation": "constructor(\n    p: {\n        boxes: {\n            pageBBox$: BBox$\n            topBannerBBox$: BBox$\n            footerBBox$: BBox$\n            appBBox$: BBox$\n            navBBox$: BBox$\n            tocBBox$: BBox$\n        }\n        pageScrollTop$: Observable<number>\n        displayModeNav$: BehaviorSubject<DisplayMode>\n        displayModeToc$: BehaviorSubject<DisplayMode>\n        displayModeOptions: DisplayModeOptions\n    },\n    ctx?: ContextTrait,\n) {\n    const context = (ctx ?? new NoContext()).start('new LayoutObserver', [\n        'View',\n    ])\n\n    this.displayModeNav$ = p.displayModeNav$\n    this.displayModeToc$ = p.displayModeToc$\n    this.displayModeOptions = p.displayModeOptions\n    const round = (rect: BBox): BBox => ({\n        width: Math.round(rect.width),\n        height: Math.round(rect.height),\n    })\n    this.boxes$ = combineLatest([\n        p.boxes.pageBBox$,\n        p.boxes.topBannerBBox$,\n        p.boxes.footerBBox$,\n        p.boxes.appBBox$,\n        p.boxes.navBBox$,\n        p.boxes.tocBBox$,\n    ]).pipe(\n        map(([page, topBanner, footer, app, nav, toc]) => {\n            return {\n                page: round(page),\n                topBanner: round(topBanner),\n                footer: round(footer),\n                app: round(app),\n                nav: round(nav),\n                toc: round(toc),\n            }\n        }),\n        distinctUntilChanged(\n            (prev, curr) => JSON.stringify(prev) === JSON.stringify(curr),\n        ),\n        tap((boxes) => {\n            context.info('BBox update', boxes)\n            this.displayModeSwitcher(boxes.app, context)\n        }),\n        shareReplay({ bufferSize: 1, refCount: true }),\n    )\n    this.pageVisible$ = combineLatest([this.boxes$, p.pageScrollTop$]).pipe(\n        map(([{ page, topBanner, app }, scrollTop]) => {\n            const remainingPageHeight = page.height - scrollTop\n            const pageVisibleHeight =\n                remainingPageHeight > app.height\n                    ? app.height - topBanner.height\n                    : remainingPageHeight\n            return {\n                top: topBanner.height,\n                height: pageVisibleHeight,\n            }\n        }),\n        shareReplay({ bufferSize: 1, refCount: true }),\n        distinctUntilChanged(\n            (prev, curr) =>\n                prev.height === curr.height && prev.top === curr.top,\n        ),\n    )\n\n    if (this.displayModeOptions.forceNavDisplayMode) {\n        this.displayModeNav$.next(\n            this.displayModeOptions.forceNavDisplayMode,\n        )\n    }\n    if (this.displayModeOptions.forceTocDisplayMode) {\n        this.displayModeToc$.next(\n            this.displayModeOptions.forceTocDisplayMode,\n        )\n    }\n}",
                        "startLine": 415,
                        "endLine": 500,
                        "references": {
                            "LayoutObserver": "@nav[mkdocs-ts]/DefaultLayout.LayoutObserver",
                            "BBox$": "@nav[mkdocs-ts]/DefaultLayout.BBox$",
                            "DisplayMode": "@nav[mkdocs-ts]/DefaultLayout.DisplayMode",
                            "DisplayModeOptions": "@nav[mkdocs-ts]/DefaultLayout.DisplayModeOptions",
                            "ContextTrait": "@nav[mkdocs-ts].ContextTrait",
                            "BehaviorSubject": "https://www.learnrxjs.io/learn-rxjs/subjects/subject",
                            "Observable": "https://rxjs.dev/guide/observable"
                        }
                    },
                    "semantic": {
                        "role": "constructor",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    }
                }
            ],
            "code": {
                "filePath": "src/lib/default-layout/common.ts",
                "declaration": "export class LayoutObserver",
                "implementation": "export class LayoutObserver {\n    /**\n     * Emits rounded layout bounding boxes whenever their dimensions change.\n     * Shared replayed for efficient subscriptions.\n     */\n    public readonly boxes$: Observable<{\n        page: BBox\n        topBanner: BBox\n        footer: BBox\n        app: BBox\n        nav: BBox\n        toc: BBox\n    }>\n    /**\n     * Represents the visible vertical area of the page content, taking banners and scroll position into account.\n     */\n    public readonly pageVisible$: Observable<{ top: number; height: number }>\n    /**\n     * Holds configuration for display mode toggling and force-mode settings.\n     */\n    public readonly displayModeOptions: DisplayModeOptions\n    /**\n     * Tracks the current display mode of the navigation panel. May be externally controlled or automatically updated.\n     */\n    public readonly displayModeNav$: BehaviorSubject<DisplayMode>\n    /**\n     * Tracks the current display mode of the TOC (Table of Contents) panel.\n     */\n    public readonly displayModeToc$: BehaviorSubject<DisplayMode>\n\n    /**\n     * Creates a new instance to watch layout bounding boxes and display mode settings.\n     *\n     * @param p\n     * @param p.boxes Various bounding box observables.\n     * @param p.pageScrollTop$ Stream of vertical scroll position for the page.\n     * @param p.displayModeNav$ Reactive subject controlling navigation display mode.\n     * @param p.displayModeToc$ Reactive subject controlling TOC display mode.\n     * @param p.displayModeOptions Configuration for display mode behaviors .\n     * @param ctx Logging and debugging context provider.\n     */\n    constructor(\n        p: {\n            boxes: {\n                pageBBox$: BBox$\n                topBannerBBox$: BBox$\n                footerBBox$: BBox$\n                appBBox$: BBox$\n                navBBox$: BBox$\n                tocBBox$: BBox$\n            }\n            pageScrollTop$: Observable<number>\n            displayModeNav$: BehaviorSubject<DisplayMode>\n            displayModeToc$: BehaviorSubject<DisplayMode>\n            displayModeOptions: DisplayModeOptions\n        },\n        ctx?: ContextTrait,\n    ) {\n        const context = (ctx ?? new NoContext()).start('new LayoutObserver', [\n            'View',\n        ])\n\n        this.displayModeNav$ = p.displayModeNav$\n        this.displayModeToc$ = p.displayModeToc$\n        this.displayModeOptions = p.displayModeOptions\n        const round = (rect: BBox): BBox => ({\n            width: Math.round(rect.width),\n            height: Math.round(rect.height),\n        })\n        this.boxes$ = combineLatest([\n            p.boxes.pageBBox$,\n            p.boxes.topBannerBBox$,\n            p.boxes.footerBBox$,\n            p.boxes.appBBox$,\n            p.boxes.navBBox$,\n            p.boxes.tocBBox$,\n        ]).pipe(\n            map(([page, topBanner, footer, app, nav, toc]) => {\n                return {\n                    page: round(page),\n                    topBanner: round(topBanner),\n                    footer: round(footer),\n                    app: round(app),\n                    nav: round(nav),\n                    toc: round(toc),\n                }\n            }),\n            distinctUntilChanged(\n                (prev, curr) => JSON.stringify(prev) === JSON.stringify(curr),\n            ),\n            tap((boxes) => {\n                context.info('BBox update', boxes)\n                this.displayModeSwitcher(boxes.app, context)\n            }),\n            shareReplay({ bufferSize: 1, refCount: true }),\n        )\n        this.pageVisible$ = combineLatest([this.boxes$, p.pageScrollTop$]).pipe(\n            map(([{ page, topBanner, app }, scrollTop]) => {\n                const remainingPageHeight = page.height - scrollTop\n                const pageVisibleHeight =\n                    remainingPageHeight > app.height\n                        ? app.height - topBanner.height\n                        : remainingPageHeight\n                return {\n                    top: topBanner.height,\n                    height: pageVisibleHeight,\n                }\n            }),\n            shareReplay({ bufferSize: 1, refCount: true }),\n            distinctUntilChanged(\n                (prev, curr) =>\n                    prev.height === curr.height && prev.top === curr.top,\n            ),\n        )\n\n        if (this.displayModeOptions.forceNavDisplayMode) {\n            this.displayModeNav$.next(\n                this.displayModeOptions.forceNavDisplayMode,\n            )\n        }\n        if (this.displayModeOptions.forceTocDisplayMode) {\n            this.displayModeToc$.next(\n                this.displayModeOptions.forceTocDisplayMode,\n            )\n        }\n    }\n    private displayModeSwitcher(bbox: BBox, context: ContextTrait) {\n        const switcher = (\n            elem: 'nav' | 'toc',\n            width: number,\n            treshold: number,\n            removed: number,\n            displayMode$: BehaviorSubject<DisplayMode>,\n        ) => {\n            let nextValue: DisplayMode | undefined = undefined\n            if (\n                width <= treshold &&\n                ['removed', 'pined'].includes(displayMode$.value)\n            ) {\n                nextValue = 'hidden'\n            }\n            if (width < removed) {\n                nextValue = 'removed'\n            }\n            if (width > treshold) {\n                nextValue = 'pined'\n            }\n\n            if (nextValue && displayMode$.value !== nextValue) {\n                context.info(`Switch mode for ${elem}`, {\n                    old: displayMode$.value,\n                    new: nextValue,\n                })\n                displayMode$.next(nextValue)\n            }\n        }\n        if (this.displayModeOptions.forceTocDisplayMode === undefined) {\n            switcher(\n                'toc',\n                bbox.width,\n                this.displayModeOptions.toggleTocWidth,\n                this.displayModeOptions.toggleNavWidth,\n                this.displayModeToc$,\n            )\n        }\n        if (this.displayModeOptions.forceNavDisplayMode === undefined) {\n            switcher(\n                'nav',\n                bbox.width,\n                this.displayModeOptions.toggleNavWidth,\n                0,\n                this.displayModeNav$,\n            )\n        }\n    }\n\n    switchMode(\n        source: 'nav' | 'toc',\n        mapTo: {\n            pined: AnyVirtualDOM\n            expandable: AnyVirtualDOM\n            removed: AnyVirtualDOM\n        },\n    ): RxChild {\n        const source$ =\n            source === 'nav' ? this.displayModeNav$ : this.displayModeToc$\n        return child$({\n            source$: source$.pipe(\n                map((mode) => {\n                    if (mode === 'removed') {\n                        return 'removed'\n                    }\n                    return mode === 'pined' ? 'pined' : 'expandable'\n                }),\n                distinctUntilChanged(),\n            ),\n            vdomMap: (mode: 'pined' | 'expandable' | 'removed') => {\n                if (mode === 'removed') {\n                    return mapTo.removed\n                }\n                return mode === 'pined' ? mapTo.pined : mapTo.expandable\n            },\n        })\n    }\n\n    static minPageHeight$(app$: BBox$, topBanner$: BBox$, footer$: BBox$) {\n        return combineLatest([app$, topBanner$, footer$]).pipe(\n            map(\n                ([appBB, topBB, footerBB]) =>\n                    appBB.height - topBB.height - footerBB.height,\n            ),\n        )\n    }\n}",
                "startLine": 374,
                "endLine": 588,
                "references": {
                    "LayoutObserver": "@nav[mkdocs-ts]/DefaultLayout.LayoutObserver",
                    "BBox$": "@nav[mkdocs-ts]/DefaultLayout.BBox$",
                    "DisplayMode": "@nav[mkdocs-ts]/DefaultLayout.DisplayMode",
                    "DisplayModeOptions": "@nav[mkdocs-ts]/DefaultLayout.DisplayModeOptions",
                    "ContextTrait": "@nav[mkdocs-ts].ContextTrait",
                    "BBox": "@nav[mkdocs-ts]/DefaultLayout.BBox",
                    "BehaviorSubject": "https://www.learnrxjs.io/learn-rxjs/subjects/subject",
                    "Observable": "https://rxjs.dev/guide/observable",
                    "AnyVirtualDOM": "/apps/@rx-vdom/doc/latest?nav=/api.AnyVirtualDOM",
                    "RxChild": "/apps/@rx-vdom/doc/latest?nav=/api.RxChild"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "LayoutWithCompanion",
            "documentation": {
                "sections": [
                    {
                        "content": "Represents a layout based on  <mkapi-api-link nav=\"@nav[mkdocs-ts]/DefaultLayout.Layout\" semantic=\"class\">Layout</mkapi-api-link> , with an additional split view feature allowing\ntwo pages to be displayed side-by-side.\n\n**Structure**\n\n- The **main-screen** (on the left) displays the default layout using the provided router.\n\n- The **companion-screen** (on the right) displays views for the navigation nodes specified in  `companionNodes$` .\n\n**Companion Screen**\n\n- Navigation in the companion screen uses a  <mkapi-api-link nav=\"@nav[mkdocs-ts].MockBrowser\" semantic=\"class\">MockBrowser</mkapi-api-link>  client: browser's URL is not updated.\n\n- The  `companionNodes$`  are provided and managed by the consumer.\n\n**Integration Notes**\n\n- Use the helper function  <mkapi-api-link nav=\"@nav[mkdocs-ts]/DefaultLayout.splitCompanionAction\" semantic=\"function\">splitCompanionAction</mkapi-api-link>  to integrate a toggle button into the navigation headers of\n  selected nodes, simplifying the management of  `companionNodes$` .",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "LayoutWithCompanion",
            "navPath": "@nav[mkdocs-ts]/DefaultLayout.LayoutWithCompanion",
            "attributes": [
                {
                    "name": "children",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Children of the element.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "LayoutWithCompanion.children",
                    "navPath": "@nav[mkdocs-ts]/DefaultLayout.LayoutWithCompanion.children",
                    "code": {
                        "filePath": "src/lib/default-layout/companion-layout.view.ts",
                        "declaration": "public readonly children: ChildrenLike",
                        "implementation": "",
                        "startLine": 81,
                        "endLine": 82,
                        "references": {
                            "children": "@nav[mkdocs-ts]/DefaultLayout.LayoutWithCompanion.children",
                            "ChildrenLike": "/apps/@rx-vdom/doc/latest?nav=/api.ChildrenLike",
                            "VirtualDOM.children": "/apps/@rx-vdom/doc/latest?nav=/api.VirtualDOM.children"
                        }
                    }
                },
                {
                    "name": "class",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The class associated with the element, equivalent to the  `className`  property of  `HTMLElement` .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "LayoutWithCompanion.class",
                    "navPath": "@nav[mkdocs-ts]/DefaultLayout.LayoutWithCompanion.class",
                    "code": {
                        "filePath": "src/lib/default-layout/companion-layout.view.ts",
                        "declaration": "public readonly class = `${LayoutWithCompanion.CssSelector} w-100 h-100 d-flex`",
                        "implementation": "",
                        "startLine": 80,
                        "endLine": 81,
                        "references": {
                            "class": "@nav[mkdocs-ts]/DefaultLayout.LayoutWithCompanion.class"
                        }
                    }
                },
                {
                    "name": "connectedCallback",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Lifecycle hook called just after the element has been attached to the document's DOM.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "LayoutWithCompanion.connectedCallback",
                    "navPath": "@nav[mkdocs-ts]/DefaultLayout.LayoutWithCompanion.connectedCallback",
                    "code": {
                        "filePath": "src/lib/default-layout/companion-layout.view.ts",
                        "declaration": "public readonly connectedCallback: (elem: RxHTMLElement<'div'>) => void",
                        "implementation": "",
                        "startLine": 82,
                        "endLine": 83,
                        "references": {
                            "connectedCallback": "@nav[mkdocs-ts]/DefaultLayout.LayoutWithCompanion.connectedCallback",
                            "RxHTMLElement": "/apps/@rx-vdom/doc/latest?nav=/api.RxHTMLElement",
                            "VirtualDOM.connectedCallback": "/apps/@rx-vdom/doc/latest?nav=/api.VirtualDOM.connectedCallback"
                        }
                    }
                },
                {
                    "name": "tag",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The tag of the element, equivalent to the  `tagName`  property of  `HTMLElement` .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "LayoutWithCompanion.tag",
                    "navPath": "@nav[mkdocs-ts]/DefaultLayout.LayoutWithCompanion.tag",
                    "code": {
                        "filePath": "src/lib/default-layout/companion-layout.view.ts",
                        "declaration": "public readonly tag = 'div'",
                        "implementation": "",
                        "startLine": 79,
                        "endLine": 80,
                        "references": {
                            "tag": "@nav[mkdocs-ts]/DefaultLayout.LayoutWithCompanion.tag",
                            "VirtualDOM.tag": "/apps/@rx-vdom/doc/latest?nav=/api.VirtualDOM.tag"
                        }
                    }
                }
            ],
            "callables": [
                {
                    "name": "constructor",
                    "documentation": {
                        "sections": [
                            {
                                "content": "Constructs a new  `LayoutWithCompanion`  layout.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            },
                            {
                                "title": "Arguments",
                                "content": "\n*  **params**: See  <mkapi-api-link nav=\"@nav[mkdocs-ts]/DefaultLayout.LayoutWithCompanionParams\" semantic=\"type-alias\">LayoutWithCompanionParams</mkapi-api-link>\n*  **ctx**: Execution context used for logging and tracing.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "arguments",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "LayoutWithCompanion.constructor",
                    "navPath": "@nav[mkdocs-ts]/DefaultLayout.LayoutWithCompanion.constructor",
                    "code": {
                        "filePath": "src/lib/default-layout/companion-layout.view.ts",
                        "declaration": "constructor(params: LayoutWithCompanionParams, ctx?: ContextTrait)",
                        "implementation": "constructor(params: LayoutWithCompanionParams, ctx?: ContextTrait) {\n    this.context = ctx\n    this.companionNodes$ = params.companionNodes$\n    const context = this.ctx().start('new LayoutWithCompanion', ['View'])\n\n    const mainView = new Layout(\n        {\n            ...params,\n            page: ({ router }) =>\n                new PageView(\n                    {\n                        router,\n                    },\n                    context,\n                ),\n        },\n        context,\n    )\n    const companionRouter = context.execute('setupRouters', (ctx) =>\n        setupRouters(\n            {\n                router: params.router,\n                companionNodes$: this.companionNodes$,\n            },\n            ctx,\n        ),\n    )\n\n    const subs = [\n        this.companionNodes$\n            .pipe(\n                filter((prefixes) => prefixes.length >= 1),\n                take(1),\n                switchMap((target) =>\n                    from(companionRouter.navigateTo({ path: target[0] })),\n                ),\n            )\n            .subscribe(),\n    ]\n    this.connectedCallback = (elem) => {\n        elem.ownSubscriptions(...subs)\n    }\n    const companionWidth = params.displayOptions?.companionWidth ?? 40\n    this.children = [\n        {\n            tag: 'div',\n            class: 'h-100',\n            style: attr$({\n                source$: this.companionNodes$,\n                vdomMap: (d) =>\n                    d.length === 0\n                        ? { width: '100%' }\n                        : { width: `${String(100 - companionWidth)}%` },\n            }),\n            children: [mainView],\n        },\n        child$({\n            source$: this.companionNodes$,\n            vdomMap: (target) => {\n                if (target.length === 0) {\n                    return EmptyDiv\n                }\n                const pageView = new PageView(\n                    {\n                        router: companionRouter,\n                    },\n                    context,\n                )\n                const tocView = new TocWrapperView({\n                    router: companionRouter,\n                    displayMode$: new BehaviorSubject('hidden'),\n                    displayOptions: mainView.displayOptions,\n                    content$: pageView.content$,\n                })\n                const displayModeToc$ = new BehaviorSubject<DisplayMode>(\n                    'hidden',\n                )\n                const tocBoundingBox$ = new ReplaySubject<DOMRect>(1)\n                const expandableRightSideNav = new ExpandableTocColumn({\n                    content: tocView,\n                    displayOptions: mainView.displayOptions,\n                    layoutObserver: mainView.layoutObserver,\n                    displayMode$: displayModeToc$,\n                    boundingBox$: tocBoundingBox$,\n                })\n                return {\n                    tag: 'div',\n                    class: 'bg-light h-100 ps-5 pe-2 overflow-y-auto overflow-x-hidden d-flex',\n                    style: {\n                        width: `${String(companionWidth)}%`,\n                    },\n                    children: [\n                        new WrapperPageView({\n                            content: pageView,\n                            displayOptions: mainView.displayOptions,\n                            displayModeToc$,\n                            minHeight$: mainView.layoutObserver.boxes$.pipe(\n                                map(({ app, topBanner, footer }) => {\n                                    return (\n                                        app.height -\n                                        topBanner.height -\n                                        footer.height\n                                    )\n                                }),\n                            ),\n                        }),\n                        expandableRightSideNav,\n                    ],\n                    onclick: (event: MouseEvent) => {\n                        handleInternalLinkClick({\n                            router: companionRouter,\n                            event,\n                        })\n                    },\n                    connectedCallback: (e) => {\n                        companionRouter.setScrollableElement(e)\n                    },\n                }\n            },\n        }),\n    ]\n    context.exit()\n}",
                        "startLine": 93,
                        "endLine": 216,
                        "references": {
                            "LayoutWithCompanion": "@nav[mkdocs-ts]/DefaultLayout.LayoutWithCompanion",
                            "LayoutWithCompanionParams": "@nav[mkdocs-ts]/DefaultLayout.LayoutWithCompanionParams",
                            "ContextTrait": "@nav[mkdocs-ts].ContextTrait"
                        }
                    },
                    "semantic": {
                        "role": "constructor",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    }
                }
            ],
            "code": {
                "filePath": "src/lib/default-layout/companion-layout.view.ts",
                "declaration": "export class LayoutWithCompanion implements VirtualDOM<'div'>",
                "implementation": "export class LayoutWithCompanion implements VirtualDOM<'div'> {\n    static readonly CssSelector = 'mkdocs-LayoutWithCompanion'\n    public readonly tag = 'div'\n    public readonly class = `${LayoutWithCompanion.CssSelector} w-100 h-100 d-flex`\n    public readonly children: ChildrenLike\n    public readonly connectedCallback: (elem: RxHTMLElement<'div'>) => void\n\n    public readonly companionNodes$: BehaviorSubject<string[]>\n\n    public readonly context?: ContextTrait\n    /**\n     * Constructs a new `LayoutWithCompanion` layout.\n     *\n     * @param params See {@link LayoutWithCompanionParams}\n     * @param ctx Execution context used for logging and tracing.\n     **/\n    constructor(params: LayoutWithCompanionParams, ctx?: ContextTrait) {\n        this.context = ctx\n        this.companionNodes$ = params.companionNodes$\n        const context = this.ctx().start('new LayoutWithCompanion', ['View'])\n\n        const mainView = new Layout(\n            {\n                ...params,\n                page: ({ router }) =>\n                    new PageView(\n                        {\n                            router,\n                        },\n                        context,\n                    ),\n            },\n            context,\n        )\n        const companionRouter = context.execute('setupRouters', (ctx) =>\n            setupRouters(\n                {\n                    router: params.router,\n                    companionNodes$: this.companionNodes$,\n                },\n                ctx,\n            ),\n        )\n\n        const subs = [\n            this.companionNodes$\n                .pipe(\n                    filter((prefixes) => prefixes.length >= 1),\n                    take(1),\n                    switchMap((target) =>\n                        from(companionRouter.navigateTo({ path: target[0] })),\n                    ),\n                )\n                .subscribe(),\n        ]\n        this.connectedCallback = (elem) => {\n            elem.ownSubscriptions(...subs)\n        }\n        const companionWidth = params.displayOptions?.companionWidth ?? 40\n        this.children = [\n            {\n                tag: 'div',\n                class: 'h-100',\n                style: attr$({\n                    source$: this.companionNodes$,\n                    vdomMap: (d) =>\n                        d.length === 0\n                            ? { width: '100%' }\n                            : { width: `${String(100 - companionWidth)}%` },\n                }),\n                children: [mainView],\n            },\n            child$({\n                source$: this.companionNodes$,\n                vdomMap: (target) => {\n                    if (target.length === 0) {\n                        return EmptyDiv\n                    }\n                    const pageView = new PageView(\n                        {\n                            router: companionRouter,\n                        },\n                        context,\n                    )\n                    const tocView = new TocWrapperView({\n                        router: companionRouter,\n                        displayMode$: new BehaviorSubject('hidden'),\n                        displayOptions: mainView.displayOptions,\n                        content$: pageView.content$,\n                    })\n                    const displayModeToc$ = new BehaviorSubject<DisplayMode>(\n                        'hidden',\n                    )\n                    const tocBoundingBox$ = new ReplaySubject<DOMRect>(1)\n                    const expandableRightSideNav = new ExpandableTocColumn({\n                        content: tocView,\n                        displayOptions: mainView.displayOptions,\n                        layoutObserver: mainView.layoutObserver,\n                        displayMode$: displayModeToc$,\n                        boundingBox$: tocBoundingBox$,\n                    })\n                    return {\n                        tag: 'div',\n                        class: 'bg-light h-100 ps-5 pe-2 overflow-y-auto overflow-x-hidden d-flex',\n                        style: {\n                            width: `${String(companionWidth)}%`,\n                        },\n                        children: [\n                            new WrapperPageView({\n                                content: pageView,\n                                displayOptions: mainView.displayOptions,\n                                displayModeToc$,\n                                minHeight$: mainView.layoutObserver.boxes$.pipe(\n                                    map(({ app, topBanner, footer }) => {\n                                        return (\n                                            app.height -\n                                            topBanner.height -\n                                            footer.height\n                                        )\n                                    }),\n                                ),\n                            }),\n                            expandableRightSideNav,\n                        ],\n                        onclick: (event: MouseEvent) => {\n                            handleInternalLinkClick({\n                                router: companionRouter,\n                                event,\n                            })\n                        },\n                        connectedCallback: (e) => {\n                            companionRouter.setScrollableElement(e)\n                        },\n                    }\n                },\n            }),\n        ]\n        context.exit()\n    }\n    ctx() {\n        return this.context ?? new NoContext()\n    }\n}",
                "startLine": 77,
                "endLine": 220,
                "references": {
                    "LayoutWithCompanion": "@nav[mkdocs-ts]/DefaultLayout.LayoutWithCompanion",
                    "LayoutWithCompanionParams": "@nav[mkdocs-ts]/DefaultLayout.LayoutWithCompanionParams",
                    "ContextTrait": "@nav[mkdocs-ts].ContextTrait",
                    "ChildrenLike": "/apps/@rx-vdom/doc/latest?nav=/api.ChildrenLike",
                    "VirtualDOM.children": "/apps/@rx-vdom/doc/latest?nav=/api.VirtualDOM.children",
                    "BehaviorSubject": "https://www.learnrxjs.io/learn-rxjs/subjects/subject",
                    "RxHTMLElement": "/apps/@rx-vdom/doc/latest?nav=/api.RxHTMLElement",
                    "VirtualDOM.connectedCallback": "/apps/@rx-vdom/doc/latest?nav=/api.VirtualDOM.connectedCallback",
                    "VirtualDOM.tag": "/apps/@rx-vdom/doc/latest?nav=/api.VirtualDOM.tag",
                    "VirtualDOM": "/apps/@rx-vdom/doc/latest?nav=/api.VirtualDOM"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "NavFooterView",
            "documentation": {
                "sections": [
                    {
                        "content": "An horizontal banner, usually included in footer, providing links to **Previous** & **Next**.\nIt is included in the default layout's footer when  <mkapi-api-link nav=\"@nav[mkdocs-ts]/DefaultLayout.DefaultLayoutParams.navFooter\" semantic=\"attribute\">DefaultLayoutParams.navFooter</mkapi-api-link>  is turned on.\n\nRegarding siblings look up, see  <mkapi-api-link nav=\"@nav[mkdocs-ts].Router.siblings$\" semantic=\"attribute\">Router.siblings$</mkapi-api-link> .",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "NavFooterView",
            "navPath": "@nav[mkdocs-ts]/DefaultLayout.NavFooterView",
            "attributes": [
                {
                    "name": "children",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Children of the element.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "NavFooterView.children",
                    "navPath": "@nav[mkdocs-ts]/DefaultLayout.NavFooterView.children",
                    "code": {
                        "filePath": "src/lib/default-layout/footer.view.ts",
                        "declaration": "public readonly children: ChildrenLike",
                        "implementation": "",
                        "startLine": 51,
                        "endLine": 52,
                        "references": {
                            "children": "@nav[mkdocs-ts]/DefaultLayout.NavFooterView.children",
                            "ChildrenLike": "/apps/@rx-vdom/doc/latest?nav=/api.ChildrenLike",
                            "VirtualDOM.children": "/apps/@rx-vdom/doc/latest?nav=/api.VirtualDOM.children"
                        }
                    }
                },
                {
                    "name": "class",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The class associated with the element, equivalent to the  `className`  property of  `HTMLElement` .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "NavFooterView.class",
                    "navPath": "@nav[mkdocs-ts]/DefaultLayout.NavFooterView.class",
                    "code": {
                        "filePath": "src/lib/default-layout/footer.view.ts",
                        "declaration": "public readonly class = `${NavFooterView.CssSelector} d-flex flex-wrap align-items-center w-100 border-top mkdocs-bg-5 mkdocs-lighter mkdocs-text-5 py-2`",
                        "implementation": "",
                        "startLine": 50,
                        "endLine": 51,
                        "references": {
                            "class": "@nav[mkdocs-ts]/DefaultLayout.NavFooterView.class"
                        }
                    }
                },
                {
                    "name": "tag",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The tag of the element, equivalent to the  `tagName`  property of  `HTMLElement` .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "NavFooterView.tag",
                    "navPath": "@nav[mkdocs-ts]/DefaultLayout.NavFooterView.tag",
                    "code": {
                        "filePath": "src/lib/default-layout/footer.view.ts",
                        "declaration": "public readonly tag = 'div'",
                        "implementation": "",
                        "startLine": 49,
                        "endLine": 50,
                        "references": {
                            "tag": "@nav[mkdocs-ts]/DefaultLayout.NavFooterView.tag",
                            "VirtualDOM.tag": "/apps/@rx-vdom/doc/latest?nav=/api.VirtualDOM.tag"
                        }
                    }
                },
                {
                    "name": "CssSelector",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Component's class name for CSS query.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "NavFooterView.CssSelector",
                    "navPath": "@nav[mkdocs-ts]/DefaultLayout.NavFooterView.CssSelector",
                    "code": {
                        "filePath": "src/lib/default-layout/footer.view.ts",
                        "declaration": "static readonly CssSelector = 'mkdocs-NavFooterView'",
                        "implementation": "",
                        "startLine": 48,
                        "endLine": 49,
                        "references": {
                            "CssSelector": "@nav[mkdocs-ts]/DefaultLayout.NavFooterView.CssSelector"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/default-layout/footer.view.ts",
                "declaration": "export class NavFooterView implements VirtualDOM<'div'>",
                "implementation": "export class NavFooterView implements VirtualDOM<'div'> {\n    /**\n     * Component's class name for CSS query.\n     */\n    static readonly CssSelector = 'mkdocs-NavFooterView'\n    public readonly tag = 'div'\n    public readonly class = `${NavFooterView.CssSelector} d-flex flex-wrap align-items-center w-100 border-top mkdocs-bg-5 mkdocs-lighter mkdocs-text-5 py-2`\n    public readonly children: ChildrenLike\n\n    constructor(params: { router: Router }) {\n        const { router } = params\n        const nav$ = router.siblings$\n        const sep = {\n            tag: 'div' as const,\n            class: 'flex-grow-1',\n        }\n        this.children = [\n            sep,\n            child$({\n                source$: nav$,\n                vdomMap: ({ prev }) => {\n                    return prev\n                        ? new NavFooterAnchorView({\n                              router,\n                              direction: 'Previous',\n                              node: prev,\n                          })\n                        : EmptyDiv\n                },\n            }),\n            sep,\n            sep,\n            child$({\n                source$: nav$,\n                vdomMap: ({ next }) => {\n                    return next\n                        ? new NavFooterAnchorView({\n                              router,\n                              direction: 'Next',\n                              node: next,\n                          })\n                        : EmptyDiv\n                },\n            }),\n            sep,\n        ]\n    }\n}",
                "startLine": 44,
                "endLine": 92,
                "references": {
                    "NavFooterView": "@nav[mkdocs-ts]/DefaultLayout.NavFooterView",
                    "Router": "@nav[mkdocs-ts].Router",
                    "ChildrenLike": "/apps/@rx-vdom/doc/latest?nav=/api.ChildrenLike",
                    "VirtualDOM.children": "/apps/@rx-vdom/doc/latest?nav=/api.VirtualDOM.children",
                    "VirtualDOM.tag": "/apps/@rx-vdom/doc/latest?nav=/api.VirtualDOM.tag",
                    "VirtualDOM": "/apps/@rx-vdom/doc/latest?nav=/api.VirtualDOM"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "NavHeaderView",
            "documentation": {
                "sections": [
                    {
                        "content": "Represents the header view for a navigation node.\nIt is responsible for rendering individual navigation node headers within the navigation tree.\nIt provides dynamic styling, interactivity, and integration with features like bookmarks and navigation state\nmanagement. Customization options are gathered by  <mkapi-api-link nav=\"@nav[mkdocs-ts]/DefaultLayout.NavHeader\" semantic=\"type-alias\">NavHeader</mkapi-api-link>  structure\n(defined by the attribute  `header`  of  <mkapi-api-link nav=\"@nav[mkdocs-ts].Navigation\" semantic=\"type-alias\">Navigation</mkapi-api-link>  node).\n\n\n**Structure**\n\nThe  `NavHeaderView`  is structured as a flexible, responsive layout:\n\n- **Icon**: Displays a custom icon, if provided by the node's header configuration.\n\n- **Title**: The name of the node, dynamically styled based on the node's selected state.\n\n- **Bookmark**: Displays a bookmark indicator or action, if  `bookmarks$`  is provided.\n\n- **Actions**: Additional user-defined actions can be added to the header.\n\n- **Expand/Collapse Control**: For nodes with children, a toggle is rendered to expand or collapse the node's\nsubtree.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "NavHeaderView",
            "navPath": "@nav[mkdocs-ts]/DefaultLayout.NavHeaderView",
            "attributes": [
                {
                    "name": "children",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Children of the element.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "NavHeaderView.children",
                    "navPath": "@nav[mkdocs-ts]/DefaultLayout.NavHeaderView.children",
                    "code": {
                        "filePath": "src/lib/default-layout/nav-header.view.ts",
                        "declaration": "public readonly children: ChildrenLike",
                        "implementation": "",
                        "startLine": 171,
                        "endLine": 172,
                        "references": {
                            "children": "@nav[mkdocs-ts]/DefaultLayout.NavHeaderView.children",
                            "ChildrenLike": "/apps/@rx-vdom/doc/latest?nav=/api.ChildrenLike",
                            "VirtualDOM.children": "/apps/@rx-vdom/doc/latest?nav=/api.VirtualDOM.children"
                        }
                    }
                },
                {
                    "name": "class",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The class associated with the element, equivalent to the  `className`  property of  `HTMLElement` .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "NavHeaderView.class",
                    "navPath": "@nav[mkdocs-ts]/DefaultLayout.NavHeaderView.class",
                    "code": {
                        "filePath": "src/lib/default-layout/nav-header.view.ts",
                        "declaration": "public readonly class: AttributeLike<string>",
                        "implementation": "",
                        "startLine": 169,
                        "endLine": 170,
                        "references": {
                            "class": "@nav[mkdocs-ts]/DefaultLayout.NavHeaderView.class",
                            "AttributeLike": "/apps/@rx-vdom/doc/latest?nav=/api.AttributeLike"
                        }
                    }
                },
                {
                    "name": "href",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Returns the hyperlink's URL.\n\nCan be set, to change the URL.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/href)",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "NavHeaderView.href",
                    "navPath": "@nav[mkdocs-ts]/DefaultLayout.NavHeaderView.href",
                    "code": {
                        "filePath": "src/lib/default-layout/nav-header.view.ts",
                        "declaration": "public readonly href: string",
                        "implementation": "",
                        "startLine": 168,
                        "endLine": 169,
                        "references": {
                            "href": "@nav[mkdocs-ts]/DefaultLayout.NavHeaderView.href"
                        }
                    }
                },
                {
                    "name": "onclick",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/click_event)",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "NavHeaderView.onclick",
                    "navPath": "@nav[mkdocs-ts]/DefaultLayout.NavHeaderView.onclick",
                    "code": {
                        "filePath": "src/lib/default-layout/nav-header.view.ts",
                        "declaration": "public readonly onclick: (e: MouseEvent) => void",
                        "implementation": "",
                        "startLine": 173,
                        "endLine": 174,
                        "references": {
                            "onclick": "@nav[mkdocs-ts]/DefaultLayout.NavHeaderView.onclick",
                            "MouseEvent": "https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent"
                        }
                    }
                },
                {
                    "name": "style",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The style associated with the element. Typically, for a static value:\n ```typescript\n{\n     tag: 'div',\n     style: {\n         backgroundColor: 'blue'\n     }\n}\n``` \nFor more details on hyphenated properties, see  <mkapi-ext-link href=\"/apps/@rx-vdom/doc/latest?nav=/api.CSSAttribute\">CSSAttribute</mkapi-ext-link> .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "NavHeaderView.style",
                    "navPath": "@nav[mkdocs-ts]/DefaultLayout.NavHeaderView.style",
                    "code": {
                        "filePath": "src/lib/default-layout/nav-header.view.ts",
                        "declaration": "public readonly style: CSSAttribute",
                        "implementation": "",
                        "startLine": 172,
                        "endLine": 173,
                        "references": {
                            "style": "@nav[mkdocs-ts]/DefaultLayout.NavHeaderView.style",
                            "CSSAttribute": "/apps/@rx-vdom/doc/latest?nav=/api.CSSAttribute"
                        }
                    }
                },
                {
                    "name": "tag",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The tag of the element, equivalent to the  `tagName`  property of  `HTMLElement` .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "NavHeaderView.tag",
                    "navPath": "@nav[mkdocs-ts]/DefaultLayout.NavHeaderView.tag",
                    "code": {
                        "filePath": "src/lib/default-layout/nav-header.view.ts",
                        "declaration": "public readonly tag = 'a'",
                        "implementation": "",
                        "startLine": 167,
                        "endLine": 168,
                        "references": {
                            "tag": "@nav[mkdocs-ts]/DefaultLayout.NavHeaderView.tag",
                            "VirtualDOM.tag": "/apps/@rx-vdom/doc/latest?nav=/api.VirtualDOM.tag"
                        }
                    }
                },
                {
                    "name": "CssSelector",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Component's class name for CSS query.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "NavHeaderView.CssSelector",
                    "navPath": "@nav[mkdocs-ts]/DefaultLayout.NavHeaderView.CssSelector",
                    "code": {
                        "filePath": "src/lib/default-layout/nav-header.view.ts",
                        "declaration": "static readonly CssSelector = 'mkdocs-NavHeaderView'",
                        "implementation": "",
                        "startLine": 164,
                        "endLine": 165,
                        "references": {
                            "CssSelector": "@nav[mkdocs-ts]/DefaultLayout.NavHeaderView.CssSelector"
                        }
                    }
                }
            ],
            "callables": [
                {
                    "name": "constructor",
                    "documentation": {
                        "sections": [
                            {
                                "content": "Initializes a new instance.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            },
                            {
                                "title": "Arguments",
                                "content": "\n*  **bookmarks$**: State of bookmarked URLs.\n*  **node**: The node.\n*  **router**: The application router.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "arguments",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "NavHeaderView.constructor",
                    "navPath": "@nav[mkdocs-ts]/DefaultLayout.NavHeaderView.constructor",
                    "code": {
                        "filePath": "src/lib/default-layout/nav-header.view.ts",
                        "declaration": "constructor({\n    node,\n    router,\n    bookmarks$,\n}: {\n    node: NavNodeResolved<unknown, NavHeader>\n    router: Router\n    bookmarks$?: BehaviorSubject<string[]>\n})",
                        "implementation": "constructor({\n    node,\n    router,\n    bookmarks$,\n}: {\n    node: NavNodeResolved<unknown, NavHeader>\n    router: Router\n    bookmarks$?: BehaviorSubject<string[]>\n}) {\n    const header =\n        typeof node.header === 'function'\n            ? node.header({ router })\n            : node.header\n    this.class = header?.wrapperClass ?? NavHeaderView.DefaultWrapperClass\n\n    this.style =\n        node.id === '/'\n            ? {\n                  textDecoration: 'none',\n                  color: 'inherit',\n                  fontWeight: 'bolder' as const,\n              }\n            : {\n                  textDecoration: 'none',\n                  color: 'inherit',\n              }\n    const bookmark = bookmarks$\n        ? bookmarkView({ node, bookmarks$ })\n        : undefined\n\n    const sep: (i: number) => AnyVirtualDOM = (i) => ({\n        tag: 'div',\n        class: `mx-${String(i)}`,\n    })\n    const hExpand: AnyVirtualDOM = {\n        tag: 'div',\n        class: 'flex-grow-1',\n    }\n    this.children = [\n        header?.icon ?? undefined,\n        sep(2),\n        {\n            tag: 'div',\n            class: attr$({\n                source$: router.explorerState.selectedNode$,\n                vdomMap: (selected): string =>\n                    selected.id === node.id ? 'font-weight-bold' : '',\n                wrapper: (d) => `${d} mkdocs-NavigationHeader-title`,\n            }),\n            children: [\n                header?.name ?? { tag: 'div', innerText: node.name },\n            ],\n        },\n        sep(1),\n        bookmark\n            ? child$({\n                  source$: router.explorerState.selectedNode$,\n                  vdomMap: (selected) =>\n                      selected.id === node.id ? bookmark : { tag: 'div' },\n              })\n            : undefined,\n        hExpand,\n        {\n            tag: 'div',\n            class: 'mkdocs-NavigationHeader-actions',\n            children: header?.actions ?? [],\n        },\n        node.children\n            ? new HandlerView({\n                  node: node,\n                  expandedNodes$: router.explorerState.expandedNodes$,\n              })\n            : undefined,\n    ]\n    this.href = `${router.basePath}?nav=` + node.href\n    this.onclick = (e) => {\n        e.preventDefault()\n        router.fireNavigateTo({ path: node.href, issuer: 'navigation' })\n    }\n}",
                        "startLine": 183,
                        "endLine": 263,
                        "references": {
                            "NavHeaderView": "@nav[mkdocs-ts]/DefaultLayout.NavHeaderView",
                            "NavNodeResolved": "@nav[mkdocs-ts].NavNodeResolved",
                            "NavHeader": "@nav[mkdocs-ts]/DefaultLayout.NavHeader",
                            "Router": "@nav[mkdocs-ts].Router",
                            "BehaviorSubject": "https://www.learnrxjs.io/learn-rxjs/subjects/subject"
                        }
                    },
                    "semantic": {
                        "role": "constructor",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    }
                }
            ],
            "code": {
                "filePath": "src/lib/default-layout/nav-header.view.ts",
                "declaration": "export class NavHeaderView implements VirtualDOM<'a'>",
                "implementation": "export class NavHeaderView implements VirtualDOM<'a'> {\n    /**\n     * Component's class name for CSS query.\n     */\n    static readonly CssSelector = 'mkdocs-NavHeaderView'\n\n    static readonly DefaultWrapperClass = `${NavHeaderView.CssSelector} w-100 d-flex align-items-center fv-pointer pe-2`\n    public readonly tag = 'a'\n    public readonly href: string\n    public readonly class: AttributeLike<string>\n\n    public readonly children: ChildrenLike\n    public readonly style: CSSAttribute\n    public readonly onclick: (e: MouseEvent) => void\n\n    /**\n     * Initializes a new instance.\n     *\n     * @param _p\n     * @param _p.node  The node.\n     * @param _p.router The application router.\n     * @param _p.bookmarks$ State of bookmarked URLs.\n     */\n    constructor({\n        node,\n        router,\n        bookmarks$,\n    }: {\n        node: NavNodeResolved<unknown, NavHeader>\n        router: Router\n        bookmarks$?: BehaviorSubject<string[]>\n    }) {\n        const header =\n            typeof node.header === 'function'\n                ? node.header({ router })\n                : node.header\n        this.class = header?.wrapperClass ?? NavHeaderView.DefaultWrapperClass\n\n        this.style =\n            node.id === '/'\n                ? {\n                      textDecoration: 'none',\n                      color: 'inherit',\n                      fontWeight: 'bolder' as const,\n                  }\n                : {\n                      textDecoration: 'none',\n                      color: 'inherit',\n                  }\n        const bookmark = bookmarks$\n            ? bookmarkView({ node, bookmarks$ })\n            : undefined\n\n        const sep: (i: number) => AnyVirtualDOM = (i) => ({\n            tag: 'div',\n            class: `mx-${String(i)}`,\n        })\n        const hExpand: AnyVirtualDOM = {\n            tag: 'div',\n            class: 'flex-grow-1',\n        }\n        this.children = [\n            header?.icon ?? undefined,\n            sep(2),\n            {\n                tag: 'div',\n                class: attr$({\n                    source$: router.explorerState.selectedNode$,\n                    vdomMap: (selected): string =>\n                        selected.id === node.id ? 'font-weight-bold' : '',\n                    wrapper: (d) => `${d} mkdocs-NavigationHeader-title`,\n                }),\n                children: [\n                    header?.name ?? { tag: 'div', innerText: node.name },\n                ],\n            },\n            sep(1),\n            bookmark\n                ? child$({\n                      source$: router.explorerState.selectedNode$,\n                      vdomMap: (selected) =>\n                          selected.id === node.id ? bookmark : { tag: 'div' },\n                  })\n                : undefined,\n            hExpand,\n            {\n                tag: 'div',\n                class: 'mkdocs-NavigationHeader-actions',\n                children: header?.actions ?? [],\n            },\n            node.children\n                ? new HandlerView({\n                      node: node,\n                      expandedNodes$: router.explorerState.expandedNodes$,\n                  })\n                : undefined,\n        ]\n        this.href = `${router.basePath}?nav=` + node.href\n        this.onclick = (e) => {\n            e.preventDefault()\n            router.fireNavigateTo({ path: node.href, issuer: 'navigation' })\n        }\n    }\n}",
                "startLine": 160,
                "endLine": 264,
                "references": {
                    "NavHeaderView": "@nav[mkdocs-ts]/DefaultLayout.NavHeaderView",
                    "NavNodeResolved": "@nav[mkdocs-ts].NavNodeResolved",
                    "NavHeader": "@nav[mkdocs-ts]/DefaultLayout.NavHeader",
                    "Router": "@nav[mkdocs-ts].Router",
                    "BehaviorSubject": "https://www.learnrxjs.io/learn-rxjs/subjects/subject",
                    "ChildrenLike": "/apps/@rx-vdom/doc/latest?nav=/api.ChildrenLike",
                    "VirtualDOM.children": "/apps/@rx-vdom/doc/latest?nav=/api.VirtualDOM.children",
                    "AttributeLike": "/apps/@rx-vdom/doc/latest?nav=/api.AttributeLike",
                    "MouseEvent": "https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent",
                    "CSSAttribute": "/apps/@rx-vdom/doc/latest?nav=/api.CSSAttribute",
                    "VirtualDOM.tag": "/apps/@rx-vdom/doc/latest?nav=/api.VirtualDOM.tag",
                    "VirtualDOM": "/apps/@rx-vdom/doc/latest?nav=/api.VirtualDOM"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "NavigationView",
            "documentation": {
                "sections": [
                    {
                        "content": "Represents the navigation view of the application, displaying a hierarchical structure of navigation nodes.\n\nIt is the primary component for presenting and interacting with the application's navigation tree.\nIt integrates seamlessly with the router to reflect the current navigation state and enables user interaction with\nnavigation nodes.\n\nEach node in the tree includes a customizable header generated from the attribute  `header`  of  <mkapi-api-link nav=\"@nav[mkdocs-ts].Navigation\" semantic=\"type-alias\">Navigation</mkapi-api-link> \n(see  <mkapi-api-link nav=\"@nav[mkdocs-ts]/DefaultLayout.NavHeaderView\" semantic=\"class\">NavHeaderView</mkapi-api-link> ).\nIf a navigation node is not yet resolved, a spinner is displayed in place of the node's header.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "NavigationView",
            "navPath": "@nav[mkdocs-ts]/DefaultLayout.NavigationView",
            "attributes": [
                {
                    "name": "children",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Children of the element.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "NavigationView.children",
                    "navPath": "@nav[mkdocs-ts]/DefaultLayout.NavigationView.children",
                    "code": {
                        "filePath": "src/lib/default-layout/navigation.view.ts",
                        "declaration": "public readonly children: ChildrenLike",
                        "implementation": "",
                        "startLine": 36,
                        "endLine": 37,
                        "references": {
                            "children": "@nav[mkdocs-ts]/DefaultLayout.NavigationView.children",
                            "ChildrenLike": "/apps/@rx-vdom/doc/latest?nav=/api.ChildrenLike",
                            "VirtualDOM.children": "/apps/@rx-vdom/doc/latest?nav=/api.VirtualDOM.children"
                        }
                    }
                },
                {
                    "name": "class",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The class associated with the element, equivalent to the  `className`  property of  `HTMLElement` .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "NavigationView.class",
                    "navPath": "@nav[mkdocs-ts]/DefaultLayout.NavigationView.class",
                    "code": {
                        "filePath": "src/lib/default-layout/navigation.view.ts",
                        "declaration": "public readonly class: string = `${NavigationView.CssSelector} mkdocs-bg-5 mkdocs-text-5 px-1 h-100 overflow-auto mkdocs-thin-v-scroller`",
                        "implementation": "",
                        "startLine": 34,
                        "endLine": 35,
                        "references": {
                            "class": "@nav[mkdocs-ts]/DefaultLayout.NavigationView.class"
                        }
                    }
                },
                {
                    "name": "style",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The style associated with the element. Typically, for a static value:\n ```typescript\n{\n     tag: 'div',\n     style: {\n         backgroundColor: 'blue'\n     }\n}\n``` \nFor more details on hyphenated properties, see  <mkapi-ext-link href=\"/apps/@rx-vdom/doc/latest?nav=/api.CSSAttribute\">CSSAttribute</mkapi-ext-link> .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "NavigationView.style",
                    "navPath": "@nav[mkdocs-ts]/DefaultLayout.NavigationView.style",
                    "code": {
                        "filePath": "src/lib/default-layout/navigation.view.ts",
                        "declaration": "public readonly style: CSSAttribute",
                        "implementation": "",
                        "startLine": 35,
                        "endLine": 36,
                        "references": {
                            "style": "@nav[mkdocs-ts]/DefaultLayout.NavigationView.style",
                            "CSSAttribute": "/apps/@rx-vdom/doc/latest?nav=/api.CSSAttribute"
                        }
                    }
                },
                {
                    "name": "tag",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The tag of the element, equivalent to the  `tagName`  property of  `HTMLElement` .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "NavigationView.tag",
                    "navPath": "@nav[mkdocs-ts]/DefaultLayout.NavigationView.tag",
                    "code": {
                        "filePath": "src/lib/default-layout/navigation.view.ts",
                        "declaration": "public readonly tag = 'div'",
                        "implementation": "",
                        "startLine": 33,
                        "endLine": 34,
                        "references": {
                            "tag": "@nav[mkdocs-ts]/DefaultLayout.NavigationView.tag",
                            "VirtualDOM.tag": "/apps/@rx-vdom/doc/latest?nav=/api.VirtualDOM.tag"
                        }
                    }
                },
                {
                    "name": "CssSelector",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Component's class name for CSS query.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "NavigationView.CssSelector",
                    "navPath": "@nav[mkdocs-ts]/DefaultLayout.NavigationView.CssSelector",
                    "code": {
                        "filePath": "src/lib/default-layout/navigation.view.ts",
                        "declaration": "static readonly CssSelector = 'mkdocs-NavigationView'",
                        "implementation": "",
                        "startLine": 30,
                        "endLine": 31,
                        "references": {
                            "CssSelector": "@nav[mkdocs-ts]/DefaultLayout.NavigationView.CssSelector"
                        }
                    }
                }
            ],
            "callables": [
                {
                    "name": "constructor",
                    "documentation": {
                        "sections": [
                            {
                                "content": "Initializes a new instance.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            },
                            {
                                "title": "Arguments",
                                "content": "\n*  **bookmarks$**: State of bookmarked URLs.\n*  **displayOptions**: Layout display options.\n*  **forceNavDisplayMode**: If defined, force the Nav display mode to this value.\n*  **forceTocDisplayMode**: If defined, force the TOC display mode to this value.\n*  **navMaxWidth**: Maximum width for the navigation panel in pixel.\n*  **navMinWidth**: Minimum width for the navigation panel in CSS unit (e.g.  `25rem` ).\n*  **pageVertPadding**: Page's vertical padding.\n*  **pageWidth**: Page's width.\n*  **sidePanelsZIndex**: Z-Index for the navigation & TOC panels.\n*  **tocMaxWidth**: Maximum width for the TOC panel in pixel.\n*  **tocMinWidth**: Minimum width for the TOC panel in pixel.\n*  **toggleNavWidth**: Screen size in pixel transitioning from pined Navigation panel, to\ncollapsable one.\n*  **toggleTocWidth**: Screen size in pixel transitioning from pined TOC panel, to\ncollapsable one.\n*  **translationTime**: Translation duration for panels in ms.\n*  **router**: Application router.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "arguments",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "NavigationView.constructor",
                    "navPath": "@nav[mkdocs-ts]/DefaultLayout.NavigationView.constructor",
                    "code": {
                        "filePath": "src/lib/default-layout/navigation.view.ts",
                        "declaration": "constructor(params: {\n    router: Router<unknown, NavHeader>\n    displayOptions: DisplayOptions\n    bookmarks$?: BehaviorSubject<string[]>\n})",
                        "implementation": "constructor(params: {\n    router: Router<unknown, NavHeader>\n    displayOptions: DisplayOptions\n    bookmarks$?: BehaviorSubject<string[]>\n}) {\n    Object.assign(this, params)\n    this.style = {\n        minWidth: params.displayOptions.navMinWidth,\n    }\n    this.children = [\n        new ImmutableTree.View({\n            state: this.router.explorerState,\n            headerView: (_, node) => {\n                if (node instanceof NavNodePromise) {\n                    return faIconTyped('fa-spinner', { spin: true })\n                }\n                if (node.href === '/') {\n                    return EmptyDiv\n                }\n                return new NavHeaderView({\n                    node,\n                    router: this.router,\n                    bookmarks$: this.bookmarks$,\n                })\n            },\n            options: {\n                autoScroll: {\n                    trigger: 'not-visible',\n                    top: 50,\n                },\n            },\n        }),\n    ]\n}",
                        "startLine": 48,
                        "endLine": 82,
                        "references": {
                            "NavigationView": "@nav[mkdocs-ts]/DefaultLayout.NavigationView",
                            "DisplayMode": "@nav[mkdocs-ts]/DefaultLayout.DisplayMode",
                            "Router": "@nav[mkdocs-ts].Router",
                            "NavHeader": "@nav[mkdocs-ts]/DefaultLayout.NavHeader",
                            "BehaviorSubject": "https://www.learnrxjs.io/learn-rxjs/subjects/subject"
                        }
                    },
                    "semantic": {
                        "role": "constructor",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    }
                }
            ],
            "code": {
                "filePath": "src/lib/default-layout/navigation.view.ts",
                "declaration": "export class NavigationView implements VirtualDOM<'div'>",
                "implementation": "export class NavigationView implements VirtualDOM<'div'> {\n    /**\n     * Component's class name for CSS query.\n     */\n    static readonly CssSelector = 'mkdocs-NavigationView'\n    public readonly router: Router<unknown, NavHeader>\n\n    public readonly tag = 'div'\n    public readonly class: string = `${NavigationView.CssSelector} mkdocs-bg-5 mkdocs-text-5 px-1 h-100 overflow-auto mkdocs-thin-v-scroller`\n    public readonly style: CSSAttribute\n    public readonly children: ChildrenLike\n    public readonly displayOptions: DisplayOptions\n    public readonly bookmarks$?: BehaviorSubject<string[]>\n\n    /**\n     * Initializes a new instance.\n     *\n     * @param params\n     * @param params.router Application router.\n     * @param params.displayOptions Layout display options.\n     * @param params.bookmarks$ State of bookmarked URLs.\n     */\n    constructor(params: {\n        router: Router<unknown, NavHeader>\n        displayOptions: DisplayOptions\n        bookmarks$?: BehaviorSubject<string[]>\n    }) {\n        Object.assign(this, params)\n        this.style = {\n            minWidth: params.displayOptions.navMinWidth,\n        }\n        this.children = [\n            new ImmutableTree.View({\n                state: this.router.explorerState,\n                headerView: (_, node) => {\n                    if (node instanceof NavNodePromise) {\n                        return faIconTyped('fa-spinner', { spin: true })\n                    }\n                    if (node.href === '/') {\n                        return EmptyDiv\n                    }\n                    return new NavHeaderView({\n                        node,\n                        router: this.router,\n                        bookmarks$: this.bookmarks$,\n                    })\n                },\n                options: {\n                    autoScroll: {\n                        trigger: 'not-visible',\n                        top: 50,\n                    },\n                },\n            }),\n        ]\n    }\n}",
                "startLine": 26,
                "endLine": 83,
                "references": {
                    "NavigationView": "@nav[mkdocs-ts]/DefaultLayout.NavigationView",
                    "DisplayMode": "@nav[mkdocs-ts]/DefaultLayout.DisplayMode",
                    "Router": "@nav[mkdocs-ts].Router",
                    "NavHeader": "@nav[mkdocs-ts]/DefaultLayout.NavHeader",
                    "BehaviorSubject": "https://www.learnrxjs.io/learn-rxjs/subjects/subject",
                    "ChildrenLike": "/apps/@rx-vdom/doc/latest?nav=/api.ChildrenLike",
                    "VirtualDOM.children": "/apps/@rx-vdom/doc/latest?nav=/api.VirtualDOM.children",
                    "CSSAttribute": "/apps/@rx-vdom/doc/latest?nav=/api.CSSAttribute",
                    "VirtualDOM.tag": "/apps/@rx-vdom/doc/latest?nav=/api.VirtualDOM.tag",
                    "VirtualDOM": "/apps/@rx-vdom/doc/latest?nav=/api.VirtualDOM"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "PageView",
            "documentation": {
                "sections": [
                    {
                        "content": "The main content of the page.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "PageView",
            "navPath": "@nav[mkdocs-ts]/DefaultLayout.PageView",
            "attributes": [
                {
                    "name": "children",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Children of the element.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "PageView.children",
                    "navPath": "@nav[mkdocs-ts]/DefaultLayout.PageView.children",
                    "code": {
                        "filePath": "src/lib/default-layout/page.view.ts",
                        "declaration": "public readonly children: ChildrenLike",
                        "implementation": "",
                        "startLine": 67,
                        "endLine": 68,
                        "references": {
                            "children": "@nav[mkdocs-ts]/DefaultLayout.PageView.children",
                            "ChildrenLike": "/apps/@rx-vdom/doc/latest?nav=/api.ChildrenLike",
                            "VirtualDOM.children": "/apps/@rx-vdom/doc/latest?nav=/api.VirtualDOM.children"
                        }
                    }
                },
                {
                    "name": "class",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The class associated with the element, equivalent to the  `className`  property of  `HTMLElement` .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "PageView.class",
                    "navPath": "@nav[mkdocs-ts]/DefaultLayout.PageView.class",
                    "code": {
                        "filePath": "src/lib/default-layout/page.view.ts",
                        "declaration": "public readonly class = `${PageView.CssSelector} w-100 mkdocs-ts-page text-justify`",
                        "implementation": "",
                        "startLine": 66,
                        "endLine": 67,
                        "references": {
                            "class": "@nav[mkdocs-ts]/DefaultLayout.PageView.class"
                        }
                    }
                },
                {
                    "name": "connectedCallback",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Lifecycle hook called just after the element has been attached to the document's DOM.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "PageView.connectedCallback",
                    "navPath": "@nav[mkdocs-ts]/DefaultLayout.PageView.connectedCallback",
                    "code": {
                        "filePath": "src/lib/default-layout/page.view.ts",
                        "declaration": "public readonly connectedCallback: (html: RxHTMLElement<'div'>) => void",
                        "implementation": "",
                        "startLine": 71,
                        "endLine": 72,
                        "references": {
                            "connectedCallback": "@nav[mkdocs-ts]/DefaultLayout.PageView.connectedCallback",
                            "RxHTMLElement": "/apps/@rx-vdom/doc/latest?nav=/api.RxHTMLElement",
                            "VirtualDOM.connectedCallback": "/apps/@rx-vdom/doc/latest?nav=/api.VirtualDOM.connectedCallback"
                        }
                    }
                },
                {
                    "name": "tag",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The tag of the element, equivalent to the  `tagName`  property of  `HTMLElement` .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "PageView.tag",
                    "navPath": "@nav[mkdocs-ts]/DefaultLayout.PageView.tag",
                    "code": {
                        "filePath": "src/lib/default-layout/page.view.ts",
                        "declaration": "public readonly tag = 'div'",
                        "implementation": "",
                        "startLine": 65,
                        "endLine": 66,
                        "references": {
                            "tag": "@nav[mkdocs-ts]/DefaultLayout.PageView.tag",
                            "VirtualDOM.tag": "/apps/@rx-vdom/doc/latest?nav=/api.VirtualDOM.tag"
                        }
                    }
                },
                {
                    "name": "CssSelector",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Component's class name for CSS query.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "PageView.CssSelector",
                    "navPath": "@nav[mkdocs-ts]/DefaultLayout.PageView.CssSelector",
                    "code": {
                        "filePath": "src/lib/default-layout/page.view.ts",
                        "declaration": "static readonly CssSelector = 'mkdocs-PageView'",
                        "implementation": "",
                        "startLine": 63,
                        "endLine": 64,
                        "references": {
                            "CssSelector": "@nav[mkdocs-ts]/DefaultLayout.PageView.CssSelector"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/default-layout/page.view.ts",
                "declaration": "export class PageView implements VirtualDOM<'div'>",
                "implementation": "export class PageView implements VirtualDOM<'div'> {\n    /**\n     * Component's class name for CSS query.\n     */\n    static readonly CssSelector = 'mkdocs-PageView'\n    public readonly router: Router<NavLayout>\n    public readonly tag = 'div'\n    public readonly class = `${PageView.CssSelector} w-100 mkdocs-ts-page text-justify`\n    public readonly children: ChildrenLike\n\n    public readonly content$ = new ReplaySubject<HTMLElement>(1)\n    public readonly filter?: (target: Target) => boolean\n    public readonly connectedCallback: (html: RxHTMLElement<'div'>) => void\n\n    constructor(\n        params: {\n            router: Router<NavLayout>\n            filter?: (target: Target) => boolean\n        },\n        ctx?: ContextTrait,\n    ) {\n        Object.assign(this, params)\n        ctx = ctx ?? new NoContext()\n        const context = ctx.start('new PageView', ['PageView'])\n        const filterFct = this.filter ?? (() => true)\n        const maybeError$ = child$({\n            source$: this.router.target$,\n            vdomMap: (target) => {\n                if (isResolvedTarget(target)) {\n                    return { tag: 'div' }\n                }\n                if (target.reason === 'NotFound') {\n                    return new UnresolvedPageView({ path: target.path })\n                }\n                return new FuturePageView()\n            },\n        })\n        const pending$ = new BehaviorSubject(false)\n\n        this.children = [\n            maybeError$,\n            child$({\n                source$: pending$,\n                vdomMap: (pending) => {\n                    return pending ? new FuturePageView() : EmptyDiv\n                },\n            }),\n            child$({\n                source$: this.router.target$.pipe(\n                    tap((t) => {\n                        context.info(`PageUpdate: Received target ${t.path}`, t)\n                        if ('reason' in t) {\n                            context.info(`PageUpdate: target is ${t.reason}`)\n                        }\n                    }),\n                    filter((target) => {\n                        return isResolvedTarget(target)\n                    }),\n                    distinctUntilChanged((prev, current) => {\n                        if (current.forceReload) {\n                            context.info(\n                                `PageUpdate: Option 'forceReload' is activated on ${current.path} `,\n                            )\n                            return false\n                        }\n                        const prevParams = JSON.stringify(prev.parameters ?? {})\n                        const currParams = JSON.stringify(\n                            current.parameters ?? {},\n                        )\n                        return (\n                            prev.path === current.path &&\n                            prevParams === currParams\n                        )\n                    }),\n                    tap((t) => {\n                        context.info(`PageUpdate: Distinct target ${t.path}`)\n                    }),\n                    filter(filterFct),\n                    filter((target) => {\n                        return hasContentViewTrait(target.node)\n                    }),\n                    tap(() => {\n                        pending$.next(true)\n                    }),\n                    switchMap((target: Target & { node: ContentTrait }) => {\n                        context.info('PageUpdate: New target to display')\n                        const contentGetter =\n                            typeof target.node.layout === 'function' ||\n                            typeof target.node.layout === 'string'\n                                ? target.node.layout\n                                : target.node.layout.content\n\n                        const html =\n                            typeof contentGetter === 'string'\n                                ? parseMdFromUrl({\n                                      url: contentGetter,\n                                      router: this.router,\n                                  })\n                                : contentGetter({\n                                      router: this.router,\n                                  })\n                        if (html instanceof Promise) {\n                            return from(html).pipe(\n                                map((html) => ({ html, ...target })),\n                            )\n                        }\n                        if (html instanceof Observable) {\n                            return html.pipe(take(1)).pipe(\n                                map((html) => ({\n                                    html,\n                                    ...target,\n                                })),\n                            )\n                        }\n                        return of(html).pipe(\n                            map((html) => ({ html, ...target })),\n                        )\n                    }),\n                ),\n                vdomMap: (destination) => {\n                    pending$.next(false)\n                    return {\n                        tag: 'div',\n                        class: attr$({\n                            source$: pending$,\n                            vdomMap: (pending) => (pending ? 'd-none' : ''),\n                        }),\n                        children: [destination.html],\n                        connectedCallback: (page) => {\n                            if (destination.sectionId) {\n                                this.router.scrollTo(destination.sectionId)\n                            }\n                            this.content$.next(\n                                // This is the `html` content returned by `destination.html`\n                                page.firstElementChild as HTMLElement,\n                            )\n                        },\n                    }\n                },\n            }),\n        ]\n        context.exit()\n    }\n}",
                "startLine": 59,
                "endLine": 203,
                "references": {
                    "PageView": "@nav[mkdocs-ts]/DefaultLayout.PageView",
                    "Target": "@nav[mkdocs-ts].Target",
                    "Router": "@nav[mkdocs-ts].Router",
                    "NavLayout": "@nav[mkdocs-ts]/DefaultLayout.NavLayout",
                    "ContextTrait": "@nav[mkdocs-ts].ContextTrait",
                    "ChildrenLike": "/apps/@rx-vdom/doc/latest?nav=/api.ChildrenLike",
                    "VirtualDOM.children": "/apps/@rx-vdom/doc/latest?nav=/api.VirtualDOM.children",
                    "RxHTMLElement": "/apps/@rx-vdom/doc/latest?nav=/api.RxHTMLElement",
                    "VirtualDOM.connectedCallback": "/apps/@rx-vdom/doc/latest?nav=/api.VirtualDOM.connectedCallback",
                    "ReplaySubject": "https://www.learnrxjs.io/learn-rxjs/subjects/replaysubject",
                    "HTMLElement": "https://www.typescriptlang.org/docs/handbook/dom-manipulation.html",
                    "VirtualDOM.tag": "/apps/@rx-vdom/doc/latest?nav=/api.VirtualDOM.tag",
                    "VirtualDOM": "/apps/@rx-vdom/doc/latest?nav=/api.VirtualDOM"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "TocItemView",
            "documentation": {
                "sections": [
                    {
                        "content": "Represents the view of an item in the  <mkapi-api-link nav=\"@nav[mkdocs-ts]/DefaultLayout.TOCView\" semantic=\"class\">TOCView</mkapi-api-link> .\nIt can be customized by providing a  `domConvertor`  function to the constructor.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "TocItemView",
            "navPath": "@nav[mkdocs-ts]/DefaultLayout.TocItemView",
            "attributes": [
                {
                    "name": "children",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Children of the element.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "TocItemView.children",
                    "navPath": "@nav[mkdocs-ts]/DefaultLayout.TocItemView.children",
                    "code": {
                        "filePath": "src/lib/default-layout/toc.view.ts",
                        "declaration": "public readonly children: ChildrenLike",
                        "implementation": "",
                        "startLine": 279,
                        "endLine": 280,
                        "references": {
                            "children": "@nav[mkdocs-ts]/DefaultLayout.TocItemView.children",
                            "ChildrenLike": "/apps/@rx-vdom/doc/latest?nav=/api.ChildrenLike",
                            "VirtualDOM.children": "/apps/@rx-vdom/doc/latest?nav=/api.VirtualDOM.children"
                        }
                    }
                },
                {
                    "name": "class",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The class associated with the element, equivalent to the  `className`  property of  `HTMLElement` .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "TocItemView.class",
                    "navPath": "@nav[mkdocs-ts]/DefaultLayout.TocItemView.class",
                    "code": {
                        "filePath": "src/lib/default-layout/toc.view.ts",
                        "declaration": "public readonly class: string",
                        "implementation": "",
                        "startLine": 277,
                        "endLine": 278,
                        "references": {
                            "class": "@nav[mkdocs-ts]/DefaultLayout.TocItemView.class"
                        }
                    }
                },
                {
                    "name": "style",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The style associated with the element. Typically, for a static value:\n ```typescript\n{\n     tag: 'div',\n     style: {\n         backgroundColor: 'blue'\n     }\n}\n``` \nFor more details on hyphenated properties, see  <mkapi-ext-link href=\"/apps/@rx-vdom/doc/latest?nav=/api.CSSAttribute\">CSSAttribute</mkapi-ext-link> .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "TocItemView.style",
                    "navPath": "@nav[mkdocs-ts]/DefaultLayout.TocItemView.style",
                    "code": {
                        "filePath": "src/lib/default-layout/toc.view.ts",
                        "declaration": "public readonly style: CSSAttribute",
                        "implementation": "",
                        "startLine": 278,
                        "endLine": 279,
                        "references": {
                            "style": "@nav[mkdocs-ts]/DefaultLayout.TocItemView.style",
                            "CSSAttribute": "/apps/@rx-vdom/doc/latest?nav=/api.CSSAttribute"
                        }
                    }
                },
                {
                    "name": "tag",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The tag of the element, equivalent to the  `tagName`  property of  `HTMLElement` .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "TocItemView.tag",
                    "navPath": "@nav[mkdocs-ts]/DefaultLayout.TocItemView.tag",
                    "code": {
                        "filePath": "src/lib/default-layout/toc.view.ts",
                        "declaration": "public readonly tag = 'div'",
                        "implementation": "",
                        "startLine": 276,
                        "endLine": 277,
                        "references": {
                            "tag": "@nav[mkdocs-ts]/DefaultLayout.TocItemView.tag",
                            "VirtualDOM.tag": "/apps/@rx-vdom/doc/latest?nav=/api.VirtualDOM.tag"
                        }
                    }
                },
                {
                    "name": "CssSelector",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Component's class name for CSS query.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "TocItemView.CssSelector",
                    "navPath": "@nav[mkdocs-ts]/DefaultLayout.TocItemView.CssSelector",
                    "code": {
                        "filePath": "src/lib/default-layout/toc.view.ts",
                        "declaration": "static readonly CssSelector = 'mkdocs-TocItemView'",
                        "implementation": "",
                        "startLine": 275,
                        "endLine": 276,
                        "references": {
                            "CssSelector": "@nav[mkdocs-ts]/DefaultLayout.TocItemView.CssSelector"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/default-layout/toc.view.ts",
                "declaration": "export class TocItemView implements VirtualDOM<'div'>",
                "implementation": "export class TocItemView implements VirtualDOM<'div'> {\n    /**\n     * Component's class name for CSS query.\n     */\n    static readonly CssSelector = 'mkdocs-TocItemView'\n    public readonly tag = 'div'\n    public readonly class: string\n    public readonly style: CSSAttribute\n    public readonly children: ChildrenLike\n\n    /**\n     *\n     * @param _p\n     * @param _p.heading The heading.\n     * @param _p.index Heading's index in the page.\n     * @param _p.indexFirstVisibleHeading$ An observable tracking the index of the first visible heading on the page.\n     * This is updated dynamically as the user scrolls.\n     * @param _p.router The application's router instance.\n     * @param _p.domConvertor (Optional) A function to convert heading elements into TOC items.\n     */\n    constructor({\n        heading,\n        index,\n        indexFirstVisibleHeading$,\n        router,\n        domConvertor,\n    }: {\n        heading: HTMLHeadingElement\n        index: number\n        indexFirstVisibleHeading$: Observable<number>\n        router: Router\n        domConvertor?: (e: HTMLHeadingElement) => AnyVirtualDOM\n    }) {\n        const getText = (heading: HTMLElement) => {\n            if (heading.innerText) {\n                return heading.innerText\n            }\n            const firstTextElement = [...heading.children]\n                .filter((c) => c instanceof HTMLElement)\n                .find((c) => c.innerText !== '')\n            return firstTextElement?.innerText ?? ''\n        }\n        const defaultConv = (heading: HTMLElement) => ({\n            tag: 'div' as const,\n            class: '',\n            innerText: getText(heading),\n        })\n        const getItemClass = (firstIndex: number): string => {\n            if (index === firstIndex) {\n                return 'text-primary'\n            }\n            return index < firstIndex ? 'text-dark' : 'mkdocs-text-1'\n        }\n        this.style = ['H1', 'H2', 'H3', 'H4', 'H5'].includes(heading.tagName)\n            ? {\n                  paddingLeft:\n                      headingsPadding[heading.tagName as SupportedHeading],\n              }\n            : {}\n        this.class = `${TocItemView.CssSelector} ${heading.classList.value} pe-1`\n        this.children = [\n            {\n                tag: 'a' as const,\n                style: {\n                    textDecoration: 'none',\n                },\n                class: attr$({\n                    source$: indexFirstVisibleHeading$,\n                    vdomMap: getItemClass,\n                    wrapper: (d) => `${d} `,\n                }),\n                href: `${\n                    router.basePath\n                }?nav=${router.parseUrl().path}.${heading.id}`,\n                children: [(domConvertor ?? defaultConv)(heading)],\n                onclick: (ev) => {\n                    ev.preventDefault()\n                    router.scrollTo(heading)\n                },\n            },\n        ]\n    }\n}",
                "startLine": 271,
                "endLine": 354,
                "references": {
                    "TocItemView": "@nav[mkdocs-ts]/DefaultLayout.TocItemView",
                    "Router": "@nav[mkdocs-ts].Router",
                    "HTMLHeadingElement": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLHeadingElement",
                    "AnyVirtualDOM": "/apps/@rx-vdom/doc/latest?nav=/api.AnyVirtualDOM",
                    "Observable": "https://rxjs.dev/guide/observable",
                    "ChildrenLike": "/apps/@rx-vdom/doc/latest?nav=/api.ChildrenLike",
                    "VirtualDOM.children": "/apps/@rx-vdom/doc/latest?nav=/api.VirtualDOM.children",
                    "CSSAttribute": "/apps/@rx-vdom/doc/latest?nav=/api.CSSAttribute",
                    "VirtualDOM.tag": "/apps/@rx-vdom/doc/latest?nav=/api.VirtualDOM.tag",
                    "VirtualDOM": "/apps/@rx-vdom/doc/latest?nav=/api.VirtualDOM"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "TOCView",
            "documentation": {
                "sections": [
                    {
                        "content": "Represents the default Table of Contents (TOC) view for a documentation page, presenting the headings list.\nIt dynamically observes the document structure and updates itself in response to content changes w/ headings.\n\nTo customize the  <mkapi-api-link nav=\"@nav[mkdocs-ts]/DefaultLayout.TocItemView\" semantic=\"class\">TocItemView</mkapi-api-link>  displayed, the function  <mkapi-api-link nav=\"@nav[mkdocs-ts]/DefaultLayout.tocView\" semantic=\"function\">tocView</mkapi-api-link>  can be used to provide\n <mkapi-api-link nav=\"@nav[mkdocs-ts]/DefaultLayout.NavLayout\" semantic=\"type-alias\">NavLayout</mkapi-api-link> 's  `toc`  view generator.\nWithin the default  <mkapi-api-link nav=\"@nav[mkdocs-ts]/DefaultLayout.Layout\" semantic=\"class\">Layout</mkapi-api-link> , this view is embedded within  <mkapi-api-link nav=\"@nav[mkdocs-ts]/DefaultLayout.TocWrapperView\" semantic=\"class\">TocWrapperView</mkapi-api-link> .",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "TOCView",
            "navPath": "@nav[mkdocs-ts]/DefaultLayout.TOCView",
            "attributes": [
                {
                    "name": "children",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Children of the element.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "TOCView.children",
                    "navPath": "@nav[mkdocs-ts]/DefaultLayout.TOCView.children",
                    "code": {
                        "filePath": "src/lib/default-layout/toc.view.ts",
                        "declaration": "public readonly children: ChildrenLike",
                        "implementation": "",
                        "startLine": 89,
                        "endLine": 90,
                        "references": {
                            "children": "@nav[mkdocs-ts]/DefaultLayout.TOCView.children",
                            "ChildrenLike": "/apps/@rx-vdom/doc/latest?nav=/api.ChildrenLike",
                            "VirtualDOM.children": "/apps/@rx-vdom/doc/latest?nav=/api.VirtualDOM.children"
                        }
                    }
                },
                {
                    "name": "class",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The class associated with the element, equivalent to the  `className`  property of  `HTMLElement` .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "TOCView.class",
                    "navPath": "@nav[mkdocs-ts]/DefaultLayout.TOCView.class",
                    "code": {
                        "filePath": "src/lib/default-layout/toc.view.ts",
                        "declaration": "public readonly class = `${TOCView.CssSelector} h-100 border-primary border-start rounded px-3 d-flex flex-column`",
                        "implementation": "",
                        "startLine": 88,
                        "endLine": 89,
                        "references": {
                            "class": "@nav[mkdocs-ts]/DefaultLayout.TOCView.class"
                        }
                    }
                },
                {
                    "name": "connectedCallback",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Lifecycle hook called just after the element has been attached to the document's DOM.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "TOCView.connectedCallback",
                    "navPath": "@nav[mkdocs-ts]/DefaultLayout.TOCView.connectedCallback",
                    "code": {
                        "filePath": "src/lib/default-layout/toc.view.ts",
                        "declaration": "public readonly connectedCallback: (elem: RxHTMLElement<'div'>) => void",
                        "implementation": "",
                        "startLine": 103,
                        "endLine": 104,
                        "references": {
                            "connectedCallback": "@nav[mkdocs-ts]/DefaultLayout.TOCView.connectedCallback",
                            "RxHTMLElement": "/apps/@rx-vdom/doc/latest?nav=/api.RxHTMLElement",
                            "VirtualDOM.connectedCallback": "/apps/@rx-vdom/doc/latest?nav=/api.VirtualDOM.connectedCallback"
                        }
                    }
                },
                {
                    "name": "disconnectedCallback",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Lifecycle hook called just after the element has been detached from the document's DOM.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "TOCView.disconnectedCallback",
                    "navPath": "@nav[mkdocs-ts]/DefaultLayout.TOCView.disconnectedCallback",
                    "code": {
                        "filePath": "src/lib/default-layout/toc.view.ts",
                        "declaration": "public readonly disconnectedCallback: (elem: RxHTMLElement<'div'>) => void",
                        "implementation": "",
                        "startLine": 104,
                        "endLine": 105,
                        "references": {
                            "disconnectedCallback": "@nav[mkdocs-ts]/DefaultLayout.TOCView.disconnectedCallback",
                            "RxHTMLElement": "/apps/@rx-vdom/doc/latest?nav=/api.RxHTMLElement",
                            "VirtualDOM.disconnectedCallback": "/apps/@rx-vdom/doc/latest?nav=/api.VirtualDOM.disconnectedCallback"
                        }
                    }
                },
                {
                    "name": "indexFirstVisibleHeading$",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "An observable tracking the index of the first visible heading on the page.\nThis is updated dynamically as the user scrolls.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "TOCView.indexFirstVisibleHeading$",
                    "navPath": "@nav[mkdocs-ts]/DefaultLayout.TOCView.indexFirstVisibleHeading$",
                    "code": {
                        "filePath": "src/lib/default-layout/toc.view.ts",
                        "declaration": "public readonly indexFirstVisibleHeading$ = new BehaviorSubject<number>(0)",
                        "implementation": "",
                        "startLine": 102,
                        "endLine": 103,
                        "references": {
                            "indexFirstVisibleHeading$": "@nav[mkdocs-ts]/DefaultLayout.TOCView.indexFirstVisibleHeading$",
                            "BehaviorSubject": "https://www.learnrxjs.io/learn-rxjs/subjects/subject"
                        }
                    }
                },
                {
                    "name": "maxHeadingsDepth",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The maximum heading depth considered for the TOC.\nIf set, headings beyond this depth are ignored.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "TOCView.maxHeadingsDepth",
                    "navPath": "@nav[mkdocs-ts]/DefaultLayout.TOCView.maxHeadingsDepth",
                    "code": {
                        "filePath": "src/lib/default-layout/toc.view.ts",
                        "declaration": "public readonly maxHeadingsDepth?: number = 2",
                        "implementation": "",
                        "startLine": 97,
                        "endLine": 98,
                        "references": {
                            "maxHeadingsDepth": "@nav[mkdocs-ts]/DefaultLayout.TOCView.maxHeadingsDepth"
                        }
                    }
                },
                {
                    "name": "style",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The style associated with the element. Typically, for a static value:\n ```typescript\n{\n     tag: 'div',\n     style: {\n         backgroundColor: 'blue'\n     }\n}\n``` \nFor more details on hyphenated properties, see  <mkapi-ext-link href=\"/apps/@rx-vdom/doc/latest?nav=/api.CSSAttribute\">CSSAttribute</mkapi-ext-link> .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "TOCView.style",
                    "navPath": "@nav[mkdocs-ts]/DefaultLayout.TOCView.style",
                    "code": {
                        "filePath": "src/lib/default-layout/toc.view.ts",
                        "declaration": "public readonly style: CSSAttribute",
                        "implementation": "",
                        "startLine": 91,
                        "endLine": 92,
                        "references": {
                            "style": "@nav[mkdocs-ts]/DefaultLayout.TOCView.style",
                            "CSSAttribute": "/apps/@rx-vdom/doc/latest?nav=/api.CSSAttribute"
                        }
                    }
                },
                {
                    "name": "tag",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The tag of the element, equivalent to the  `tagName`  property of  `HTMLElement` .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "TOCView.tag",
                    "navPath": "@nav[mkdocs-ts]/DefaultLayout.TOCView.tag",
                    "code": {
                        "filePath": "src/lib/default-layout/toc.view.ts",
                        "declaration": "public readonly tag = 'div'",
                        "implementation": "",
                        "startLine": 87,
                        "endLine": 88,
                        "references": {
                            "tag": "@nav[mkdocs-ts]/DefaultLayout.TOCView.tag",
                            "VirtualDOM.tag": "/apps/@rx-vdom/doc/latest?nav=/api.VirtualDOM.tag"
                        }
                    }
                },
                {
                    "name": "CssSelector",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Component's class name for CSS query.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "TOCView.CssSelector",
                    "navPath": "@nav[mkdocs-ts]/DefaultLayout.TOCView.CssSelector",
                    "code": {
                        "filePath": "src/lib/default-layout/toc.view.ts",
                        "declaration": "static readonly CssSelector = 'mkdocs-TOCView'",
                        "implementation": "",
                        "startLine": 84,
                        "endLine": 85,
                        "references": {
                            "CssSelector": "@nav[mkdocs-ts]/DefaultLayout.TOCView.CssSelector"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/default-layout/toc.view.ts",
                "declaration": "export class TOCView implements VirtualDOM<'div'>",
                "implementation": "export class TOCView implements VirtualDOM<'div'> {\n    /**\n     * Component's class name for CSS query.\n     */\n    static readonly CssSelector = 'mkdocs-TOCView'\n    public readonly router: Router\n    public readonly html: HTMLElement\n    public readonly tag = 'div'\n    public readonly class = `${TOCView.CssSelector} h-100 border-primary border-start rounded px-3 d-flex flex-column`\n    public readonly children: ChildrenLike\n\n    public readonly style: CSSAttribute\n\n    /**\n     * The maximum heading depth considered for the TOC.\n     * If set, headings beyond this depth are ignored.\n     */\n    public readonly maxHeadingsDepth?: number = 2\n    /**\n     * An observable tracking the index of the first visible heading on the page.\n     * This is updated dynamically as the user scrolls.\n     */\n    public readonly indexFirstVisibleHeading$ = new BehaviorSubject<number>(0)\n    public readonly connectedCallback: (elem: RxHTMLElement<'div'>) => void\n    public readonly disconnectedCallback: (elem: RxHTMLElement<'div'>) => void\n\n    /**\n     *\n     * @param params\n     * @param params.html The root HTML element of the page, returned by {@link NavLayout}'s `content`.\n     * @param params.router The application's router instance.\n     * @param params.domConvertor (Optional) A function to convert heading elements into TOC items.\n     * See {@link TocItemView}.\n     * @param params.maxHeadingsDepth (Optional) Maximum heading depth w/ root HTML element to be included in the TOC.\n     */\n    constructor(params: {\n        html: HTMLElement\n        router: Router\n        domConvertor?: (e: HTMLHeadingElement) => AnyVirtualDOM\n        maxHeadingsDepth?: number\n    }) {\n        Object.assign(this, params)\n        const queryHeadings = supportedHeadingTags\n            .reduce((acc, e) => `${acc},${e}`, '')\n            .toLowerCase()\n            .slice(1)\n        const headingsArray = (): HTMLElement[] => {\n            return Array.from(\n                this.html.querySelectorAll<HTMLElement>(queryHeadings),\n            ).filter((e) => {\n                if (this.maxHeadingsDepth === undefined) {\n                    return true\n                }\n                const startContentDepth = 2\n                const maxDepth = startContentDepth + this.maxHeadingsDepth\n                return isWithinDepth(e, params.html, maxDepth)\n            })\n        }\n\n        const headings$ = new BehaviorSubject<HTMLElement[]>(headingsArray())\n\n        const allMutations$ = new Subject<MutationRecord[]>()\n\n        const subHeadings = allMutations$\n            .pipe(\n                filter((mutationsList) => {\n                    return mutationsList.some((mut) => {\n                        if (mut.type === 'childList') {\n                            const nodes = [\n                                ...mut.addedNodes,\n                                ...mut.removedNodes,\n                            ]\n                            return nodes.some(\n                                (node) =>\n                                    node instanceof HTMLElement &&\n                                    (node.tagName.startsWith('H') ||\n                                        node.querySelector(\n                                            'h1,h2,h3,h4,h5,h6',\n                                        )),\n                            )\n                        }\n                        if (\n                            mut.type === 'attributes' &&\n                            mut.target instanceof HTMLElement\n                        ) {\n                            return mut.target.tagName.startsWith('H')\n                        }\n\n                        return false\n                    })\n                }),\n                debounceTime(debounceTimeToc),\n                shareReplay({ bufferSize: 1, refCount: true }),\n            )\n            .subscribe(() => {\n                const headings = headingsArray()\n                headings$.next(headings)\n            })\n\n        const observer = new MutationObserver((mutationsList) => {\n            allMutations$.next(mutationsList)\n        })\n        this.connectedCallback = (elem) => {\n            observer.observe(this.html, { childList: true, subtree: true })\n            elem.ownSubscriptions(\n                this.router.htmlUpdated$.subscribe(() => {\n                    headings$.next(headingsArray())\n                }),\n                subHeadings,\n            )\n            elem.ownSubscriptions()\n        }\n        this.disconnectedCallback = () => {\n            observer.disconnect()\n        }\n        if (this.router.scrollableElement) {\n            this.router.scrollableElement.onscroll = () => {\n                this.getFirstVisible(headings$.value)\n            }\n        }\n\n        this.children = [\n            {\n                tag: 'div',\n                innerText: 'On this page',\n                class: 'border-bottom mb-2',\n                style: {\n                    fontWeight: 'bolder',\n                    fontSize: 'larger',\n                },\n            },\n            {\n                tag: 'div',\n                class: 'px-0 py-2 flex-grow-1 mkdocs-thin-v-scroller',\n                connectedCallback: (elem: RxHTMLElement<'div'>) => {\n                    elem.ownSubscriptions(\n                        this.indexFirstVisibleHeading$\n                            .pipe(debounceTime(debounceTimeToc))\n                            .subscribe((index) => {\n                                const headings = [\n                                    ...elem.querySelectorAll<HTMLElement>(\n                                        `.${TocItemView.CssSelector}`,\n                                    ),\n                                ]\n                                const br = elem.getBoundingClientRect()\n                                const offset = headings[index]?.offsetTop || 0\n                                elem.scrollTo({\n                                    top: offset - br.top,\n                                    left: 0,\n                                    behavior: 'smooth',\n                                })\n                            }),\n                    )\n                },\n                children: replace$({\n                    policy: 'replace',\n                    source$: headings$,\n                    vdomMap: (headingsArray) => {\n                        return headingsArray.map(\n                            (heading: HTMLHeadingElement, index: number) => {\n                                return new TocItemView({\n                                    heading,\n                                    index,\n                                    indexFirstVisibleHeading$:\n                                        this.indexFirstVisibleHeading$,\n                                    router: this.router,\n                                    domConvertor: params.domConvertor,\n                                })\n                            },\n                        )\n                    },\n                }),\n            },\n        ]\n    }\n    getFirstVisible(headings: HTMLElement[]) {\n        for (let i = 0; i < headings.length; i++) {\n            const rect = headings[i].getBoundingClientRect()\n\n            if (rect.top >= 0 && rect.bottom <= window.innerHeight) {\n                this.indexFirstVisibleHeading$.next(i)\n                return\n            }\n        }\n    }\n}",
                "startLine": 80,
                "endLine": 266,
                "references": {
                    "TOCView": "@nav[mkdocs-ts]/DefaultLayout.TOCView",
                    "Router": "@nav[mkdocs-ts].Router",
                    "HTMLHeadingElement": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLHeadingElement",
                    "AnyVirtualDOM": "/apps/@rx-vdom/doc/latest?nav=/api.AnyVirtualDOM",
                    "HTMLElement": "https://www.typescriptlang.org/docs/handbook/dom-manipulation.html",
                    "ChildrenLike": "/apps/@rx-vdom/doc/latest?nav=/api.ChildrenLike",
                    "VirtualDOM.children": "/apps/@rx-vdom/doc/latest?nav=/api.VirtualDOM.children",
                    "RxHTMLElement": "/apps/@rx-vdom/doc/latest?nav=/api.RxHTMLElement",
                    "VirtualDOM.connectedCallback": "/apps/@rx-vdom/doc/latest?nav=/api.VirtualDOM.connectedCallback",
                    "VirtualDOM.disconnectedCallback": "/apps/@rx-vdom/doc/latest?nav=/api.VirtualDOM.disconnectedCallback",
                    "BehaviorSubject": "https://www.learnrxjs.io/learn-rxjs/subjects/subject",
                    "CSSAttribute": "/apps/@rx-vdom/doc/latest?nav=/api.CSSAttribute",
                    "VirtualDOM.tag": "/apps/@rx-vdom/doc/latest?nav=/api.VirtualDOM.tag",
                    "VirtualDOM": "/apps/@rx-vdom/doc/latest?nav=/api.VirtualDOM"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "TocWrapperView",
            "documentation": {
                "sections": [
                    {
                        "content": "Wrapper of TOC view within the default  <mkapi-api-link nav=\"@nav[mkdocs-ts]/DefaultLayout.Layout\" semantic=\"class\">Layout</mkapi-api-link>  , embedding either:\n*   <mkapi-api-link nav=\"@nav[mkdocs-ts]/DefaultLayout.TOCView\" semantic=\"class\">TOCView</mkapi-api-link>  for  <mkapi-api-link nav=\"@nav[mkdocs-ts]/DefaultLayout.NavLayout\" semantic=\"type-alias\">NavLayout</mkapi-api-link>  with no custom  `toc`  .\n*  A custom view otherwise.\n\nIt can be configured using the attributes  `pageVertPadding`  and  `tocMinWidth`  of  <mkapi-api-link nav=\"@nav[mkdocs-ts]/DefaultLayout.DisplayOptions\" semantic=\"type-alias\">DisplayOptions</mkapi-api-link> .",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "TocWrapperView",
            "navPath": "@nav[mkdocs-ts]/DefaultLayout.TocWrapperView",
            "attributes": [
                {
                    "name": "children",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Children of the element.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "TocWrapperView.children",
                    "navPath": "@nav[mkdocs-ts]/DefaultLayout.TocWrapperView.children",
                    "code": {
                        "filePath": "src/lib/default-layout/toc.view.ts",
                        "declaration": "public readonly children: ChildrenLike",
                        "implementation": "",
                        "startLine": 380,
                        "endLine": 381,
                        "references": {
                            "children": "@nav[mkdocs-ts]/DefaultLayout.TocWrapperView.children",
                            "ChildrenLike": "/apps/@rx-vdom/doc/latest?nav=/api.ChildrenLike",
                            "VirtualDOM.children": "/apps/@rx-vdom/doc/latest?nav=/api.VirtualDOM.children"
                        }
                    }
                },
                {
                    "name": "class",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The class associated with the element, equivalent to the  `className`  property of  `HTMLElement` .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "TocWrapperView.class",
                    "navPath": "@nav[mkdocs-ts]/DefaultLayout.TocWrapperView.class",
                    "code": {
                        "filePath": "src/lib/default-layout/toc.view.ts",
                        "declaration": "public readonly class = `${TocWrapperView.CssSelector} w-100 h-100 d-flex flex-grow-1 py-1`",
                        "implementation": "",
                        "startLine": 378,
                        "endLine": 379,
                        "references": {
                            "class": "@nav[mkdocs-ts]/DefaultLayout.TocWrapperView.class"
                        }
                    }
                },
                {
                    "name": "tag",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The tag of the element, equivalent to the  `tagName`  property of  `HTMLElement` .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "TocWrapperView.tag",
                    "navPath": "@nav[mkdocs-ts]/DefaultLayout.TocWrapperView.tag",
                    "code": {
                        "filePath": "src/lib/default-layout/toc.view.ts",
                        "declaration": "public readonly tag = 'div'",
                        "implementation": "",
                        "startLine": 377,
                        "endLine": 378,
                        "references": {
                            "tag": "@nav[mkdocs-ts]/DefaultLayout.TocWrapperView.tag",
                            "VirtualDOM.tag": "/apps/@rx-vdom/doc/latest?nav=/api.VirtualDOM.tag"
                        }
                    }
                },
                {
                    "name": "CssSelector",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Component's class name for CSS query.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "TocWrapperView.CssSelector",
                    "navPath": "@nav[mkdocs-ts]/DefaultLayout.TocWrapperView.CssSelector",
                    "code": {
                        "filePath": "src/lib/default-layout/toc.view.ts",
                        "declaration": "static readonly CssSelector = 'mkdocs-TocWrapperView'",
                        "implementation": "",
                        "startLine": 376,
                        "endLine": 377,
                        "references": {
                            "CssSelector": "@nav[mkdocs-ts]/DefaultLayout.TocWrapperView.CssSelector"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/default-layout/toc.view.ts",
                "declaration": "export class TocWrapperView implements VirtualDOM<'div'>",
                "implementation": "export class TocWrapperView implements VirtualDOM<'div'> {\n    /**\n     * Component's class name for CSS query.\n     */\n    static readonly CssSelector = 'mkdocs-TocWrapperView'\n    public readonly tag = 'div'\n    public readonly class = `${TocWrapperView.CssSelector} w-100 h-100 d-flex flex-grow-1 py-1`\n\n    public readonly children: ChildrenLike\n\n    public readonly displayMode$: BehaviorSubject<DisplayMode>\n    public readonly router: Router\n    public readonly displayOptions: DisplayOptions\n    public readonly content$: Observable<HTMLElement>\n    public readonly tocEnabled$: Observable<boolean>\n    /**\n     *\n     * @param params\n     * @param params.router The application's router instance.\n     * @param params.displayMode$ The display mode for the TOC, depending on screen size.\n     * @param params.displayOptions The display options, see `pageVertPadding` and `tocMinWidth` of\n     * {@link DisplayOptions}.\n     * @param params.content$ The page content, emitting each time a new path of the navigation is hit.\n     */\n    constructor(params: {\n        router: Router\n        displayMode$: BehaviorSubject<DisplayMode>\n        displayOptions: DisplayOptions\n        content$: Observable<HTMLElement>\n    }) {\n        Object.assign(this, params)\n        const target$ = this.router.target$.pipe(\n            filter((t) => isResolvedTarget(t)),\n        )\n        this.tocEnabled$ = target$.pipe(\n            map((target) => {\n                if (\n                    !target.node.layout ||\n                    typeof target.node.layout !== 'object'\n                ) {\n                    return true\n                }\n                if (!('toc' in target.node.layout)) {\n                    return true\n                }\n                return target.node.layout.toc !== 'disabled'\n            }),\n        )\n        const toc: AnyVirtualDOM = {\n            tag: 'div',\n            class: 'h-100',\n            style: attr$({\n                source$: this.displayMode$,\n                vdomMap: (mode) => {\n                    const padding =\n                        mode === 'pined'\n                            ? this.displayOptions.pageVertPadding\n                            : '0px'\n                    return {\n                        minWidth: `${String(this.displayOptions.tocMinWidth)}px`,\n                        paddingTop: padding,\n                        paddingBottom: padding,\n                    }\n                },\n            }),\n            children: [\n                child$({\n                    source$: combineLatest([target$, this.content$]).pipe(\n                        mergeMap(([target, elem]) => {\n                            if (!hasTocViewTrait(target.node)) {\n                                return from(\n                                    tocView({\n                                        html: elem,\n                                        router: this.router,\n                                    }),\n                                )\n                            }\n                            if (target.node.layout.toc === 'disabled') {\n                                return of(undefined)\n                            }\n                            const toc = target.node.layout.toc({\n                                html: elem,\n                                router: this.router,\n                            })\n                            if (!toc) {\n                                return of(undefined)\n                            }\n                            if (toc instanceof Promise) {\n                                return from(toc)\n                            }\n                            if (toc instanceof Observable) {\n                                return toc.pipe(take(1))\n                            }\n                            if (toc instanceof HTMLElement) {\n                                return of(toc)\n                            }\n                            if ('source$' in toc) {\n                                return of(toc)\n                            }\n                            return of(toc)\n                        }),\n                    ),\n                    vdomMap: (toc?): AnyVirtualDOM => {\n                        if (!toc) {\n                            return { tag: 'div' }\n                        }\n                        if (toc instanceof HTMLElement) {\n                            return { tag: 'div', children: [toc] }\n                        }\n                        if ('source$' in toc) {\n                            return { tag: 'div', children: [toc] }\n                        }\n                        return toc\n                    },\n                }),\n            ],\n        }\n        this.children = [\n            {\n                tag: 'div',\n                class: 'h-100',\n                children: [toc],\n            },\n        ]\n    }\n}",
                "startLine": 372,
                "endLine": 498,
                "references": {
                    "TocWrapperView": "@nav[mkdocs-ts]/DefaultLayout.TocWrapperView",
                    "DisplayMode": "@nav[mkdocs-ts]/DefaultLayout.DisplayMode",
                    "Router": "@nav[mkdocs-ts].Router",
                    "Observable": "https://rxjs.dev/guide/observable",
                    "HTMLElement": "https://www.typescriptlang.org/docs/handbook/dom-manipulation.html",
                    "BehaviorSubject": "https://www.learnrxjs.io/learn-rxjs/subjects/subject",
                    "ChildrenLike": "/apps/@rx-vdom/doc/latest?nav=/api.ChildrenLike",
                    "VirtualDOM.children": "/apps/@rx-vdom/doc/latest?nav=/api.VirtualDOM.children",
                    "VirtualDOM.tag": "/apps/@rx-vdom/doc/latest?nav=/api.VirtualDOM.tag",
                    "VirtualDOM": "/apps/@rx-vdom/doc/latest?nav=/api.VirtualDOM"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "ToggleSidePanelButton",
            "documentation": {
                "sections": [
                    {
                        "content": "The toggle button to display / hide the side panels.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "ToggleSidePanelButton",
            "navPath": "@nav[mkdocs-ts]/DefaultLayout.ToggleSidePanelButton",
            "attributes": [
                {
                    "name": "children",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Children of the element.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "ToggleSidePanelButton.children",
                    "navPath": "@nav[mkdocs-ts]/DefaultLayout.ToggleSidePanelButton.children",
                    "code": {
                        "filePath": "src/lib/default-layout/small-screen.view.ts",
                        "declaration": "public readonly children: ChildrenLike",
                        "implementation": "",
                        "startLine": 63,
                        "endLine": 64,
                        "references": {
                            "children": "@nav[mkdocs-ts]/DefaultLayout.ToggleSidePanelButton.children",
                            "ChildrenLike": "/apps/@rx-vdom/doc/latest?nav=/api.ChildrenLike",
                            "VirtualDOM.children": "/apps/@rx-vdom/doc/latest?nav=/api.VirtualDOM.children"
                        }
                    }
                },
                {
                    "name": "class",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The class associated with the element, equivalent to the  `className`  property of  `HTMLElement` .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "ToggleSidePanelButton.class",
                    "navPath": "@nav[mkdocs-ts]/DefaultLayout.ToggleSidePanelButton.class",
                    "code": {
                        "filePath": "src/lib/default-layout/small-screen.view.ts",
                        "declaration": "public readonly class: AttributeLike<string>",
                        "implementation": "",
                        "startLine": 59,
                        "endLine": 60,
                        "references": {
                            "class": "@nav[mkdocs-ts]/DefaultLayout.ToggleSidePanelButton.class",
                            "AttributeLike": "/apps/@rx-vdom/doc/latest?nav=/api.AttributeLike"
                        }
                    }
                },
                {
                    "name": "style",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The style associated with the element. Typically, for a static value:\n ```typescript\n{\n     tag: 'div',\n     style: {\n         backgroundColor: 'blue'\n     }\n}\n``` \nFor more details on hyphenated properties, see  <mkapi-ext-link href=\"/apps/@rx-vdom/doc/latest?nav=/api.CSSAttribute\">CSSAttribute</mkapi-ext-link> .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "ToggleSidePanelButton.style",
                    "navPath": "@nav[mkdocs-ts]/DefaultLayout.ToggleSidePanelButton.style",
                    "code": {
                        "filePath": "src/lib/default-layout/small-screen.view.ts",
                        "declaration": "public readonly style = {\n        zIndex: 1,\n    }",
                        "implementation": "",
                        "startLine": 60,
                        "endLine": 61,
                        "references": {
                            "style": "@nav[mkdocs-ts]/DefaultLayout.ToggleSidePanelButton.style"
                        }
                    }
                },
                {
                    "name": "tag",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The tag of the element, equivalent to the  `tagName`  property of  `HTMLElement` .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "ToggleSidePanelButton.tag",
                    "navPath": "@nav[mkdocs-ts]/DefaultLayout.ToggleSidePanelButton.tag",
                    "code": {
                        "filePath": "src/lib/default-layout/small-screen.view.ts",
                        "declaration": "public readonly tag = 'div'",
                        "implementation": "",
                        "startLine": 58,
                        "endLine": 59,
                        "references": {
                            "tag": "@nav[mkdocs-ts]/DefaultLayout.ToggleSidePanelButton.tag",
                            "VirtualDOM.tag": "/apps/@rx-vdom/doc/latest?nav=/api.VirtualDOM.tag"
                        }
                    }
                }
            ],
            "callables": [
                {
                    "name": "constructor",
                    "documentation": {
                        "sections": [
                            {
                                "content": "Initializes a new instance.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            },
                            {
                                "title": "Arguments",
                                "content": "\n*  **displayMode$**: The display mode.\n*  **visible$**: If provided, this observable can be used to hide the button.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "arguments",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "ToggleSidePanelButton.constructor",
                    "navPath": "@nav[mkdocs-ts]/DefaultLayout.ToggleSidePanelButton.constructor",
                    "code": {
                        "filePath": "src/lib/default-layout/small-screen.view.ts",
                        "declaration": "constructor(params: {\n    displayMode$: BehaviorSubject<DisplayMode | 'none'>\n    visible$?: Observable<boolean>\n    icon: FaIconsList\n})",
                        "implementation": "constructor(params: {\n    displayMode$: BehaviorSubject<DisplayMode | 'none'>\n    visible$?: Observable<boolean>\n    icon: FaIconsList\n}) {\n    const classBase = ToggleSidePanelButton.CssSelector\n    this.class = params.visible$\n        ? {\n              source$: params.visible$,\n              vdomMap: (isVisible) => {\n                  return isVisible ? classBase : 'd-none'\n              },\n          }\n        : classBase\n\n    const button: AnyVirtualDOM = {\n        tag: 'button',\n        class: attr$({\n            source$: params.displayMode$,\n            vdomMap: (mode): string => {\n                if (mode === 'hidden') {\n                    return 'btn-light'\n                }\n                if (mode === 'expanded') {\n                    return 'btn-dark'\n                }\n                return ''\n            },\n            wrapper: (c) => {\n                return `btn btn-sm border ${c}`\n            },\n        }),\n        children: [faIconTyped(params.icon)],\n        onclick: () => {\n            if (params.displayMode$.value === 'hidden') {\n                params.displayMode$.next('expanded')\n                return\n            }\n            if (params.displayMode$.value === 'expanded') {\n                params.displayMode$.next('hidden')\n                return\n            }\n        },\n    }\n    this.children = [\n        {\n            tag: 'div',\n            class: 'd-flex justify-content-center',\n            children: [button],\n        },\n    ]\n}",
                        "startLine": 71,
                        "endLine": 123,
                        "references": {
                            "ToggleSidePanelButton": "@nav[mkdocs-ts]/DefaultLayout.ToggleSidePanelButton",
                            "DisplayMode": "@nav[mkdocs-ts]/DefaultLayout.DisplayMode",
                            "BehaviorSubject": "https://www.learnrxjs.io/learn-rxjs/subjects/subject",
                            "Observable": "https://rxjs.dev/guide/observable"
                        }
                    },
                    "semantic": {
                        "role": "constructor",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    }
                }
            ],
            "code": {
                "filePath": "src/lib/default-layout/small-screen.view.ts",
                "declaration": "export class ToggleSidePanelButton implements VirtualDOM<'div'>",
                "implementation": "export class ToggleSidePanelButton implements VirtualDOM<'div'> {\n    static readonly CssSelector = 'mkdocs-ToggleNavButton'\n    public readonly tag = 'div'\n    public readonly class: AttributeLike<string>\n    public readonly style = {\n        zIndex: 1,\n    }\n    public readonly children: ChildrenLike\n    /**\n     * Initializes a new instance.\n     *\n     * @param params\n     * @param params.displayMode$ The display mode.\n     * @param params.visible$ If provided, this observable can be used to hide the button.\n     */\n    constructor(params: {\n        displayMode$: BehaviorSubject<DisplayMode | 'none'>\n        visible$?: Observable<boolean>\n        icon: FaIconsList\n    }) {\n        const classBase = ToggleSidePanelButton.CssSelector\n        this.class = params.visible$\n            ? {\n                  source$: params.visible$,\n                  vdomMap: (isVisible) => {\n                      return isVisible ? classBase : 'd-none'\n                  },\n              }\n            : classBase\n\n        const button: AnyVirtualDOM = {\n            tag: 'button',\n            class: attr$({\n                source$: params.displayMode$,\n                vdomMap: (mode): string => {\n                    if (mode === 'hidden') {\n                        return 'btn-light'\n                    }\n                    if (mode === 'expanded') {\n                        return 'btn-dark'\n                    }\n                    return ''\n                },\n                wrapper: (c) => {\n                    return `btn btn-sm border ${c}`\n                },\n            }),\n            children: [faIconTyped(params.icon)],\n            onclick: () => {\n                if (params.displayMode$.value === 'hidden') {\n                    params.displayMode$.next('expanded')\n                    return\n                }\n                if (params.displayMode$.value === 'expanded') {\n                    params.displayMode$.next('hidden')\n                    return\n                }\n            },\n        }\n        this.children = [\n            {\n                tag: 'div',\n                class: 'd-flex justify-content-center',\n                children: [button],\n            },\n        ]\n    }\n}",
                "startLine": 56,
                "endLine": 124,
                "references": {
                    "ToggleSidePanelButton": "@nav[mkdocs-ts]/DefaultLayout.ToggleSidePanelButton",
                    "DisplayMode": "@nav[mkdocs-ts]/DefaultLayout.DisplayMode",
                    "BehaviorSubject": "https://www.learnrxjs.io/learn-rxjs/subjects/subject",
                    "Observable": "https://rxjs.dev/guide/observable",
                    "ChildrenLike": "/apps/@rx-vdom/doc/latest?nav=/api.ChildrenLike",
                    "VirtualDOM.children": "/apps/@rx-vdom/doc/latest?nav=/api.VirtualDOM.children",
                    "AttributeLike": "/apps/@rx-vdom/doc/latest?nav=/api.AttributeLike",
                    "VirtualDOM.tag": "/apps/@rx-vdom/doc/latest?nav=/api.VirtualDOM.tag",
                    "VirtualDOM": "/apps/@rx-vdom/doc/latest?nav=/api.VirtualDOM"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "TopBanner",
            "documentation": {
                "sections": [
                    {
                        "content": "Sticky top banner component that remains visible while scrolling.\n\nThis component adapts its layout based on screen size and display mode:\n- On small screens: uses  <mkapi-api-link nav=\"@nav[mkdocs-ts]/DefaultLayout.TopBannerMinimized\" semantic=\"class\">TopBannerMinimized</mkapi-api-link> .\n- On large screens: uses  <mkapi-api-link nav=\"@nav[mkdocs-ts]/DefaultLayout.TopBannerExpanded\" semantic=\"class\">TopBannerExpanded</mkapi-api-link> .\n\nThe banner includes a logo, optional dynamic content, and an optional badge.\n\nContent is defined using  <mkapi-api-link nav=\"@nav[mkdocs-ts]/DefaultLayout.TopBannerSpec\" semantic=\"interface\">TopBannerSpec</mkapi-api-link> .",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "TopBanner",
            "navPath": "@nav[mkdocs-ts]/DefaultLayout.TopBanner",
            "attributes": [
                {
                    "name": "children",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Children of the element.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "TopBanner.children",
                    "navPath": "@nav[mkdocs-ts]/DefaultLayout.TopBanner.children",
                    "code": {
                        "filePath": "src/lib/default-layout/top-banner.view.ts",
                        "declaration": "public readonly children: ChildrenLike",
                        "implementation": "",
                        "startLine": 156,
                        "endLine": 157,
                        "references": {
                            "children": "@nav[mkdocs-ts]/DefaultLayout.TopBanner.children",
                            "ChildrenLike": "/apps/@rx-vdom/doc/latest?nav=/api.ChildrenLike",
                            "VirtualDOM.children": "/apps/@rx-vdom/doc/latest?nav=/api.VirtualDOM.children"
                        }
                    }
                },
                {
                    "name": "class",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The class associated with the element, equivalent to the  `className`  property of  `HTMLElement` .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "TopBanner.class",
                    "navPath": "@nav[mkdocs-ts]/DefaultLayout.TopBanner.class",
                    "code": {
                        "filePath": "src/lib/default-layout/top-banner.view.ts",
                        "declaration": "public readonly class = TopBanner.CssSelector",
                        "implementation": "",
                        "startLine": 155,
                        "endLine": 156,
                        "references": {
                            "class": "@nav[mkdocs-ts]/DefaultLayout.TopBanner.class"
                        }
                    }
                },
                {
                    "name": "connectedCallback",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Lifecycle hook called just after the element has been attached to the document's DOM.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "TopBanner.connectedCallback",
                    "navPath": "@nav[mkdocs-ts]/DefaultLayout.TopBanner.connectedCallback",
                    "code": {
                        "filePath": "src/lib/default-layout/top-banner.view.ts",
                        "declaration": "public readonly connectedCallback: (element: RxHTMLElement<'div'>) => void",
                        "implementation": "",
                        "startLine": 158,
                        "endLine": 159,
                        "references": {
                            "connectedCallback": "@nav[mkdocs-ts]/DefaultLayout.TopBanner.connectedCallback",
                            "RxHTMLElement": "/apps/@rx-vdom/doc/latest?nav=/api.RxHTMLElement",
                            "VirtualDOM.connectedCallback": "/apps/@rx-vdom/doc/latest?nav=/api.VirtualDOM.connectedCallback"
                        }
                    }
                },
                {
                    "name": "style",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The style associated with the element. Typically, for a static value:\n ```typescript\n{\n     tag: 'div',\n     style: {\n         backgroundColor: 'blue'\n     }\n}\n``` \nFor more details on hyphenated properties, see  <mkapi-ext-link href=\"/apps/@rx-vdom/doc/latest?nav=/api.CSSAttribute\">CSSAttribute</mkapi-ext-link> .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "TopBanner.style",
                    "navPath": "@nav[mkdocs-ts]/DefaultLayout.TopBanner.style",
                    "code": {
                        "filePath": "src/lib/default-layout/top-banner.view.ts",
                        "declaration": "public readonly style = {\n        width: 'vw-100',\n        position: 'sticky' as const,\n        top: '0px',\n        zIndex: 100,\n    }",
                        "implementation": "",
                        "startLine": 160,
                        "endLine": 161,
                        "references": {
                            "style": "@nav[mkdocs-ts]/DefaultLayout.TopBanner.style"
                        }
                    }
                },
                {
                    "name": "tag",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The tag of the element, equivalent to the  `tagName`  property of  `HTMLElement` .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "TopBanner.tag",
                    "navPath": "@nav[mkdocs-ts]/DefaultLayout.TopBanner.tag",
                    "code": {
                        "filePath": "src/lib/default-layout/top-banner.view.ts",
                        "declaration": "public readonly tag = 'div'",
                        "implementation": "",
                        "startLine": 154,
                        "endLine": 155,
                        "references": {
                            "tag": "@nav[mkdocs-ts]/DefaultLayout.TopBanner.tag",
                            "VirtualDOM.tag": "/apps/@rx-vdom/doc/latest?nav=/api.VirtualDOM.tag"
                        }
                    }
                },
                {
                    "name": "CssSelector",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Component's class name for CSS query.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "TopBanner.CssSelector",
                    "navPath": "@nav[mkdocs-ts]/DefaultLayout.TopBanner.CssSelector",
                    "code": {
                        "filePath": "src/lib/default-layout/top-banner.view.ts",
                        "declaration": "static readonly CssSelector = 'mkdocs-TopBanner'",
                        "implementation": "",
                        "startLine": 153,
                        "endLine": 154,
                        "references": {
                            "CssSelector": "@nav[mkdocs-ts]/DefaultLayout.TopBanner.CssSelector"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/default-layout/top-banner.view.ts",
                "declaration": "export class TopBanner implements VirtualDOM<'div'>",
                "implementation": "export class TopBanner implements VirtualDOM<'div'> {\n    /**\n     * Component's class name for CSS query.\n     */\n    static readonly CssSelector = 'mkdocs-TopBanner'\n    public readonly tag = 'div'\n    public readonly class = TopBanner.CssSelector\n    public readonly children: ChildrenLike\n    public readonly boundingBox$ = new ReplaySubject<DOMRect>(1)\n    public readonly connectedCallback: (element: RxHTMLElement<'div'>) => void\n\n    public readonly style = {\n        width: 'vw-100',\n        position: 'sticky' as const,\n        top: '0px',\n        zIndex: 100,\n    }\n    constructor(params: {\n        router: Router\n        spec: TopBannerSpec\n        navigationBoundingBox$: Observable<DOMRect>\n        tocBoundingBox$: Observable<DOMRect>\n        pageScrollTop$: Observable<number>\n        navDisplayMode$: BehaviorSubject<DisplayMode>\n    }) {\n        if (params.spec.zIndex) {\n            this.style.zIndex = params.spec.zIndex\n        }\n        this.children = [\n            params.spec.header?.(params),\n            child$({\n                source$: params.navDisplayMode$.pipe(\n                    map((mode) => {\n                        if (mode === 'removed') {\n                            return 'removed'\n                        }\n                        return mode === 'pined' ? 'pined' : 'expandable'\n                    }),\n                    distinctUntilChanged(),\n                ),\n                vdomMap: (displayMode) => {\n                    return displayMode === 'pined'\n                        ? new TopBannerExpanded(params)\n                        : new TopBannerMinimized({\n                              displayMode$: params.navDisplayMode$,\n                              router: params.router,\n                              spec: params.spec,\n                          })\n                },\n            }),\n            params.spec.footer?.(params),\n        ]\n        this.connectedCallback = (elem) => {\n            plugBoundingBoxObserver(elem, this.boundingBox$)\n        }\n    }\n}",
                "startLine": 149,
                "endLine": 206,
                "references": {
                    "TopBanner": "@nav[mkdocs-ts]/DefaultLayout.TopBanner",
                    "DisplayMode": "@nav[mkdocs-ts]/DefaultLayout.DisplayMode",
                    "Router": "@nav[mkdocs-ts].Router",
                    "TopBannerSpec": "@nav[mkdocs-ts]/DefaultLayout.TopBannerSpec",
                    "BehaviorSubject": "https://www.learnrxjs.io/learn-rxjs/subjects/subject",
                    "Observable": "https://rxjs.dev/guide/observable",
                    "DOMRect": "https://developer.mozilla.org/en-US/docs/Web/API/DOMRect",
                    "ReplaySubject": "https://www.learnrxjs.io/learn-rxjs/subjects/replaysubject",
                    "ChildrenLike": "/apps/@rx-vdom/doc/latest?nav=/api.ChildrenLike",
                    "VirtualDOM.children": "/apps/@rx-vdom/doc/latest?nav=/api.VirtualDOM.children",
                    "RxHTMLElement": "/apps/@rx-vdom/doc/latest?nav=/api.RxHTMLElement",
                    "VirtualDOM.connectedCallback": "/apps/@rx-vdom/doc/latest?nav=/api.VirtualDOM.connectedCallback",
                    "VirtualDOM.tag": "/apps/@rx-vdom/doc/latest?nav=/api.VirtualDOM.tag",
                    "VirtualDOM": "/apps/@rx-vdom/doc/latest?nav=/api.VirtualDOM"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "TopBannerExpanded",
            "documentation": {
                "sections": [
                    {
                        "content": "Full-width top banner layout for large screens.\n\nLayout (left to right):\n- Logo aligned with navigation sidebar.\n- Optional expanded content aligned with page content.\n- Optional badge aligned with the table of contents.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "TopBannerExpanded",
            "navPath": "@nav[mkdocs-ts]/DefaultLayout.TopBannerExpanded",
            "attributes": [
                {
                    "name": "children",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Children of the element.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "TopBannerExpanded.children",
                    "navPath": "@nav[mkdocs-ts]/DefaultLayout.TopBannerExpanded.children",
                    "code": {
                        "filePath": "src/lib/default-layout/top-banner.view.ts",
                        "declaration": "public readonly children: ChildrenLike",
                        "implementation": "",
                        "startLine": 274,
                        "endLine": 275,
                        "references": {
                            "children": "@nav[mkdocs-ts]/DefaultLayout.TopBannerExpanded.children",
                            "ChildrenLike": "/apps/@rx-vdom/doc/latest?nav=/api.ChildrenLike",
                            "VirtualDOM.children": "/apps/@rx-vdom/doc/latest?nav=/api.VirtualDOM.children"
                        }
                    }
                },
                {
                    "name": "class",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The class associated with the element, equivalent to the  `className`  property of  `HTMLElement` .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "TopBannerExpanded.class",
                    "navPath": "@nav[mkdocs-ts]/DefaultLayout.TopBannerExpanded.class",
                    "code": {
                        "filePath": "src/lib/default-layout/top-banner.view.ts",
                        "declaration": "public readonly class = `${TopBannerExpanded.CssSelector} mkdocs-bg-5 mkdocs-text-5 border-bottom d-flex justify-content-center py-1`",
                        "implementation": "",
                        "startLine": 275,
                        "endLine": 276,
                        "references": {
                            "class": "@nav[mkdocs-ts]/DefaultLayout.TopBannerExpanded.class"
                        }
                    }
                },
                {
                    "name": "tag",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The tag of the element, equivalent to the  `tagName`  property of  `HTMLElement` .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "TopBannerExpanded.tag",
                    "navPath": "@nav[mkdocs-ts]/DefaultLayout.TopBannerExpanded.tag",
                    "code": {
                        "filePath": "src/lib/default-layout/top-banner.view.ts",
                        "declaration": "public readonly tag = 'div'",
                        "implementation": "",
                        "startLine": 273,
                        "endLine": 274,
                        "references": {
                            "tag": "@nav[mkdocs-ts]/DefaultLayout.TopBannerExpanded.tag",
                            "VirtualDOM.tag": "/apps/@rx-vdom/doc/latest?nav=/api.VirtualDOM.tag"
                        }
                    }
                },
                {
                    "name": "CssSelector",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Component's class name for CSS query.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "TopBannerExpanded.CssSelector",
                    "navPath": "@nav[mkdocs-ts]/DefaultLayout.TopBannerExpanded.CssSelector",
                    "code": {
                        "filePath": "src/lib/default-layout/top-banner.view.ts",
                        "declaration": "static readonly CssSelector = 'mkdocs-TopBannerExpanded'",
                        "implementation": "",
                        "startLine": 272,
                        "endLine": 273,
                        "references": {
                            "CssSelector": "@nav[mkdocs-ts]/DefaultLayout.TopBannerExpanded.CssSelector"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/default-layout/top-banner.view.ts",
                "declaration": "export class TopBannerExpanded implements VirtualDOM<'div'>",
                "implementation": "export class TopBannerExpanded implements VirtualDOM<'div'> {\n    /**\n     * Component's class name for CSS query.\n     */\n    static readonly CssSelector = 'mkdocs-TopBannerExpanded'\n    public readonly tag = 'div'\n    public readonly children: ChildrenLike\n    public readonly class = `${TopBannerExpanded.CssSelector} mkdocs-bg-5 mkdocs-text-5 border-bottom d-flex justify-content-center py-1`\n\n    constructor({\n        router,\n        navigationBoundingBox$,\n        tocBoundingBox$,\n        spec,\n    }: {\n        router: Router\n        navigationBoundingBox$: Observable<DOMRect>\n        tocBoundingBox$: Observable<DOMRect>\n        spec: TopBannerSpec\n    }) {\n        const logo: AnyVirtualDOM = {\n            tag: 'div',\n            class: 'd-flex align-items-center justify-content-center mkdocs-hover-bg-5',\n            style: attr$({\n                source$: navigationBoundingBox$,\n                vdomMap: (navBox) => ({\n                    width: `${String(navBox.width)}px`,\n                }),\n            }),\n            children: [new Logo({ router, spec })],\n        }\n        const expandedContent =\n            typeof spec.expandedContent === 'function'\n                ? spec.expandedContent({ router })\n                : spec.expandedContent\n        this.children = [\n            logo,\n            {\n                tag: 'div',\n                class: 'flex-grow-1 d-flex flex-column justify-content-center',\n                children: [expandedContent],\n            },\n            {\n                tag: 'div',\n                class: 'd-flex justify-content-left',\n                style: attr$({\n                    source$: tocBoundingBox$,\n                    vdomMap: (tocBox) => ({\n                        width: `${String(tocBox.width)}px`,\n                        minWidth: 'fit-content',\n                    }),\n                }),\n                children: [spec.badge],\n            },\n        ]\n    }\n}",
                "startLine": 268,
                "endLine": 325,
                "references": {
                    "TopBannerExpanded": "@nav[mkdocs-ts]/DefaultLayout.TopBannerExpanded",
                    "Router": "@nav[mkdocs-ts].Router",
                    "TopBannerSpec": "@nav[mkdocs-ts]/DefaultLayout.TopBannerSpec",
                    "Observable": "https://rxjs.dev/guide/observable",
                    "DOMRect": "https://developer.mozilla.org/en-US/docs/Web/API/DOMRect",
                    "ChildrenLike": "/apps/@rx-vdom/doc/latest?nav=/api.ChildrenLike",
                    "VirtualDOM.children": "/apps/@rx-vdom/doc/latest?nav=/api.VirtualDOM.children",
                    "VirtualDOM.tag": "/apps/@rx-vdom/doc/latest?nav=/api.VirtualDOM.tag",
                    "VirtualDOM": "/apps/@rx-vdom/doc/latest?nav=/api.VirtualDOM"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "TopBannerMinimized",
            "documentation": {
                "sections": [
                    {
                        "content": "Compact top banner layout for small screens.\n\nLayout (left to right):\n- Toggle button to open/close navigation.\n- Logo and title.\n- Optional badge on the right.\n\nOptimized for mobile and narrow displays.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "TopBannerMinimized",
            "navPath": "@nav[mkdocs-ts]/DefaultLayout.TopBannerMinimized",
            "attributes": [
                {
                    "name": "children",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Children of the element.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "TopBannerMinimized.children",
                    "navPath": "@nav[mkdocs-ts]/DefaultLayout.TopBannerMinimized.children",
                    "code": {
                        "filePath": "src/lib/default-layout/top-banner.view.ts",
                        "declaration": "public readonly children: ChildrenLike",
                        "implementation": "",
                        "startLine": 223,
                        "endLine": 224,
                        "references": {
                            "children": "@nav[mkdocs-ts]/DefaultLayout.TopBannerMinimized.children",
                            "ChildrenLike": "/apps/@rx-vdom/doc/latest?nav=/api.ChildrenLike",
                            "VirtualDOM.children": "/apps/@rx-vdom/doc/latest?nav=/api.VirtualDOM.children"
                        }
                    }
                },
                {
                    "name": "class",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The class associated with the element, equivalent to the  `className`  property of  `HTMLElement` .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "TopBannerMinimized.class",
                    "navPath": "@nav[mkdocs-ts]/DefaultLayout.TopBannerMinimized.class",
                    "code": {
                        "filePath": "src/lib/default-layout/top-banner.view.ts",
                        "declaration": "public readonly class = `${TopBannerMinimized.CssSelector} mkdocs-bg-5 mkdocs-text-5 border-bottom d-flex  justify-content-center py-1`",
                        "implementation": "",
                        "startLine": 224,
                        "endLine": 225,
                        "references": {
                            "class": "@nav[mkdocs-ts]/DefaultLayout.TopBannerMinimized.class"
                        }
                    }
                },
                {
                    "name": "style",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The style associated with the element. Typically, for a static value:\n ```typescript\n{\n     tag: 'div',\n     style: {\n         backgroundColor: 'blue'\n     }\n}\n``` \nFor more details on hyphenated properties, see  <mkapi-ext-link href=\"/apps/@rx-vdom/doc/latest?nav=/api.CSSAttribute\">CSSAttribute</mkapi-ext-link> .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "TopBannerMinimized.style",
                    "navPath": "@nav[mkdocs-ts]/DefaultLayout.TopBannerMinimized.style",
                    "code": {
                        "filePath": "src/lib/default-layout/top-banner.view.ts",
                        "declaration": "public readonly style = {\n        cursor: 'pointer',\n    }",
                        "implementation": "",
                        "startLine": 225,
                        "endLine": 226,
                        "references": {
                            "style": "@nav[mkdocs-ts]/DefaultLayout.TopBannerMinimized.style"
                        }
                    }
                },
                {
                    "name": "tag",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The tag of the element, equivalent to the  `tagName`  property of  `HTMLElement` .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "TopBannerMinimized.tag",
                    "navPath": "@nav[mkdocs-ts]/DefaultLayout.TopBannerMinimized.tag",
                    "code": {
                        "filePath": "src/lib/default-layout/top-banner.view.ts",
                        "declaration": "public readonly tag = 'div'",
                        "implementation": "",
                        "startLine": 222,
                        "endLine": 223,
                        "references": {
                            "tag": "@nav[mkdocs-ts]/DefaultLayout.TopBannerMinimized.tag",
                            "VirtualDOM.tag": "/apps/@rx-vdom/doc/latest?nav=/api.VirtualDOM.tag"
                        }
                    }
                },
                {
                    "name": "CssSelector",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Component's class name for CSS query.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "TopBannerMinimized.CssSelector",
                    "navPath": "@nav[mkdocs-ts]/DefaultLayout.TopBannerMinimized.CssSelector",
                    "code": {
                        "filePath": "src/lib/default-layout/top-banner.view.ts",
                        "declaration": "static readonly CssSelector = 'mkdocs-TopBannerMinimized'",
                        "implementation": "",
                        "startLine": 221,
                        "endLine": 222,
                        "references": {
                            "CssSelector": "@nav[mkdocs-ts]/DefaultLayout.TopBannerMinimized.CssSelector"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/default-layout/top-banner.view.ts",
                "declaration": "export class TopBannerMinimized implements VirtualDOM<'div'>",
                "implementation": "export class TopBannerMinimized implements VirtualDOM<'div'> {\n    /**\n     * Component's class name for CSS query.\n     */\n    static readonly CssSelector = 'mkdocs-TopBannerMinimized'\n    public readonly tag = 'div'\n    public readonly children: ChildrenLike\n    public readonly class = `${TopBannerMinimized.CssSelector} mkdocs-bg-5 mkdocs-text-5 border-bottom d-flex  justify-content-center py-1`\n    public readonly style = {\n        cursor: 'pointer',\n    }\n    constructor(params: {\n        displayMode$: BehaviorSubject<DisplayMode>\n        router: Router\n        spec: Pick<TopBannerSpec, 'logo' | 'badge'>\n    }) {\n        this.children = [\n            {\n                tag: 'i',\n                class: 'mx-3',\n            },\n            new ToggleSidePanelButton({\n                displayMode$: params.displayMode$,\n                icon: 'fa-list-ul',\n            }),\n            {\n                tag: 'div',\n                class: 'flex-grow-1',\n            },\n            new Logo({ router: params.router, spec: params.spec }),\n            {\n                tag: 'div',\n                class: 'flex-grow-1',\n            },\n            params.spec.badge,\n            {\n                tag: 'i',\n                class: 'mx-3',\n            },\n        ]\n    }\n}",
                "startLine": 217,
                "endLine": 259,
                "references": {
                    "TopBannerMinimized": "@nav[mkdocs-ts]/DefaultLayout.TopBannerMinimized",
                    "DisplayMode": "@nav[mkdocs-ts]/DefaultLayout.DisplayMode",
                    "Router": "@nav[mkdocs-ts].Router",
                    "TopBannerSpec": "@nav[mkdocs-ts]/DefaultLayout.TopBannerSpec",
                    "BehaviorSubject": "https://www.learnrxjs.io/learn-rxjs/subjects/subject",
                    "Pick": "https://www.typescriptlang.org/docs/handbook/utility-types.html#picktype-keys",
                    "ChildrenLike": "/apps/@rx-vdom/doc/latest?nav=/api.ChildrenLike",
                    "VirtualDOM.children": "/apps/@rx-vdom/doc/latest?nav=/api.VirtualDOM.children",
                    "VirtualDOM.tag": "/apps/@rx-vdom/doc/latest?nav=/api.VirtualDOM.tag",
                    "VirtualDOM": "/apps/@rx-vdom/doc/latest?nav=/api.VirtualDOM"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "DefaultLayoutParams",
            "documentation": {
                "sections": [
                    {
                        "content": "Parameters to construct a new default layout  <mkapi-api-link nav=\"@nav[mkdocs-ts]/DefaultLayout.Layout\" semantic=\"class\">Layout</mkapi-api-link>  (also used by the layout  <mkapi-api-link nav=\"@nav[mkdocs-ts]/DefaultLayout.LayoutWithCompanion\" semantic=\"class\">LayoutWithCompanion</mkapi-api-link> ).",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "DefaultLayoutParams",
            "navPath": "@nav[mkdocs-ts]/DefaultLayout.DefaultLayoutParams",
            "attributes": [
                {
                    "name": "bookmarks$",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Enables bookmarking functionality within navigation nodes.\n\nWhen provided, a <button class='btn btn-sm btn-light fas fa-bookmark'></button> toggle button\nwill appear in selected navigation node's header. This allows users to \"pin\" pages they want\nto access quickly.\n\nIt's typically used in conjunction with the  <mkapi-api-link nav=\"@nav[mkdocs-ts]/DefaultLayout.BookmarksView\" semantic=\"class\">BookmarksView</mkapi-api-link>  component in the top banner,\nwhich displays the list of bookmarks.\n\nThe consumer should initialize this observable with the default list of bookmarked navigation paths.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "DefaultLayoutParams.bookmarks$",
                    "navPath": "@nav[mkdocs-ts]/DefaultLayout.DefaultLayoutParams.bookmarks$",
                    "code": {
                        "filePath": "src/lib/default-layout/common.ts",
                        "declaration": "bookmarks$?: BehaviorSubject<string[]>",
                        "implementation": "",
                        "startLine": 277,
                        "endLine": 278,
                        "references": {
                            "bookmarks$": "@nav[mkdocs-ts]/DefaultLayout.DefaultLayoutParams.bookmarks$",
                            "BehaviorSubject": "https://www.learnrxjs.io/learn-rxjs/subjects/subject"
                        }
                    }
                },
                {
                    "name": "displayOptions",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Display options, mostly regarding sizing of the main elements in the page. Values provided - if any -\nare merged with  <mkapi-api-link nav=\"@nav[mkdocs-ts]/DefaultLayout.defaultDisplayOptions\" semantic=\"global\">defaultDisplayOptions</mkapi-api-link> .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "DefaultLayoutParams.displayOptions",
                    "navPath": "@nav[mkdocs-ts]/DefaultLayout.DefaultLayoutParams.displayOptions",
                    "code": {
                        "filePath": "src/lib/default-layout/common.ts",
                        "declaration": "displayOptions?: Partial<DisplayOptions<ExtraDisplayOption>>",
                        "implementation": "",
                        "startLine": 264,
                        "endLine": 265,
                        "references": {
                            "displayOptions": "@nav[mkdocs-ts]/DefaultLayout.DefaultLayoutParams.displayOptions",
                            "DisplayOptions": "@nav[mkdocs-ts]/DefaultLayout.DisplayOptions",
                            "Partial": "https://www.typescriptlang.org/docs/handbook/utility-types.html#partialtype"
                        }
                    }
                },
                {
                    "name": "footer",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "A custom footer.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "DefaultLayoutParams.footer",
                    "navPath": "@nav[mkdocs-ts]/DefaultLayout.DefaultLayoutParams.footer",
                    "code": {
                        "filePath": "src/lib/default-layout/common.ts",
                        "declaration": "footer?: AnyView",
                        "implementation": "",
                        "startLine": 246,
                        "endLine": 247,
                        "references": {
                            "footer": "@nav[mkdocs-ts]/DefaultLayout.DefaultLayoutParams.footer",
                            "AnyView": "@nav[mkdocs-ts].AnyView"
                        }
                    }
                },
                {
                    "name": "navFooter",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Whether to include a **Previous** / **Next** navigation banner in the footer.\nSee  <mkapi-api-link nav=\"@nav[mkdocs-ts]/DefaultLayout.NavFooterView\" semantic=\"class\">NavFooterView</mkapi-api-link> .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "DefaultLayoutParams.navFooter",
                    "navPath": "@nav[mkdocs-ts]/DefaultLayout.DefaultLayoutParams.navFooter",
                    "code": {
                        "filePath": "src/lib/default-layout/common.ts",
                        "declaration": "navFooter?: boolean",
                        "implementation": "",
                        "startLine": 252,
                        "endLine": 253,
                        "references": {
                            "navFooter": "@nav[mkdocs-ts]/DefaultLayout.DefaultLayoutParams.navFooter"
                        }
                    }
                },
                {
                    "name": "page",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "An optional content generator for the page, replacing the default  <mkapi-api-link nav=\"@nav[mkdocs-ts]/DefaultLayout.PageView\" semantic=\"class\">PageView</mkapi-api-link> .\n\nThe provided type must emit itself as an  `HTMLElement`  through the  `content$`  observable\nwhenever it completes an update triggered by a change in the navigation path.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "DefaultLayoutParams.page",
                    "navPath": "@nav[mkdocs-ts]/DefaultLayout.DefaultLayoutParams.page",
                    "code": {
                        "filePath": "src/lib/default-layout/common.ts",
                        "declaration": "page?: LayoutElementView<AnyView & { content$: ReplaySubject<HTMLElement> }>",
                        "implementation": "",
                        "startLine": 259,
                        "endLine": 260,
                        "references": {
                            "page": "@nav[mkdocs-ts]/DefaultLayout.DefaultLayoutParams.page",
                            "LayoutElementView": "@nav[mkdocs-ts]/DefaultLayout.LayoutElementView",
                            "AnyView": "@nav[mkdocs-ts].AnyView",
                            "ReplaySubject": "https://www.learnrxjs.io/learn-rxjs/subjects/replaysubject",
                            "HTMLElement": "https://www.typescriptlang.org/docs/handbook/dom-manipulation.html"
                        }
                    }
                },
                {
                    "name": "router",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Application router.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "DefaultLayoutParams.router",
                    "navPath": "@nav[mkdocs-ts]/DefaultLayout.DefaultLayoutParams.router",
                    "code": {
                        "filePath": "src/lib/default-layout/common.ts",
                        "declaration": "router: Router<NavLayout, NavHeader>",
                        "implementation": "",
                        "startLine": 238,
                        "endLine": 239,
                        "references": {
                            "router": "@nav[mkdocs-ts]/DefaultLayout.DefaultLayoutParams.router",
                            "Router": "@nav[mkdocs-ts].Router",
                            "NavLayout": "@nav[mkdocs-ts]/DefaultLayout.NavLayout",
                            "NavHeader": "@nav[mkdocs-ts]/DefaultLayout.NavHeader"
                        }
                    }
                },
                {
                    "name": "topBanner",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Top banner specification.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "DefaultLayoutParams.topBanner",
                    "navPath": "@nav[mkdocs-ts]/DefaultLayout.DefaultLayoutParams.topBanner",
                    "code": {
                        "filePath": "src/lib/default-layout/common.ts",
                        "declaration": "topBanner?: TopBannerSpec",
                        "implementation": "",
                        "startLine": 242,
                        "endLine": 243,
                        "references": {
                            "topBanner": "@nav[mkdocs-ts]/DefaultLayout.DefaultLayoutParams.topBanner",
                            "TopBannerSpec": "@nav[mkdocs-ts]/DefaultLayout.TopBannerSpec"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/default-layout/common.ts",
                "declaration": "export interface DefaultLayoutParams<\n    // eslint-disable-next-line @typescript-eslint/no-empty-object-type\n    ExtraDisplayOption extends Record<string, unknown> = {},\n>",
                "implementation": "export interface DefaultLayoutParams<\n    // eslint-disable-next-line @typescript-eslint/no-empty-object-type\n    ExtraDisplayOption extends Record<string, unknown> = {},\n> {\n    /**\n     * Application router.\n     */\n    router: Router<NavLayout, NavHeader>\n    /**\n     * Top banner specification.\n     */\n    topBanner?: TopBannerSpec\n    /**\n     * A custom footer.\n     */\n    footer?: AnyView\n    /**\n     * Whether to include a **Previous** / **Next** navigation banner in the footer.\n     * See {@link NavFooterView}.\n     *\n     */\n    navFooter?: boolean\n    /**\n     * An optional content generator for the page, replacing the default {@link PageView}.\n     *\n     * The provided type must emit itself as an `HTMLElement` through the `content$` observable\n     * whenever it completes an update triggered by a change in the navigation path.\n     */\n    page?: LayoutElementView<AnyView & { content$: ReplaySubject<HTMLElement> }>\n    /**\n     * Display options, mostly regarding sizing of the main elements in the page. Values provided - if any -\n     * are merged with {@link defaultDisplayOptions}.\n     */\n    displayOptions?: Partial<DisplayOptions<ExtraDisplayOption>>\n    /**\n     * Enables bookmarking functionality within navigation nodes.\n     *\n     * When provided, a <button class='btn btn-sm btn-light fas fa-bookmark'></button> toggle button\n     * will appear in selected navigation node's header. This allows users to \"pin\" pages they want\n     * to access quickly.\n     *\n     * It's typically used in conjunction with the {@link BookmarksView} component in the top banner,\n     * which displays the list of bookmarks.\n     *\n     * The consumer should initialize this observable with the default list of bookmarked navigation paths.\n     */\n    bookmarks$?: BehaviorSubject<string[]>\n}",
                "startLine": 231,
                "endLine": 279,
                "references": {
                    "DefaultLayoutParams": "@nav[mkdocs-ts]/DefaultLayout.DefaultLayoutParams",
                    "DisplayOptions": "@nav[mkdocs-ts]/DefaultLayout.DisplayOptions",
                    "AnyView": "@nav[mkdocs-ts].AnyView",
                    "LayoutElementView": "@nav[mkdocs-ts]/DefaultLayout.LayoutElementView",
                    "Router": "@nav[mkdocs-ts].Router",
                    "NavLayout": "@nav[mkdocs-ts]/DefaultLayout.NavLayout",
                    "NavHeader": "@nav[mkdocs-ts]/DefaultLayout.NavHeader",
                    "TopBannerSpec": "@nav[mkdocs-ts]/DefaultLayout.TopBannerSpec",
                    "BehaviorSubject": "https://www.learnrxjs.io/learn-rxjs/subjects/subject",
                    "Partial": "https://www.typescriptlang.org/docs/handbook/utility-types.html#partialtype",
                    "ReplaySubject": "https://www.learnrxjs.io/learn-rxjs/subjects/replaysubject",
                    "HTMLElement": "https://www.typescriptlang.org/docs/handbook/dom-manipulation.html",
                    "Record": "https://www.typescriptlang.org/docs/handbook/utility-types.html#recordkeys-type"
                }
            },
            "semantic": {
                "role": "interface",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "NavHeaderSpec",
            "documentation": {
                "sections": [
                    {
                        "content": "Defines attributes regarding the visual rendering of the node if the navigation view.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "NavHeaderSpec",
            "navPath": "@nav[mkdocs-ts]/DefaultLayout.NavHeaderSpec",
            "attributes": [
                {
                    "name": "actions",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Optional actions, inserted after the node's name.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "NavHeaderSpec.actions",
                    "navPath": "@nav[mkdocs-ts]/DefaultLayout.NavHeaderSpec.actions",
                    "code": {
                        "filePath": "src/lib/default-layout/common.ts",
                        "declaration": "actions?: ChildrenLike",
                        "implementation": "",
                        "startLine": 163,
                        "endLine": 164,
                        "references": {
                            "actions": "@nav[mkdocs-ts]/DefaultLayout.NavHeaderSpec.actions",
                            "ChildrenLike": "/apps/@rx-vdom/doc/latest?nav=/api.ChildrenLike"
                        }
                    }
                },
                {
                    "name": "icon",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Optional icon, inserted before the node's name.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "NavHeaderSpec.icon",
                    "navPath": "@nav[mkdocs-ts]/DefaultLayout.NavHeaderSpec.icon",
                    "code": {
                        "filePath": "src/lib/default-layout/common.ts",
                        "declaration": "icon?: ChildLike",
                        "implementation": "",
                        "startLine": 155,
                        "endLine": 156,
                        "references": {
                            "icon": "@nav[mkdocs-ts]/DefaultLayout.NavHeaderSpec.icon",
                            "ChildLike": "/apps/@rx-vdom/doc/latest?nav=/api.ChildLike"
                        }
                    }
                },
                {
                    "name": "name",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "If provided, use this definition to render the node's name, instead just displaying the name.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "NavHeaderSpec.name",
                    "navPath": "@nav[mkdocs-ts]/DefaultLayout.NavHeaderSpec.name",
                    "code": {
                        "filePath": "src/lib/default-layout/common.ts",
                        "declaration": "name?: ChildLike",
                        "implementation": "",
                        "startLine": 159,
                        "endLine": 160,
                        "references": {
                            "name": "@nav[mkdocs-ts]/DefaultLayout.NavHeaderSpec.name",
                            "ChildLike": "/apps/@rx-vdom/doc/latest?nav=/api.ChildLike"
                        }
                    }
                },
                {
                    "name": "wrapperClass",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Optional class added as wrapper to the HTML element representing the node.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "NavHeaderSpec.wrapperClass",
                    "navPath": "@nav[mkdocs-ts]/DefaultLayout.NavHeaderSpec.wrapperClass",
                    "code": {
                        "filePath": "src/lib/default-layout/common.ts",
                        "declaration": "wrapperClass?: AttributeLike<string>",
                        "implementation": "",
                        "startLine": 151,
                        "endLine": 152,
                        "references": {
                            "wrapperClass": "@nav[mkdocs-ts]/DefaultLayout.NavHeaderSpec.wrapperClass",
                            "AttributeLike": "/apps/@rx-vdom/doc/latest?nav=/api.AttributeLike"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/default-layout/common.ts",
                "declaration": "export interface NavHeaderSpec",
                "implementation": "export interface NavHeaderSpec {\n    /**\n     * Optional class added as wrapper to the HTML element representing the node.\n     */\n    wrapperClass?: AttributeLike<string>\n    /**\n     * Optional icon, inserted before the node's name.\n     */\n    icon?: ChildLike\n    /**\n     * If provided, use this definition to render the node's name, instead just displaying the name.\n     */\n    name?: ChildLike\n    /**\n     * Optional actions, inserted after the node's name.\n     */\n    actions?: ChildrenLike\n}",
                "startLine": 147,
                "endLine": 165,
                "references": {
                    "NavHeaderSpec": "@nav[mkdocs-ts]/DefaultLayout.NavHeaderSpec",
                    "ChildrenLike": "/apps/@rx-vdom/doc/latest?nav=/api.ChildrenLike",
                    "ChildLike": "/apps/@rx-vdom/doc/latest?nav=/api.ChildLike",
                    "AttributeLike": "/apps/@rx-vdom/doc/latest?nav=/api.AttributeLike"
                }
            },
            "semantic": {
                "role": "interface",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "TopBannerSpec",
            "documentation": {
                "sections": [
                    {
                        "content": "Defines the content and structure of the  <mkapi-api-link nav=\"@nav[mkdocs-ts]/DefaultLayout.TopBanner\" semantic=\"class\">TopBanner</mkapi-api-link>  component.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "TopBannerSpec",
            "navPath": "@nav[mkdocs-ts]/DefaultLayout.TopBannerSpec",
            "attributes": [
                {
                    "name": "badge",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Optional badge or UI element displayed on the right side of the banner.\nOften used to show status indicators or short links (e.g. GitHub, Profile link).",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "TopBannerSpec.badge",
                    "navPath": "@nav[mkdocs-ts]/DefaultLayout.TopBannerSpec.badge",
                    "code": {
                        "filePath": "src/lib/default-layout/common.ts",
                        "declaration": "badge?: AnyView",
                        "implementation": "",
                        "startLine": 218,
                        "endLine": 219,
                        "references": {
                            "badge": "@nav[mkdocs-ts]/DefaultLayout.TopBannerSpec.badge",
                            "AnyView": "@nav[mkdocs-ts].AnyView"
                        }
                    }
                },
                {
                    "name": "expandedContent",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Optional content to display in the center of the banner in large-screen mode.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "TopBannerSpec.expandedContent",
                    "navPath": "@nav[mkdocs-ts]/DefaultLayout.TopBannerSpec.expandedContent",
                    "code": {
                        "filePath": "src/lib/default-layout/common.ts",
                        "declaration": "expandedContent?: AnyView | ((p: { router: Router }) => AnyView)",
                        "implementation": "",
                        "startLine": 213,
                        "endLine": 214,
                        "references": {
                            "expandedContent": "@nav[mkdocs-ts]/DefaultLayout.TopBannerSpec.expandedContent",
                            "AnyView": "@nav[mkdocs-ts].AnyView",
                            "Router": "@nav[mkdocs-ts].Router"
                        }
                    }
                },
                {
                    "name": "footer",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Optional top banner footer.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "TopBannerSpec.footer",
                    "navPath": "@nav[mkdocs-ts]/DefaultLayout.TopBannerSpec.footer",
                    "code": {
                        "filePath": "src/lib/default-layout/common.ts",
                        "declaration": "footer?: (p: {\n        router: Router\n        navigationBoundingBox$: Observable<BBox>\n        tocBoundingBox$: Observable<BBox>\n        pageScrollTop$: Observable<number>\n    }) => AnyView",
                        "implementation": "",
                        "startLine": 203,
                        "endLine": 204,
                        "references": {
                            "footer": "@nav[mkdocs-ts]/DefaultLayout.TopBannerSpec.footer",
                            "BBox": "@nav[mkdocs-ts]/DefaultLayout.BBox",
                            "Router": "@nav[mkdocs-ts].Router",
                            "AnyView": "@nav[mkdocs-ts].AnyView",
                            "Observable": "https://rxjs.dev/guide/observable"
                        }
                    }
                },
                {
                    "name": "header",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Optional top banner header.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "TopBannerSpec.header",
                    "navPath": "@nav[mkdocs-ts]/DefaultLayout.TopBannerSpec.header",
                    "code": {
                        "filePath": "src/lib/default-layout/common.ts",
                        "declaration": "header?: (p: {\n        router: Router\n        navigationBoundingBox$: Observable<BBox>\n        tocBoundingBox$: Observable<BBox>\n        pageScrollTop$: Observable<number>\n    }) => AnyView",
                        "implementation": "",
                        "startLine": 194,
                        "endLine": 195,
                        "references": {
                            "header": "@nav[mkdocs-ts]/DefaultLayout.TopBannerSpec.header",
                            "BBox": "@nav[mkdocs-ts]/DefaultLayout.BBox",
                            "Router": "@nav[mkdocs-ts].Router",
                            "AnyView": "@nav[mkdocs-ts].AnyView",
                            "Observable": "https://rxjs.dev/guide/observable"
                        }
                    }
                },
                {
                    "name": "logo",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Define the logo of the application.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "TopBannerSpec.logo",
                    "navPath": "@nav[mkdocs-ts]/DefaultLayout.TopBannerSpec.logo",
                    "code": {
                        "filePath": "src/lib/default-layout/common.ts",
                        "declaration": "logo: {\n        /**\n         * Icon specification.\n         * When a `string` is provided, it is interpreted as an URL.\n         */\n        icon: string | AnyView\n        /**\n         * Title of the logo.\n         */\n        title: string\n    }",
                        "implementation": "",
                        "startLine": 180,
                        "endLine": 181,
                        "references": {
                            "logo": "@nav[mkdocs-ts]/DefaultLayout.TopBannerSpec.logo",
                            "AnyView": "@nav[mkdocs-ts].AnyView"
                        }
                    }
                },
                {
                    "name": "zIndex",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Optional z-index associated to the top-banner style, default is  `100` .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "TopBannerSpec.zIndex",
                    "navPath": "@nav[mkdocs-ts]/DefaultLayout.TopBannerSpec.zIndex",
                    "code": {
                        "filePath": "src/lib/default-layout/common.ts",
                        "declaration": "zIndex?: number",
                        "implementation": "",
                        "startLine": 223,
                        "endLine": 224,
                        "references": {
                            "zIndex": "@nav[mkdocs-ts]/DefaultLayout.TopBannerSpec.zIndex"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/default-layout/common.ts",
                "declaration": "export interface TopBannerSpec",
                "implementation": "export interface TopBannerSpec {\n    /**\n     * Define the logo of the application.\n     */\n    logo: {\n        /**\n         * Icon specification.\n         * When a `string` is provided, it is interpreted as an URL.\n         */\n        icon: string | AnyView\n        /**\n         * Title of the logo.\n         */\n        title: string\n    }\n    /**\n     * Optional top banner header.\n     */\n    header?: (p: {\n        router: Router\n        navigationBoundingBox$: Observable<BBox>\n        tocBoundingBox$: Observable<BBox>\n        pageScrollTop$: Observable<number>\n    }) => AnyView\n    /**\n     * Optional top banner footer.\n     */\n    footer?: (p: {\n        router: Router\n        navigationBoundingBox$: Observable<BBox>\n        tocBoundingBox$: Observable<BBox>\n        pageScrollTop$: Observable<number>\n    }) => AnyView\n\n    /**\n     * Optional content to display in the center of the banner in large-screen mode.\n     */\n    expandedContent?: AnyView | ((p: { router: Router }) => AnyView)\n    /**\n     * Optional badge or UI element displayed on the right side of the banner.\n     * Often used to show status indicators or short links (e.g. GitHub, Profile link).\n     */\n    badge?: AnyView\n\n    /**\n     * Optional z-index associated to the top-banner style, default is `100`.\n     */\n    zIndex?: number\n}",
                "startLine": 176,
                "endLine": 225,
                "references": {
                    "TopBannerSpec": "@nav[mkdocs-ts]/DefaultLayout.TopBannerSpec",
                    "AnyView": "@nav[mkdocs-ts].AnyView",
                    "Router": "@nav[mkdocs-ts].Router",
                    "BBox": "@nav[mkdocs-ts]/DefaultLayout.BBox",
                    "Observable": "https://rxjs.dev/guide/observable"
                }
            },
            "semantic": {
                "role": "interface",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "BBox",
            "documentation": {
                "sections": [
                    {
                        "content": "Specification of a bounding box, used e.g. by  <mkapi-api-link nav=\"@nav[mkdocs-ts]/DefaultLayout.LayoutObserver\" semantic=\"class\">LayoutObserver</mkapi-api-link> .",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "BBox",
            "navPath": "@nav[mkdocs-ts]/DefaultLayout.BBox",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/default-layout/common.ts",
                "declaration": "export type BBox = Pick<DOMRect, 'width' | 'height'>",
                "implementation": "",
                "startLine": 353,
                "endLine": 354,
                "references": {
                    "BBox": "@nav[mkdocs-ts]/DefaultLayout.BBox",
                    "Pick": "https://www.typescriptlang.org/docs/handbook/utility-types.html#picktype-keys",
                    "DOMRect": "https://developer.mozilla.org/en-US/docs/Web/API/DOMRect"
                }
            },
            "semantic": {
                "role": "type-alias",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "BBox$",
            "documentation": {
                "sections": [
                    {
                        "content": "Observable of  <mkapi-api-link nav=\"@nav[mkdocs-ts]/DefaultLayout.BBox\" semantic=\"type-alias\">BBox</mkapi-api-link> , see  <mkapi-api-link nav=\"@nav[mkdocs-ts]/DefaultLayout.LayoutObserver\" semantic=\"class\">LayoutObserver</mkapi-api-link> .",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "BBox$",
            "navPath": "@nav[mkdocs-ts]/DefaultLayout.BBox$",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/default-layout/common.ts",
                "declaration": "export type BBox$ = Observable<BBox>",
                "implementation": "",
                "startLine": 358,
                "endLine": 359,
                "references": {
                    "BBox$": "@nav[mkdocs-ts]/DefaultLayout.BBox$",
                    "BBox": "@nav[mkdocs-ts]/DefaultLayout.BBox",
                    "Observable": "https://rxjs.dev/guide/observable"
                }
            },
            "semantic": {
                "role": "type-alias",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "ClientContentView",
            "documentation": {
                "sections": [
                    {
                        "content": "Defines the main content view of the page.\nIf a  `string`  is provided, its is interpreted as a URL from which a GET request is issued to retrieve some markdown\nsource that is then parsed using the  <mkapi-api-link nav=\"@nav[mkdocs-ts].parseMd\" semantic=\"function\">parseMd</mkapi-api-link>  function.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "ClientContentView",
            "navPath": "@nav[mkdocs-ts]/DefaultLayout.ClientContentView",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/default-layout/common.ts",
                "declaration": "export type ClientContentView =\n    | ((params: { router: Router<NavLayout> }) => NavLayoutView)\n    | string",
                "implementation": "",
                "startLine": 298,
                "endLine": 299,
                "references": {
                    "ClientContentView": "@nav[mkdocs-ts]/DefaultLayout.ClientContentView",
                    "Router": "@nav[mkdocs-ts].Router",
                    "NavLayout": "@nav[mkdocs-ts]/DefaultLayout.NavLayout",
                    "NavLayoutView": "@nav[mkdocs-ts]/DefaultLayout.NavLayoutView"
                }
            },
            "semantic": {
                "role": "type-alias",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "ClientTocView",
            "documentation": {
                "sections": [
                    {
                        "content": "Defines the view for the table of contents (TOC) within the page.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "ClientTocView",
            "navPath": "@nav[mkdocs-ts]/DefaultLayout.ClientTocView",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/default-layout/common.ts",
                "declaration": "export type ClientTocView = (params: {\n    html: HTMLElement\n    router: Router\n}) => NavLayoutView",
                "implementation": "",
                "startLine": 310,
                "endLine": 311,
                "references": {
                    "ClientTocView": "@nav[mkdocs-ts]/DefaultLayout.ClientTocView",
                    "Router": "@nav[mkdocs-ts].Router",
                    "NavLayoutView": "@nav[mkdocs-ts]/DefaultLayout.NavLayoutView",
                    "HTMLElement": "https://www.typescriptlang.org/docs/handbook/dom-manipulation.html"
                }
            },
            "semantic": {
                "role": "type-alias",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "DisabledTocMarker",
            "documentation": {
                "sections": [
                    {
                        "content": "Marker for disabled TOC.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "DisabledTocMarker",
            "navPath": "@nav[mkdocs-ts]/DefaultLayout.DisabledTocMarker",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/default-layout/common.ts",
                "declaration": "export type DisabledTocMarker = 'disabled'",
                "implementation": "",
                "startLine": 318,
                "endLine": 319,
                "references": {
                    "DisabledTocMarker": "@nav[mkdocs-ts]/DefaultLayout.DisabledTocMarker"
                }
            },
            "semantic": {
                "role": "type-alias",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "DisplayMode",
            "documentation": {
                "sections": [
                    {
                        "content": "Represents the display mode for UI components, controlling their visibility and behavior.\n\n**Possible Values**:\n\n-  `'pined'` :\n  The component remains fixed and always visible, regardless of user interaction.\n\n-  `'hidden'` :\n  The component is not visible and does not occupy space in the layout.\n\n-  `'expanded'` :\n  The component is fully visible and occupies its allocated space, often as a primary focus.\n\nThis type is typically used to configure the visibility states of side panel elements.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "DisplayMode",
            "navPath": "@nav[mkdocs-ts]/DefaultLayout.DisplayMode",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/default-layout/common.ts",
                "declaration": "export type DisplayMode = 'pined' | 'hidden' | 'expanded' | 'removed'",
                "implementation": "",
                "startLine": 42,
                "endLine": 43,
                "references": {
                    "DisplayMode": "@nav[mkdocs-ts]/DefaultLayout.DisplayMode"
                }
            },
            "semantic": {
                "role": "type-alias",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "DisplayModeOptions",
            "documentation": {
                "sections": [
                    {
                        "content": "Structure used by the  <mkapi-api-link nav=\"@nav[mkdocs-ts]/DefaultLayout.LayoutObserver\" semantic=\"class\">LayoutObserver</mkapi-api-link>  regarding display mode.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "DisplayModeOptions",
            "navPath": "@nav[mkdocs-ts]/DefaultLayout.DisplayModeOptions",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/default-layout/common.ts",
                "declaration": "export type DisplayModeOptions = Pick<\n    DisplayOptions,\n    | 'forceTocDisplayMode'\n    | 'toggleTocWidth'\n    | 'toggleNavWidth'\n    | 'forceNavDisplayMode'\n>",
                "implementation": "",
                "startLine": 363,
                "endLine": 364,
                "references": {
                    "DisplayModeOptions": "@nav[mkdocs-ts]/DefaultLayout.DisplayModeOptions",
                    "DisplayOptions": "@nav[mkdocs-ts]/DefaultLayout.DisplayOptions",
                    "Pick": "https://www.typescriptlang.org/docs/handbook/utility-types.html#picktype-keys"
                }
            },
            "semantic": {
                "role": "type-alias",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "DisplayOptions",
            "documentation": {
                "sections": [
                    {
                        "content": "Hints regarding sizing of the main elements on the page.\n\nThe 'page' element refers to the text-content area.\n\nSee  <mkapi-api-link nav=\"@nav[mkdocs-ts]/DefaultLayout.defaultDisplayOptions\" semantic=\"global\">defaultDisplayOptions</mkapi-api-link> .",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "DisplayOptions",
            "navPath": "@nav[mkdocs-ts]/DefaultLayout.DisplayOptions",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/default-layout/common.ts",
                "declaration": "export type DisplayOptions<\n    // eslint-disable-next-line @typescript-eslint/no-empty-object-type\n    ExtraDisplayOption extends Record<string, unknown> = {},\n> = {\n    /**\n     * Screen size in pixel transitioning from pined Navigation panel, to\n     * collapsable one.\n     */\n    toggleNavWidth: number\n    /**\n     * Screen size in pixel transitioning from pined TOC panel, to\n     * collapsable one.\n     */\n    toggleTocWidth: number\n    /**\n     * Minimum width for the TOC panel in pixel.\n     */\n    tocMinWidth: number\n    /**\n     * Maximum width for the TOC panel in pixel.\n     */\n    tocMaxWidth: number\n    /**\n     * Minimum width for the navigation panel in CSS unit (e.g. `25rem`).\n     */\n    navMinWidth: string\n    /**\n     * Maximum width for the navigation panel in pixel.\n     */\n    navMaxWidth: number\n    /**\n     * Z-Index for the navigation & TOC panels.\n     */\n    sidePanelsZIndex: number\n    /**\n     * Page's width.\n     */\n    pageWidth: string\n    /**\n     * Page's vertical padding.\n     */\n    pageVertPadding: string\n    /**\n     * Translation duration for panels in ms.\n     */\n    translationTime: number\n\n    /**\n     * If defined, force the TOC display mode to this value.\n     */\n    forceTocDisplayMode: DisplayMode | undefined\n\n    /**\n     * If defined, force the Nav display mode to this value.\n     */\n    forceNavDisplayMode: DisplayMode | undefined\n} & ExtraDisplayOption",
                "implementation": "",
                "startLine": 53,
                "endLine": 54,
                "references": {
                    "DisplayOptions": "@nav[mkdocs-ts]/DefaultLayout.DisplayOptions",
                    "DisplayMode": "@nav[mkdocs-ts]/DefaultLayout.DisplayMode",
                    "Record": "https://www.typescriptlang.org/docs/handbook/utility-types.html#recordkeys-type"
                }
            },
            "semantic": {
                "role": "type-alias",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "FaIconsList",
            "documentation": {
                "sections": [
                    {
                        "content": "List of supported font-awesome icons.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "FaIconsList",
            "navPath": "@nav[mkdocs-ts]/DefaultLayout.FaIconsList",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/default-layout/fa-icons.ts",
                "declaration": "export type FaIconsList = keyof typeof bundledFaIcons",
                "implementation": "",
                "startLine": 63,
                "endLine": 64,
                "references": {
                    "FaIconsList": "@nav[mkdocs-ts]/DefaultLayout.FaIconsList",
                    "bundledFaIcons": "@nav[mkdocs-ts]/DefaultLayout.bundledFaIcons"
                }
            },
            "semantic": {
                "role": "type-alias",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "LayoutElementView",
            "documentation": {
                "sections": [
                    {
                        "content": "Represents a function that defines the structure and behavior of a layout\nelement view. This type allows customization of layout components.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    },
                    {
                        "title": "Generics",
                        "content": "\n*  **TView**: The target type of view.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "arguments",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "LayoutElementView",
            "navPath": "@nav[mkdocs-ts]/DefaultLayout.LayoutElementView",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/default-layout/common.ts",
                "declaration": "export type LayoutElementView<TView extends AnyView = AnyView> = (p: {\n    // Application's router\n    router: Router<NavLayout>\n    // The layout options provided.\n    layoutOptions: DisplayOptions\n    // Current bookmarked URLs\n    bookmarks$?: BehaviorSubject<string[]>\n}) => TView",
                "implementation": "",
                "startLine": 135,
                "endLine": 136,
                "references": {
                    "LayoutElementView": "@nav[mkdocs-ts]/DefaultLayout.LayoutElementView",
                    "AnyView": "@nav[mkdocs-ts].AnyView",
                    "DisplayOptions": "@nav[mkdocs-ts]/DefaultLayout.DisplayOptions",
                    "Router": "@nav[mkdocs-ts].Router",
                    "NavLayout": "@nav[mkdocs-ts]/DefaultLayout.NavLayout",
                    "BehaviorSubject": "https://www.learnrxjs.io/learn-rxjs/subjects/subject"
                }
            },
            "semantic": {
                "role": "type-alias",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "LayoutWithCompanionParams",
            "documentation": {
                "sections": [
                    {
                        "content": "Parameters for constructing  <mkapi-api-link nav=\"@nav[mkdocs-ts]/DefaultLayout.LayoutWithCompanion\" semantic=\"class\">LayoutWithCompanion</mkapi-api-link>  layout.\n\nMostly the  <mkapi-api-link nav=\"@nav[mkdocs-ts]/DefaultLayout.DefaultLayoutParams\" semantic=\"interface\">DefaultLayoutParams</mkapi-api-link> , to which is added:\n*   `companionNodes$`  provide handle regarding companion nodes selection.\n*   `companionWidth`  (included within display options), to control the width of the companion screen in percent.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "LayoutWithCompanionParams",
            "navPath": "@nav[mkdocs-ts]/DefaultLayout.LayoutWithCompanionParams",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/default-layout/companion-layout.view.ts",
                "declaration": "export type LayoutWithCompanionParams = DefaultLayoutParams<{\n    /**\n     * Width of the companion screen in percent, default to 40.\n     */\n    companionWidth?: number\n}> & {\n    /**\n     * A `BehaviorSubject` containing the URLs of companion nodes to be displayed\n     * in the companion screen. Children of the specified nodes are also displayed within that screen.\n     */\n    companionNodes$: BehaviorSubject<string[]>\n}",
                "implementation": "",
                "startLine": 43,
                "endLine": 44,
                "references": {
                    "LayoutWithCompanionParams": "@nav[mkdocs-ts]/DefaultLayout.LayoutWithCompanionParams",
                    "DefaultLayoutParams": "@nav[mkdocs-ts]/DefaultLayout.DefaultLayoutParams",
                    "BehaviorSubject": "https://www.learnrxjs.io/learn-rxjs/subjects/subject"
                }
            },
            "semantic": {
                "role": "type-alias",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "NavHeader",
            "documentation": {
                "sections": [
                    {
                        "content": "Defines header of  <mkapi-api-link nav=\"@nav[mkdocs-ts].Navigation\" semantic=\"type-alias\">Navigation</mkapi-api-link>  nodes, which determines how they are rendered in the navigation panel.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "NavHeader",
            "navPath": "@nav[mkdocs-ts]/DefaultLayout.NavHeader",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/default-layout/common.ts",
                "declaration": "export type NavHeader =\n    | NavHeaderSpec\n    | (({ router }: { router: Router }) => NavHeaderSpec)",
                "implementation": "",
                "startLine": 169,
                "endLine": 170,
                "references": {
                    "NavHeader": "@nav[mkdocs-ts]/DefaultLayout.NavHeader",
                    "NavHeaderSpec": "@nav[mkdocs-ts]/DefaultLayout.NavHeaderSpec",
                    "Router": "@nav[mkdocs-ts].Router"
                }
            },
            "semantic": {
                "role": "type-alias",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "NavLayout",
            "documentation": {
                "sections": [
                    {
                        "content": "Defines the  `layout`  structure for  <mkapi-api-link nav=\"@nav[mkdocs-ts].Navigation\" semantic=\"type-alias\">Navigation</mkapi-api-link>  nodes, which determines how a page's content is rendered.\n\nThese options apply to individual navigation nodes.\nFor global layout customizations, refer to the  <mkapi-api-link nav=\"@nav[mkdocs-ts]/DefaultLayout.Layout\" semantic=\"class\">Layout</mkapi-api-link>  constructor.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "NavLayout",
            "navPath": "@nav[mkdocs-ts]/DefaultLayout.NavLayout",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/default-layout/common.ts",
                "declaration": "export type NavLayout =\n    | {\n          /**\n           * Defines the view for the table of contents (TOC) within the page.\n           *\n           * <note level=\"warning\">\n           * The function is invoked **only once** when the page content is first rendered.\n           * If the TOC needs to be updated later due to content changes, this must be handled explicitly\n           * (e.g., by using mutation observers).\n           * </note>\n           */\n          toc?: DisabledTocMarker | ClientTocView\n\n          /**\n           * Defines the main content view of the page.\n           */\n          content: ClientContentView\n      }\n    | ClientContentView",
                "implementation": "",
                "startLine": 325,
                "endLine": 326,
                "references": {
                    "NavLayout": "@nav[mkdocs-ts]/DefaultLayout.NavLayout",
                    "ClientContentView": "@nav[mkdocs-ts]/DefaultLayout.ClientContentView",
                    "DisabledTocMarker": "@nav[mkdocs-ts]/DefaultLayout.DisabledTocMarker",
                    "ClientTocView": "@nav[mkdocs-ts]/DefaultLayout.ClientTocView"
                }
            },
            "semantic": {
                "role": "type-alias",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "NavLayoutView",
            "documentation": {
                "sections": [
                    {
                        "content": "Types that can be used to define views in  <mkapi-api-link nav=\"@nav[mkdocs-ts]/DefaultLayout.NavLayout\" semantic=\"type-alias\">NavLayout</mkapi-api-link> .\n\n<note level=\"hint\">\nFor scenario requiring reactivity of the view, an option is to use the  `RxChild`  type from  `ChildLike` .\n</note>",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "NavLayoutView",
            "navPath": "@nav[mkdocs-ts]/DefaultLayout.NavLayoutView",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/default-layout/common.ts",
                "declaration": "export type NavLayoutView = Resolvable<AnyView> | ChildLike",
                "implementation": "",
                "startLine": 287,
                "endLine": 288,
                "references": {
                    "NavLayoutView": "@nav[mkdocs-ts]/DefaultLayout.NavLayoutView",
                    "Resolvable": "@nav[mkdocs-ts].Resolvable",
                    "AnyView": "@nav[mkdocs-ts].AnyView",
                    "ChildLike": "/apps/@rx-vdom/doc/latest?nav=/api.ChildLike"
                }
            },
            "semantic": {
                "role": "type-alias",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        }
    ],
    "callables": [
        {
            "name": "handleInternalLinkClick",
            "documentation": {
                "sections": [
                    {
                        "content": "Intercepts and handles internal anchor ( `<a>` ) clicks intended for in-app navigation\nusing the  `@nav`  or  `@nav[alias]`  syntax.\n\nThis function is typically used in a global click event handler attached to a container element\n(e.g.,  `document.body` ) to enable single-page navigation without full page reloads.\n\nWhen an anchor element with an  `href`  starting with  `@nav`  is clicked:\n- The default browser navigation is prevented.\n- The link's  `href`  is resolved using the application's registered path aliases (if any).\n- The resolved navigation path is passed to the router for handling.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    },
                    {
                        "title": "Arguments",
                        "content": "\n*  **event**: The mouse event triggered by a user click.\n*  **router**: The application's router instance used to resolve and dispatch navigation.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "arguments",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "handleInternalLinkClick",
            "navPath": "@nav[mkdocs-ts]/DefaultLayout.handleInternalLinkClick",
            "code": {
                "filePath": "src/lib/default-layout/common.ts",
                "declaration": "export function handleInternalLinkClick({\n    event,\n    router,\n}: {\n    event: MouseEvent\n    router: Router\n})",
                "implementation": "export function handleInternalLinkClick({\n    event,\n    router,\n}: {\n    event: MouseEvent\n    router: Router\n}) {\n    const target = event.target\n    if (!(target instanceof HTMLElement)) {\n        return\n    }\n    const anchor = target.closest('a')\n    if (anchor) {\n        if (anchor.href.includes('@nav')) {\n            event.preventDefault()\n            event.stopPropagation()\n            const resolvedHRef = router.resolveHRef(anchor.href)\n            router.fireNavigateTo(resolvedHRef)\n        }\n    }\n}",
                "startLine": 605,
                "endLine": 626,
                "references": {
                    "handleInternalLinkClick": "@nav[mkdocs-ts]/DefaultLayout.handleInternalLinkClick",
                    "Router": "@nav[mkdocs-ts].Router",
                    "MouseEvent": "https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent"
                }
            },
            "semantic": {
                "role": "function",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "popupModal",
            "documentation": {
                "sections": [
                    {
                        "content": "Popup a modal on screen with a blury background.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    },
                    {
                        "title": "Arguments",
                        "content": "\n*  **content**: The content.\n*  **maxHeight**: Maximum height of the modal's display area.\n*  **maxWidth**: Maximum width of the modal's display area.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "arguments",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "popupModal",
            "navPath": "@nav[mkdocs-ts]/DefaultLayout.popupModal",
            "code": {
                "filePath": "src/lib/default-layout/modal.view.ts",
                "declaration": "export function popupModal({\n    content,\n    maxWidth,\n    maxHeight,\n}: {\n    content: AnyView\n    maxWidth?: string\n    maxHeight?: string\n})",
                "implementation": "export function popupModal({\n    content,\n    maxWidth,\n    maxHeight,\n}: {\n    content: AnyView\n    maxWidth?: string\n    maxHeight?: string\n}) {\n    let element: HTMLElement | undefined = undefined\n    maxWidth ??= '75%'\n    maxHeight ??= '75%'\n    const vdom: AnyVirtualDOM = {\n        tag: 'div',\n        style: {\n            position: 'absolute',\n            top: '0vh',\n            left: '0vw',\n            width: '100vw',\n            height: '100vh',\n            // 0 -> 100 for the page, 100 -> 200 for the side panels, modal above all.\n            zIndex: 200,\n            backdropFilter: 'blur(3px)',\n        },\n        class: 'd-flex flex-column justify-content-center',\n        children: [\n            {\n                tag: 'div',\n                class: `border rounded mx-auto overflow-auto`,\n                children: [content],\n                style: {\n                    maxHeight: maxHeight,\n                    maxWidth: maxWidth,\n                },\n                connectedCallback: (elem: HTMLElement) => {\n                    const firstChild = elem.firstChild as HTMLElement\n                    if (isSizeRelativeToParent(firstChild, 'width')) {\n                        elem.style.width = maxWidth\n                    }\n                    if (isSizeRelativeToParent(firstChild, 'height')) {\n                        elem.style.height = maxHeight\n                    }\n                },\n                onclick: (ev) => {\n                    ev.stopPropagation()\n                },\n            },\n        ],\n        connectedCallback: (elem: HTMLElement) => {\n            // noinspection ReuseOfLocalVariableJS\n            element = elem\n        },\n        onclick: () => {\n            if (element) {\n                element.remove()\n            }\n        },\n    }\n    document.body.appendChild(render(vdom))\n}",
                "startLine": 48,
                "endLine": 108,
                "references": {
                    "popupModal": "@nav[mkdocs-ts]/DefaultLayout.popupModal",
                    "AnyView": "@nav[mkdocs-ts].AnyView"
                }
            },
            "semantic": {
                "role": "function",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "tocView",
            "documentation": {
                "sections": [
                    {
                        "content": "Helper to specify a  `toc`  view in  <mkapi-api-link nav=\"@nav[mkdocs-ts]/DefaultLayout.NavLayout\" semantic=\"type-alias\">NavLayout</mkapi-api-link>  using the default  <mkapi-api-link nav=\"@nav[mkdocs-ts]/DefaultLayout.TOCView\" semantic=\"class\">TOCView</mkapi-api-link>  with a custom  `domConverter` \nfor rendering the  <mkapi-api-link nav=\"@nav[mkdocs-ts]/DefaultLayout.TocItemView\" semantic=\"class\">TocItemView</mkapi-api-link> .\n\n<note level='example'>\n<code-snippet language='javascript'>\n\nconst domConvertor = (heading: HTMLHeadingElement) => ({\n    tag: 'div',\n    class:'custom-class',\n    innerText: heading.innerText\n})\nconst layout: NavLayout = {\n    content: () => ({ tag:'h1', innerText: 'Title' }),\n    toc: ({router, html}) => tocView({html, router,domConvertor})\n}\n</code-snippet>\n</note>",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "tocView",
            "navPath": "@nav[mkdocs-ts]/DefaultLayout.tocView",
            "code": {
                "filePath": "src/lib/default-layout/toc.view.ts",
                "declaration": "export function tocView({\n    html,\n    router,\n    domConvertor,\n}: {\n    html: HTMLElement\n    router: Router\n    domConvertor?: (e: HTMLHeadingElement) => AnyVirtualDOM\n}): Promise<TOCView>",
                "implementation": "export function tocView({\n    html,\n    router,\n    domConvertor,\n}: {\n    html: HTMLElement\n    router: Router\n    domConvertor?: (e: HTMLHeadingElement) => AnyVirtualDOM\n}): Promise<TOCView> {\n    return Promise.resolve(new TOCView({ router: router, html, domConvertor }))\n}",
                "startLine": 523,
                "endLine": 534,
                "references": {
                    "tocView": "@nav[mkdocs-ts]/DefaultLayout.tocView",
                    "Router": "@nav[mkdocs-ts].Router",
                    "HTMLHeadingElement": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLHeadingElement",
                    "AnyVirtualDOM": "/apps/@rx-vdom/doc/latest?nav=/api.AnyVirtualDOM",
                    "HTMLElement": "https://www.typescriptlang.org/docs/handbook/dom-manipulation.html",
                    "TOCView": "@nav[mkdocs-ts]/DefaultLayout.TOCView",
                    "Promise": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise"
                }
            },
            "semantic": {
                "role": "function",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        }
    ],
    "files": [
        {
            "name": "top-banner.view.ts",
            "path": "src/lib/default-layout/top-banner.view.ts",
            "documentation": {
                "sections": []
            }
        },
        {
            "name": "small-screen.view.ts",
            "path": "src/lib/default-layout/small-screen.view.ts",
            "documentation": {
                "sections": []
            }
        },
        {
            "name": "page.view.ts",
            "path": "src/lib/default-layout/page.view.ts",
            "documentation": {
                "sections": []
            }
        },
        {
            "name": "footer.view.ts",
            "path": "src/lib/default-layout/footer.view.ts",
            "documentation": {
                "sections": []
            }
        },
        {
            "name": "nav-header.view.ts",
            "path": "src/lib/default-layout/nav-header.view.ts",
            "documentation": {
                "sections": []
            }
        },
        {
            "name": "default-layout.view.ts",
            "path": "src/lib/default-layout/default-layout.view.ts",
            "documentation": {
                "sections": []
            }
        },
        {
            "name": "common.ts",
            "path": "src/lib/default-layout/common.ts",
            "documentation": {
                "sections": []
            }
        },
        {
            "name": "companion-layout.view.ts",
            "path": "src/lib/default-layout/companion-layout.view.ts",
            "documentation": {
                "sections": []
            }
        },
        {
            "name": "navigation.view.ts",
            "path": "src/lib/default-layout/navigation.view.ts",
            "documentation": {
                "sections": []
            }
        },
        {
            "name": "toc.view.ts",
            "path": "src/lib/default-layout/toc.view.ts",
            "documentation": {
                "sections": []
            }
        },
        {
            "name": "fa-icons.ts",
            "path": "src/lib/default-layout/fa-icons.ts",
            "documentation": {
                "sections": []
            }
        },
        {
            "name": "modal.view.ts",
            "path": "src/lib/default-layout/modal.view.ts",
            "documentation": {
                "sections": []
            }
        }
    ],
    "children": [],
    "semantic": {
        "role": "module",
        "labels": [],
        "attributes": {},
        "relations": {}
    }
}
