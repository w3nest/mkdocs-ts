{
    "name": "MdWidgets",
    "documentation": {
        "sections": [
            {
                "content": "This module defines a collection of widgets that can be instantiated directly from Markdown\nsource when using the  <mkapi-api-link nav=\"@nav[mkdocs-ts].parseMd\" semantic=\"function\">parseMd</mkapi-api-link>  function. Widgets are referenced within  <mkapi-api-link nav=\"@nav[mkdocs-ts].GlobalMarkdownViews\" semantic=\"class\">GlobalMarkdownViews</mkapi-api-link> ,\nwhich maps  `tag-name -> implementation`  to enable seamless integration into Markdown content.\n\nEach widget provides a static  `fromHTMLElement`  method that specifies the attributes required for its instantiation.\n\n## Overview\n\nBelow are examples of the available widgets. For detailed documentation on their attributes and behavior,\nrefer to their respective sections. Additionally, you can create custom widgets and register them globally\nfor your application. See the section **New Widgets** for guidance.\n\n\n---\n\n###  <mkapi-api-link nav=\"@nav[mkdocs-ts]/MdWidgets.NoteView\" semantic=\"class\">NoteView</mkapi-api-link> \n\n<md-cell>\n\n<note level=\"info\">\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna\naliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\n</note>\n</md-cell>\n\n---\n\n###  <mkapi-api-link nav=\"@nav[mkdocs-ts]/MdWidgets.CodeSnippetView\" semantic=\"class\">CodeSnippetView</mkapi-api-link> \n\n<md-cell>\n<code-snippet language=\"javascript\" highlightedLines=\"8\">\n\nfunction compute({improbabilityFactor, babelFishCount, vogonPoetryExposure, towelAbsorbency }){\n    console.log(\"Computation complete! The result is 42\");\n    const result =\n        Math.log(improbabilityFactor + 42) +\n        babelFishCount === 1 ? 1 : Math.sqrt(babelFishCount) +\n        vogonPoetryExposure > 1000 ? -42 : vogonPoetryExposure / 100 +\n        towelAbsorbency * (Math.random() + 0.42)\n    return 42;\n}\n</code-snippet>\n</md-cell>\n\n---\n\n###  <mkapi-api-link nav=\"@nav[mkdocs-ts]/MdWidgets.CodeBadgesView\" semantic=\"class\">CodeBadgesView</mkapi-api-link> \n\n<md-cell>\n<code-badges version=\"{{mkdocs-version}}\" npm=\"mkdocs-ts\" github=\"w3nest/mkdocs-ts\" license=\"mit\">\n</code-badges>\n</md-cell>\n\n---\n\n###  <mkapi-api-link nav=\"@nav[mkdocs-ts]/MdWidgets.ExtLink\" semantic=\"class\">ExtLink</mkapi-api-link> ,  <mkapi-api-link nav=\"@nav[mkdocs-ts]/MdWidgets.ApiLink\" semantic=\"class\">ApiLink</mkapi-api-link> ,  <mkapi-api-link nav=\"@nav[mkdocs-ts]/MdWidgets.GitHubLink\" semantic=\"class\">GitHubLink</mkapi-api-link> ,  <mkapi-api-link nav=\"@nav[mkdocs-ts]/MdWidgets.CrossLink\" semantic=\"class\">CrossLink</mkapi-api-link> ,\n\n\n<md-cell>\n<ext-link target=\"adams\">D. Adams</ext-link>\n\n<api-link target=\"MdWidgets\"></api-link>\n\n<cross-link target=\"API\">API</cross-link>\n\n<github-link target=\"tutorials.basics.md\">GitHub page </github-link>\n\n</md-cell>\n\n---\n\n## New Widgets\n\nTo extend the functionality of  <mkapi-api-link nav=\"@nav[mkdocs-ts].parseMd\" semantic=\"function\">parseMd</mkapi-api-link> , you can define and register custom widgets globally.\n\n---\n\n### Step 1: Define Implementation\n\n<js-cell>\nconst { MkDocs, TP } = await webpm.install({\n    esm:[\n        'mkdocs-ts#{{mkdocs-version}} as MkDocs',\n        'tweakpane#^4.0.1 as TP',\n    ]\n})\n\nconst customViewExample = (element) => {\n    const pane = new TP.Pane()\n    const getAttr = (name, defaultVal) => parseFloat(element.getAttribute(name) ?? defaultVal )\n    const params = {\n        improbabilityFactor: getAttr('improbabilityFactor', 3),\n        babelFishCount: getAttr('babelFishCount', 1),\n        vogonPoetryExposure: getAttr('vogonPoetryExposure', 250),\n        towelAbsorbency: getAttr('towelAbsorbency', 2),\n    };\n    Object.keys(params).forEach((k) => pane.addBinding(params, k))\n    pane.addButton({ title: 'Compute', label: ''}).on('click', () => computeCb(params));\n    return pane.element\n}\n</js-cell>\n\n---\n\n### Step 2: Register Element\n\n<js-cell>\nMkDocs.GlobalMarkdownViews.factory = {\n    ...MkDocs.GlobalMarkdownViews.factory,\n    'custom-view-example' : (element) => customViewExample(element)\n}\n</js-cell>\n\nSee  <mkapi-api-link nav=\"@nav[mkdocs-ts].GlobalMarkdownViews\" semantic=\"class\">GlobalMarkdownViews</mkapi-api-link>  for details.\n\n---\n\n### Step 3: Enjoy\n\n<md-cell>\nBelow is the custom view  `custom-view-example`  instantiated with  `improbabilityFactor=5` :\n\n<custom-view-example improbabilityFactor=\"5.00\">\n</custom-view-example>\n</md-cell>",
                "contentType": "markdown",
                "semantic": {
                    "role": "",
                    "labels": [],
                    "attributes": {},
                    "relations": {}
                }
            }
        ]
    },
    "path": "mkdocs-ts/MdWidgets",
    "navPath": "@nav[mkdocs-ts]",
    "attributes": [
        {
            "name": "icons",
            "semantic": {
                "role": "global",
                "labels": [],
                "attributes": {},
                "relations": {}
            },
            "documentation": {
                "sections": [
                    {
                        "content": "Icons factory, class refers to fontawesome v5 icons.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "icons",
            "navPath": "@nav[mkdocs-ts]/MdWidgets.icons",
            "code": {
                "filePath": "src/lib/md-widgets/note.view.ts",
                "declaration": "icons = {\n    note: faIconTyped('fa-pen-fancy'),\n    abstract: faIconTyped('fa-file-alt'),\n    info: faIconTyped('fa-info-circle'),\n    hint: faIconTyped('fa-fire'),\n    success: faIconTyped('fa-check'),\n    question: faIconTyped('fa-question-circle'),\n    warning: faIconTyped('fa-exclamation-triangle'),\n    failure: faIconTyped('fa-times-circle'),\n    danger: faIconTyped('fa-bolt'),\n    bug: faIconTyped('fa-bug'),\n    example: faIconTyped('fa-flask'),\n    quote: faIconTyped('fa-quote-right'),\n}",
                "implementation": "",
                "startLine": 18,
                "endLine": 19,
                "references": {
                    "icons": "@nav[mkdocs-ts]/MdWidgets.icons",
                    "AnyVirtualDOM": "/apps/@rx-vdom/doc/latest?nav=/api.AnyVirtualDOM"
                }
            }
        }
    ],
    "types": [
        {
            "name": "ApiLink",
            "documentation": {
                "sections": [
                    {
                        "content": "Link component for referencing API entities (such as modules, classes, methods, etc):\n\n<md-cell>\n<api-link target=\"MdWidgets\"></api-link>\n</md-cell>\n\n<note level=\"warning\">\nIt requires the consumer-provided  <mkapi-api-link nav=\"@nav[mkdocs-ts]/MdWidgets.ApiLink.Mapper\" semantic=\"attribute\">ApiLink.Mapper</mkapi-api-link>  implementation that resolves the  `target`  attribute\nof an HTML element into a valid specification.\n</note>",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "ApiLink",
            "navPath": "@nav[mkdocs-ts]/MdWidgets.ApiLink",
            "attributes": [
                {
                    "name": "icon",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Icon representing API links, shown alongside the label.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "ApiLink.icon",
                    "navPath": "@nav[mkdocs-ts]/MdWidgets.ApiLink.icon",
                    "code": {
                        "filePath": "src/lib/md-widgets/links.view.ts",
                        "declaration": "static readonly icon: AnyVirtualDOM = faIconTyped('fa-code', {\n        withStyle: { fontSize: stdIconFontSize },\n    })",
                        "implementation": "",
                        "startLine": 129,
                        "endLine": 130,
                        "references": {
                            "icon": "@nav[mkdocs-ts]/MdWidgets.ApiLink.icon",
                            "AnyVirtualDOM": "/apps/@rx-vdom/doc/latest?nav=/api.AnyVirtualDOM"
                        }
                    }
                },
                {
                    "name": "Mapper",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Maps a string  `target`  to an object containing:\n-  `href` : the relative URL fragment in the form e.g.  `@nav/api/foo.bar` .\n-  `withClass` : a semantic CSS class such as  `mkapi-role-function` ,  `mkapi-role-method` , etc.\n-  `withStyle`  (optional): additional inline styles.\n\nThis should be implemented by the consumer of the class.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "ApiLink.Mapper",
                    "navPath": "@nav[mkdocs-ts]/MdWidgets.ApiLink.Mapper",
                    "code": {
                        "filePath": "src/lib/md-widgets/links.view.ts",
                        "declaration": "static Mapper: LinkMapper",
                        "implementation": "",
                        "startLine": 124,
                        "endLine": 125,
                        "references": {
                            "Mapper": "@nav[mkdocs-ts]/MdWidgets.ApiLink.Mapper",
                            "LinkMapper": "@nav[mkdocs-ts]/MdWidgets.LinkMapper"
                        }
                    }
                }
            ],
            "callables": [
                {
                    "name": "fromHTMLElement",
                    "documentation": {
                        "sections": [
                            {
                                "content": "Creates the view from a given HTML element.\nThe element should include a  `target`  attribute used to resolve link details via the mapper.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            },
                            {
                                "title": "Arguments",
                                "content": "\n*  **elem**: The original HTMLElement parsed from Markdown or the DOM.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "arguments",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            },
                            {
                                "title": "Returns",
                                "content": "A  `BaseLink`  instance representing the rendered VirtualDOM anchor tag.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "returns",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "ApiLink.fromHTMLElement",
                    "navPath": "@nav[mkdocs-ts]/MdWidgets.ApiLink.fromHTMLElement",
                    "code": {
                        "filePath": "src/lib/md-widgets/links.view.ts",
                        "declaration": "static fromHTMLElement(elem: HTMLElement): LinkView",
                        "implementation": "static fromHTMLElement(elem: HTMLElement): LinkView {\n    return new LinkView({\n        elem,\n        icon: ApiLink.icon,\n        mapper: ApiLink.Mapper,\n        newTab: false,\n        classPrefix: 'mkapi-semantic-flag',\n    })\n}",
                        "startLine": 139,
                        "endLine": 148,
                        "references": {
                            "fromHTMLElement": "@nav[mkdocs-ts]/MdWidgets.ApiLink.fromHTMLElement",
                            "HTMLElement": "https://www.typescriptlang.org/docs/handbook/dom-manipulation.html",
                            "LinkView": "@nav[mkdocs-ts]/MdWidgets.LinkView"
                        }
                    },
                    "semantic": {
                        "role": "method",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    }
                }
            ],
            "code": {
                "filePath": "src/lib/md-widgets/links.view.ts",
                "declaration": "export class ApiLink",
                "implementation": "export class ApiLink {\n    /**\n     * Maps a string `target` to an object containing:\n     * - `href`: the relative URL fragment in the form e.g. `@nav/api/foo.bar`.\n     * - `withClass`: a semantic CSS class such as `mkapi-role-function`, `mkapi-role-method`, etc.\n     * - `withStyle` (optional): additional inline styles.\n     *\n     * This should be implemented by the consumer of the class.\n     */\n    static Mapper: LinkMapper\n\n    /**\n     * Icon representing API links, shown alongside the label.\n     */\n    static readonly icon: AnyVirtualDOM = faIconTyped('fa-code', {\n        withStyle: { fontSize: stdIconFontSize },\n    })\n    /**\n     * Creates the view from a given HTML element.\n     * The element should include a `target` attribute used to resolve link details via the mapper.\n     *\n     * @param elem - The original HTMLElement parsed from Markdown or the DOM.\n     * @returns A `BaseLink` instance representing the rendered VirtualDOM anchor tag.\n     */\n    static fromHTMLElement(elem: HTMLElement): LinkView {\n        return new LinkView({\n            elem,\n            icon: ApiLink.icon,\n            mapper: ApiLink.Mapper,\n            newTab: false,\n            classPrefix: 'mkapi-semantic-flag',\n        })\n    }\n}",
                "startLine": 115,
                "endLine": 149,
                "references": {
                    "ApiLink": "@nav[mkdocs-ts]/MdWidgets.ApiLink",
                    "LinkMapper": "@nav[mkdocs-ts]/MdWidgets.LinkMapper",
                    "LinkView": "@nav[mkdocs-ts]/MdWidgets.LinkView",
                    "AnyVirtualDOM": "/apps/@rx-vdom/doc/latest?nav=/api.AnyVirtualDOM",
                    "HTMLElement": "https://www.typescriptlang.org/docs/handbook/dom-manipulation.html"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "CodeBadgesView",
            "documentation": {
                "sections": [
                    {
                        "content": "Represents usual code badges view (NPM, PyPI, GitHub, ...).\n\nThis view is registered in  <mkapi-api-link nav=\"@nav[mkdocs-ts].GlobalMarkdownViews\" semantic=\"class\">GlobalMarkdownViews</mkapi-api-link> : it can be instantiated from Markdown with an HTMLElement\nusing the tag  `code-badge` , see  <mkapi-api-link nav=\"@nav[mkdocs-ts]/MdWidgets.CodeBadgesView.fromHTMLElement\" semantic=\"method\">CodeBadgesView.fromHTMLElement</mkapi-api-link> .\n\n## Examples\n\n<md-cell>\n<code-badges version=\"{{mkdocs-version}}\" npm=\"mkdocs-ts\" github=\"w3nest/mkdocs-ts\" license=\"mit\">\n</code-badges>\n</md-cell>",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "CodeBadgesView",
            "navPath": "@nav[mkdocs-ts]/MdWidgets.CodeBadgesView",
            "attributes": [
                {
                    "name": "children",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Children of the element.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "CodeBadgesView.children",
                    "navPath": "@nav[mkdocs-ts]/MdWidgets.CodeBadgesView.children",
                    "code": {
                        "filePath": "src/lib/md-widgets/code-badges.ts",
                        "declaration": "public readonly children: ChildrenLike",
                        "implementation": "",
                        "startLine": 101,
                        "endLine": 102,
                        "references": {
                            "children": "@nav[mkdocs-ts]/MdWidgets.CodeBadgesView.children",
                            "ChildrenLike": "/apps/@rx-vdom/doc/latest?nav=/api.ChildrenLike"
                        }
                    }
                },
                {
                    "name": "class",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The class associated with the element, equivalent to the  `className`  property of  `HTMLElement` .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "CodeBadgesView.class",
                    "navPath": "@nav[mkdocs-ts]/MdWidgets.CodeBadgesView.class",
                    "code": {
                        "filePath": "src/lib/md-widgets/code-badges.ts",
                        "declaration": "public readonly class = `${CodeBadgesView.CssSelector} d-flex align-items-center flex-wrap`",
                        "implementation": "",
                        "startLine": 100,
                        "endLine": 101,
                        "references": {
                            "class": "@nav[mkdocs-ts]/MdWidgets.CodeBadgesView.class"
                        }
                    }
                },
                {
                    "name": "tag",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The tag of the element, equivalent to the  `tagName`  property of  `HTMLElement` .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "CodeBadgesView.tag",
                    "navPath": "@nav[mkdocs-ts]/MdWidgets.CodeBadgesView.tag",
                    "code": {
                        "filePath": "src/lib/md-widgets/code-badges.ts",
                        "declaration": "public readonly tag = 'div'",
                        "implementation": "",
                        "startLine": 99,
                        "endLine": 100,
                        "references": {
                            "tag": "@nav[mkdocs-ts]/MdWidgets.CodeBadgesView.tag"
                        }
                    }
                },
                {
                    "name": "CssSelector",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Component's class name for CSS query.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "CodeBadgesView.CssSelector",
                    "navPath": "@nav[mkdocs-ts]/MdWidgets.CodeBadgesView.CssSelector",
                    "code": {
                        "filePath": "src/lib/md-widgets/code-badges.ts",
                        "declaration": "static readonly CssSelector = 'mkdocs-CodeBadgesView'",
                        "implementation": "",
                        "startLine": 97,
                        "endLine": 98,
                        "references": {
                            "CssSelector": "@nav[mkdocs-ts]/MdWidgets.CodeBadgesView.CssSelector"
                        }
                    }
                }
            ],
            "callables": [
                {
                    "name": "constructor",
                    "documentation": {
                        "sections": [
                            {
                                "content": "Initializes a new instance.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            },
                            {
                                "title": "Arguments",
                                "content": "\n*  **github**: Github target, if not provided the associated badge is not displayed.\nThe final url is  `https://github.com/${github}` .\n*  **license**: License badge (only 'MIT' supported), if not provided the associated badge is not displayed.\n*  **npm**: NPM target, if not provided the associated badge is not displayed.\nThe final url is  `https://npmjs.com/package/${npm}` .\n*  **pypi**: Pypi target, if not provided the associated badge is not displayed.\nThe final url is  `https://pypi.org/project/${pypi}` .\n*  **version**: Version bookmark, if not provided the associated badge is not displayed.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "arguments",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "CodeBadgesView.constructor",
                    "navPath": "@nav[mkdocs-ts]/MdWidgets.CodeBadgesView.constructor",
                    "code": {
                        "filePath": "src/lib/md-widgets/code-badges.ts",
                        "declaration": "constructor({\n    github,\n    npm,\n    pypi,\n    version,\n    license,\n}: {\n    github?: string\n    npm?: string\n    pypi?: string\n    version?: string\n    license?: string\n})",
                        "implementation": "constructor({\n    github,\n    npm,\n    pypi,\n    version,\n    license,\n}: {\n    github?: string\n    npm?: string\n    pypi?: string\n    version?: string\n    license?: string\n}) {\n    this.children = [\n        version ? new VersionBadge({ version }) : undefined,\n        github\n            ? new BadgeView({\n                  name: 'Github Sources',\n                  filename: 'github.svg',\n                  href: `https://github.com/${github}`,\n              })\n            : undefined,\n        npm\n            ? new BadgeView({\n                  name: 'Package',\n                  filename: 'npm.svg',\n                  href: `https://npmjs.com/package/${npm}`,\n              })\n            : undefined,\n        pypi\n            ? new BadgeView({\n                  name: 'Package',\n                  filename: 'pypi.svg',\n                  href: `https://pypi.org/project/${pypi}`,\n              })\n            : undefined,\n        license && license === 'mit'\n            ? new BadgeView({\n                  name: 'MIT',\n                  filename: 'mit.svg',\n                  href: `https://en.wikipedia.org/wiki/MIT_License`,\n              })\n            : undefined,\n    ]\n}",
                        "startLine": 142,
                        "endLine": 187,
                        "references": {
                            "CodeBadgesView": "@nav[mkdocs-ts]/MdWidgets.CodeBadgesView"
                        }
                    },
                    "semantic": {
                        "role": "constructor",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    }
                },
                {
                    "name": "attributeMapper",
                    "documentation": {
                        "sections": [
                            {
                                "content": "Attributes mapper from an  `HTMLElement`  to the arguments of the class's constructor.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            },
                            {
                                "title": "Arguments",
                                "content": "\n*  **element**: The  `HTMLElement` .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "arguments",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "CodeBadgesView.attributeMapper",
                    "navPath": "@nav[mkdocs-ts]/MdWidgets.CodeBadgesView.attributeMapper",
                    "code": {
                        "filePath": "src/lib/md-widgets/code-badges.ts",
                        "declaration": "static attributeMapper = (element: HTMLElement) => ({\n        license: element.getAttribute('license') ?? undefined,\n        version: element.getAttribute('version') ?? undefined,\n        npm: element.getAttribute('npm') ?? undefined,\n        pypi: element.getAttribute('pypi') ?? undefined,\n        github: element.getAttribute('github') ?? undefined,\n    })",
                        "implementation": "",
                        "startLine": 108,
                        "endLine": 109,
                        "references": {
                            "attributeMapper": "@nav[mkdocs-ts]/MdWidgets.CodeBadgesView.attributeMapper",
                            "HTMLElement": "https://www.typescriptlang.org/docs/handbook/dom-manipulation.html"
                        }
                    },
                    "semantic": {
                        "role": "method",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    }
                },
                {
                    "name": "fromHTMLElement",
                    "documentation": {
                        "sections": [
                            {
                                "content": "Construct an instance of NoteView from an  `HTMLElement` .\n\nSee  <mkapi-api-link nav=\"@nav[mkdocs-ts]/MdWidgets.CodeBadgesView.attributeMapper\" semantic=\"method\">CodeBadgesView.attributeMapper</mkapi-api-link>  for details on the attributes conversion from the  `HTMLElement` .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            },
                            {
                                "title": "Arguments",
                                "content": "\n*  **element**: The  `HTMLElement` .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "arguments",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "CodeBadgesView.fromHTMLElement",
                    "navPath": "@nav[mkdocs-ts]/MdWidgets.CodeBadgesView.fromHTMLElement",
                    "code": {
                        "filePath": "src/lib/md-widgets/code-badges.ts",
                        "declaration": "static fromHTMLElement(element: HTMLElement)",
                        "implementation": "static fromHTMLElement(element: HTMLElement) {\n    return new CodeBadgesView({\n        ...CodeBadgesView.attributeMapper(element),\n    })\n}",
                        "startLine": 123,
                        "endLine": 128,
                        "references": {
                            "fromHTMLElement": "@nav[mkdocs-ts]/MdWidgets.CodeBadgesView.fromHTMLElement",
                            "HTMLElement": "https://www.typescriptlang.org/docs/handbook/dom-manipulation.html",
                            "CodeBadgesView": "@nav[mkdocs-ts]/MdWidgets.CodeBadgesView"
                        }
                    },
                    "semantic": {
                        "role": "method",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    }
                }
            ],
            "code": {
                "filePath": "src/lib/md-widgets/code-badges.ts",
                "declaration": "export class CodeBadgesView implements VirtualDOM<'div'>",
                "implementation": "export class CodeBadgesView implements VirtualDOM<'div'> {\n    /**\n     * Component's class name for CSS query.\n     */\n    static readonly CssSelector = 'mkdocs-CodeBadgesView'\n\n    public readonly tag = 'div'\n    public readonly class = `${CodeBadgesView.CssSelector} d-flex align-items-center flex-wrap`\n    public readonly children: ChildrenLike\n\n    /**\n     * Attributes mapper from an `HTMLElement` to the arguments of the class's constructor.\n     *\n     * @param element The `HTMLElement`.\n     */\n    static attributeMapper = (element: HTMLElement) => ({\n        license: element.getAttribute('license') ?? undefined,\n        version: element.getAttribute('version') ?? undefined,\n        npm: element.getAttribute('npm') ?? undefined,\n        pypi: element.getAttribute('pypi') ?? undefined,\n        github: element.getAttribute('github') ?? undefined,\n    })\n\n    /**\n     * Construct an instance of NoteView from an `HTMLElement`.\n     *\n     * See {@link CodeBadgesView.attributeMapper} for details on the attributes conversion from the `HTMLElement`.\n     *\n     * @param element The `HTMLElement`.\n     */\n    static fromHTMLElement(element: HTMLElement) {\n        return new CodeBadgesView({\n            ...CodeBadgesView.attributeMapper(element),\n        })\n    }\n\n    /**\n     * Initializes a new instance.\n     *\n     * @param _args The arguments.\n     * @param _args.github Github target, if not provided the associated badge is not displayed.\n     * The final url is `https://github.com/${github}`.\n     * @param _args.npm NPM target, if not provided the associated badge is not displayed.\n     * The final url is `https://npmjs.com/package/${npm}`.\n     * @param _args.pypi Pypi target, if not provided the associated badge is not displayed.\n     * The final url is `https://pypi.org/project/${pypi}`.\n     * @param _args.version Version bookmark, if not provided the associated badge is not displayed.\n     * @param _args.license License badge (only 'MIT' supported), if not provided the associated badge is not displayed.\n     */\n    constructor({\n        github,\n        npm,\n        pypi,\n        version,\n        license,\n    }: {\n        github?: string\n        npm?: string\n        pypi?: string\n        version?: string\n        license?: string\n    }) {\n        this.children = [\n            version ? new VersionBadge({ version }) : undefined,\n            github\n                ? new BadgeView({\n                      name: 'Github Sources',\n                      filename: 'github.svg',\n                      href: `https://github.com/${github}`,\n                  })\n                : undefined,\n            npm\n                ? new BadgeView({\n                      name: 'Package',\n                      filename: 'npm.svg',\n                      href: `https://npmjs.com/package/${npm}`,\n                  })\n                : undefined,\n            pypi\n                ? new BadgeView({\n                      name: 'Package',\n                      filename: 'pypi.svg',\n                      href: `https://pypi.org/project/${pypi}`,\n                  })\n                : undefined,\n            license && license === 'mit'\n                ? new BadgeView({\n                      name: 'MIT',\n                      filename: 'mit.svg',\n                      href: `https://en.wikipedia.org/wiki/MIT_License`,\n                  })\n                : undefined,\n        ]\n    }\n}",
                "startLine": 93,
                "endLine": 188,
                "references": {
                    "CodeBadgesView": "@nav[mkdocs-ts]/MdWidgets.CodeBadgesView",
                    "ChildrenLike": "/apps/@rx-vdom/doc/latest?nav=/api.ChildrenLike",
                    "HTMLElement": "https://www.typescriptlang.org/docs/handbook/dom-manipulation.html",
                    "VirtualDOM": "/apps/@rx-vdom/doc/latest?nav=/api.VirtualDOM"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "CodeSnippetView",
            "documentation": {
                "sections": [
                    {
                        "content": "Represents a code snippet view.\n\nThis view is registered in  <mkapi-api-link nav=\"@nav[mkdocs-ts].GlobalMarkdownViews\" semantic=\"class\">GlobalMarkdownViews</mkapi-api-link> : it can be instantiated from Markdown with an HTMLElement\nusing the tag  `code-snippet` , see  <mkapi-api-link nav=\"@nav[mkdocs-ts]/MdWidgets.CodeSnippetView.fromHTMLElement\" semantic=\"method\">CodeSnippetView.fromHTMLElement</mkapi-api-link> .\n\nThe language supported are defined by  <mkapi-api-link nav=\"@nav[mkdocs-ts]/MdWidgets.CodeLanguage\" semantic=\"type-alias\">CodeLanguage</mkapi-api-link> .\n\n## Examples\n\n<note level=\"example\" title=\"Javascript\" expandable=\"true\" mode=\"stateless\">\n<md-cell>\n<code-snippet language=\"javascript\" highlightedLines=\"8\">\nfunction compute({improbabilityFactor, babelFishCount, vogonPoetryExposure, towelAbsorbency }){\n    console.log(\"Computation complete! The result is 42\");\n    const result =\n        Math.log(improbabilityFactor + 42) +\n        babelFishCount === 1 ? 1 : Math.sqrt(babelFishCount) +\n        vogonPoetryExposure > 1000 ? -42 : vogonPoetryExposure / 100 +\n        towelAbsorbency * (Math.random() + 0.42)\n    return 42;\n}\n</code-snippet>\n</md-cell>\n</note>\n\n\n<note level=\"example\" expandable=\"true\" title=\"Python\"  mode=\"stateless\">\n<md-cell>\n<code-snippet language=\"python\" highlightedLines=\"8\">\ndef compute(improbabilityFactor, babelFishCount, vogonPoetryExposure, towelAbsorbency ):\n    print(\"Computation complete! The result is 42\");\n    const result =\n        Math.log(improbabilityFactor + 42) +\n        babelFishCount === 1 ? 1 : Math.sqrt(babelFishCount) +\n        vogonPoetryExposure > 1000 ? -42 : vogonPoetryExposure / 100 +\n        towelAbsorbency * (Math.random() + 0.42)\n    return 42;\n</code-snippet>\n</md-cell>\n</note>\n\n<note level=\"example\" expandable=\"true\" title=\"HTML\"  mode=\"stateless\">\n<md-cell>\n<code-snippet language=\"html\" highlightedLines=\"11-25\">\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Ultimate Computation</title>\n</head>\n<body>\n    <h1>Ultimate Computation Example</h1>\n    <p>Provide your parameters and compute the result!</p>\n\n    <form id=\"computation-form\">\n        <label for=\"improbabilityFactor\">Improbability Factor:</label>\n        <input type=\"number\" id=\"improbabilityFactor\" value=\"3\"><br>\n\n        <label for=\"babelFishCount\">Babel Fish Count:</label>\n        <input type=\"number\" id=\"babelFishCount\" value=\"1\"><br>\n\n        <label for=\"vogonPoetryExposure\">Vogon Poetry Exposure:</label>\n        <input type=\"number\" id=\"vogonPoetryExposure\" value=\"250\"><br>\n\n        <label for=\"towelAbsorbency\">Towel Absorbency:</label>\n        <input type=\"number\" id=\"towelAbsorbency\" value=\"2\"><br>\n\n        <button type=\"button\" id=\"compute-button\">Compute</button>\n    </form>\n</body>\n</html>\n</code-snippet>\n</md-cell>\n</note>\n\n<note level=\"example\" expandable=\"true\" title=\"XML\"  mode=\"stateless\">\n<md-cell>\n<code-snippet language=\"xml\">\n<Computation>\n    <Parameters>\n        <ImprobabilityFactor>3</ImprobabilityFactor>\n        <BabelFishCount>1</BabelFishCount>\n        <VogonPoetryExposure>250</VogonPoetryExposure>\n        <TowelAbsorbency>2</TowelAbsorbency>\n    </Parameters>\n    <Result>42</Result>\n    <Log>Computation complete! The result is always 42, but you knew that already.</Log>\n</Computation>\n</code-snippet>\n</md-cell>\n</note>\n\n<note level=\"example\" expandable=\"true\" title=\"CSS\"  mode=\"stateless\">\n<md-cell>\n<code-snippet language=\"css\">\n.computation-container {\n   display: flex;\n   flex-direction: column;\n    align-items: center;\n  justify-content: center;\n  font-family: 'Courier New', Courier, monospace;\n  background-color: #f0f8ff;\n  border: 2px dashed #42a5f5;\n  padding: 20px;\n  margin: 20px;\n  border-radius: 8px;\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n}\n</code-snippet>\n</md-cell>\n</note>\n\n<note level=\"example\" expandable=\"true\" title=\"YAML\"  mode=\"stateless\">\n<md-cell>\n<code-snippet language=\"yaml\">\ncomputation:\n  improbabilityFactor: 3       # A number too high might summon a whale and a bowl of petunias.\n  babelFishCount: 1            # Keep it to one, unless you enjoy linguistic chaos.\n  vogonPoetryExposure: 250     # Measured in verses endured. 1000+ is not recommended.\n  towelAbsorbency: 2           # Towel quality. Higher is better for intergalactic travel.\n</code-snippet>\n</md-cell>\n</note>\n\n<note level=\"example\" expandable=\"true\" title=\"Markdown\"  mode=\"stateless\">\n<md-cell>\n<code-snippet language=\"markdown\">\n## Computation\n\nHere is a summary of the parameters:\n\n-  improbabilityFactor: 3\n-  babelFishCount: 1\n-  vogonPoetryExposure: 250\n-  towelAbsorbency: 2\n</code-snippet>\n</md-cell>\n</note>",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "CodeSnippetView",
            "navPath": "@nav[mkdocs-ts]/MdWidgets.CodeSnippetView",
            "attributes": [
                {
                    "name": "children",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The children of the associated HTML element.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "CodeSnippetView.children",
                    "navPath": "@nav[mkdocs-ts]/MdWidgets.CodeSnippetView.children",
                    "code": {
                        "filePath": "src/lib/md-widgets/code-snippet.view.ts",
                        "declaration": "public readonly children: ChildrenLike",
                        "implementation": "",
                        "startLine": 213,
                        "endLine": 214,
                        "references": {
                            "children": "@nav[mkdocs-ts]/MdWidgets.CodeSnippetView.children",
                            "ChildrenLike": "/apps/@rx-vdom/doc/latest?nav=/api.ChildrenLike"
                        }
                    }
                },
                {
                    "name": "class",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The class list of the associated HTML element.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "CodeSnippetView.class",
                    "navPath": "@nav[mkdocs-ts]/MdWidgets.CodeSnippetView.class",
                    "code": {
                        "filePath": "src/lib/md-widgets/code-snippet.view.ts",
                        "declaration": "public readonly class = `mkdocs-CodeSnippetView w-100 overflow-auto mb-3 mkdocs-resize-observer`",
                        "implementation": "",
                        "startLine": 203,
                        "endLine": 204,
                        "references": {
                            "class": "@nav[mkdocs-ts]/MdWidgets.CodeSnippetView.class"
                        }
                    }
                },
                {
                    "name": "style",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The style of the associated HTML element.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "CodeSnippetView.style",
                    "navPath": "@nav[mkdocs-ts]/MdWidgets.CodeSnippetView.style",
                    "code": {
                        "filePath": "src/lib/md-widgets/code-snippet.view.ts",
                        "declaration": "public readonly style = {\n        fontSize: '0.8rem',\n    }",
                        "implementation": "",
                        "startLine": 207,
                        "endLine": 208,
                        "references": {
                            "style": "@nav[mkdocs-ts]/MdWidgets.CodeSnippetView.style"
                        }
                    }
                },
                {
                    "name": "tag",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The tag of the associated HTML element.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "CodeSnippetView.tag",
                    "navPath": "@nav[mkdocs-ts]/MdWidgets.CodeSnippetView.tag",
                    "code": {
                        "filePath": "src/lib/md-widgets/code-snippet.view.ts",
                        "declaration": "public readonly tag = 'div'",
                        "implementation": "",
                        "startLine": 198,
                        "endLine": 199,
                        "references": {
                            "tag": "@nav[mkdocs-ts]/MdWidgets.CodeSnippetView.tag"
                        }
                    }
                },
                {
                    "name": "CssSelector",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Component's class name for CSS query.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "CodeSnippetView.CssSelector",
                    "navPath": "@nav[mkdocs-ts]/MdWidgets.CodeSnippetView.CssSelector",
                    "code": {
                        "filePath": "src/lib/md-widgets/code-snippet.view.ts",
                        "declaration": "static readonly CssSelector = 'mkdocs-CodeSnippetView'",
                        "implementation": "",
                        "startLine": 190,
                        "endLine": 191,
                        "references": {
                            "CssSelector": "@nav[mkdocs-ts]/MdWidgets.CodeSnippetView.CssSelector"
                        }
                    }
                }
            ],
            "callables": [
                {
                    "name": "constructor",
                    "documentation": {
                        "sections": [
                            {
                                "content": "Initialize the widget.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            },
                            {
                                "title": "Arguments",
                                "content": "\n*  **content**: The snippet's content.\n*  **highlightedLines**: Highlighted lines, *e.g.*  `5 10 20-25 28 30` .\n*  **language**: The target language.\n*  **lineNumbers**: whether to display line numbers.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "arguments",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "CodeSnippetView.constructor",
                    "navPath": "@nav[mkdocs-ts]/MdWidgets.CodeSnippetView.constructor",
                    "code": {
                        "filePath": "src/lib/md-widgets/code-snippet.view.ts",
                        "declaration": "constructor({\n    language,\n    content,\n    highlightedLines,\n    lineNumbers,\n}: {\n    language: CodeLanguage\n    highlightedLines?: string\n    lineNumbers?: boolean\n    content: string\n})",
                        "implementation": "constructor({\n    language,\n    content,\n    highlightedLines,\n    lineNumbers,\n}: {\n    language: CodeLanguage\n    highlightedLines?: string\n    lineNumbers?: boolean\n    content: string\n}) {\n    this.content$ = new BehaviorSubject<string>(content)\n\n    const prismCoreCasted = prismCore as {\n        plugins: { autoloader: { languages_path: string } }\n        highlightElement: (e: HTMLElement) => void\n    }\n    prismCoreCasted.plugins.autoloader.languages_path =\n        CodeSnippetView.defaultLanguagesFolder\n    const w3nestCookie = getW3NestCookie()\n    if (w3nestCookie) {\n        const origin = w3nestCookie.origin\n        const pathResource = w3nestCookie.webpm.pathResource\n        prismCoreCasted.plugins.autoloader.languages_path = `${origin}${pathResource}/cHJpc21qcw==/1.30.0/components/`\n    }\n    const lineNumbersClass =\n        lineNumbers || highlightedLines ? 'line-numbers' : ''\n    const languageClass =\n        language === 'unknown' ? '' : `language-${language}`\n    const customAttributes: Record<string, string> = highlightedLines\n        ? {\n              dataLine: highlightedLines.trim().replace(/\\s+/g, ','),\n          }\n        : {}\n    this.children = [\n        {\n            tag: 'pre',\n            class: `${lineNumbersClass} ${languageClass}`,\n            customAttributes,\n            children: [\n                {\n                    tag: 'code',\n                    connectedCallback: (e) => {\n                        e.textContent = content\n                        prismCoreCasted.highlightElement(e)\n                    },\n                },\n            ],\n        },\n    ]\n}",
                        "startLine": 259,
                        "endLine": 310,
                        "references": {
                            "CodeSnippetView": "@nav[mkdocs-ts]/MdWidgets.CodeSnippetView",
                            "CodeLanguage": "@nav[mkdocs-ts]/MdWidgets.CodeLanguage"
                        }
                    },
                    "semantic": {
                        "role": "constructor",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    }
                },
                {
                    "name": "attributeMapper",
                    "documentation": {
                        "sections": [
                            {
                                "content": "Attributes mapper from an  `HTMLElement`  to the arguments of the class's constructor.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            },
                            {
                                "title": "Arguments",
                                "content": "\n*  **element**: The  `HTMLElement` .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "arguments",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "CodeSnippetView.attributeMapper",
                    "navPath": "@nav[mkdocs-ts]/MdWidgets.CodeSnippetView.attributeMapper",
                    "code": {
                        "filePath": "src/lib/md-widgets/code-snippet.view.ts",
                        "declaration": "static attributeMapper = (element: HTMLElement) => ({\n        language: (element.getAttribute('language') ??\n            'unknown') as CodeLanguage,\n        highlightedLines: element.getAttribute('highlightedLines') ?? undefined,\n        lineNumbers:\n            element.getAttribute('lineNumbers') &&\n            element.getAttribute('lineNumbers') == 'true'\n                ? true\n                : false,\n        content: element.textContent ?? '',\n    })",
                        "implementation": "",
                        "startLine": 226,
                        "endLine": 227,
                        "references": {
                            "attributeMapper": "@nav[mkdocs-ts]/MdWidgets.CodeSnippetView.attributeMapper",
                            "HTMLElement": "https://www.typescriptlang.org/docs/handbook/dom-manipulation.html",
                            "CodeLanguage": "@nav[mkdocs-ts]/MdWidgets.CodeLanguage"
                        }
                    },
                    "semantic": {
                        "role": "method",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    }
                },
                {
                    "name": "fromHTMLElement",
                    "documentation": {
                        "sections": [
                            {
                                "content": "Construct an instance of CodeSnippetView from an  `HTMLElement` .\n\nSee  <mkapi-api-link nav=\"@nav[mkdocs-ts]/MdWidgets.CodeSnippetView.attributeMapper\" semantic=\"method\">CodeSnippetView.attributeMapper</mkapi-api-link>  for details on the attributes conversion from the  `HTMLElement` .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            },
                            {
                                "title": "Arguments",
                                "content": "\n*  **element**: The  `HTMLElement` .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "arguments",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "CodeSnippetView.fromHTMLElement",
                    "navPath": "@nav[mkdocs-ts]/MdWidgets.CodeSnippetView.fromHTMLElement",
                    "code": {
                        "filePath": "src/lib/md-widgets/code-snippet.view.ts",
                        "declaration": "static fromHTMLElement(element: HTMLElement)",
                        "implementation": "static fromHTMLElement(element: HTMLElement) {\n    return new CodeSnippetView({\n        ...CodeSnippetView.attributeMapper(element),\n    })\n}",
                        "startLine": 244,
                        "endLine": 249,
                        "references": {
                            "fromHTMLElement": "@nav[mkdocs-ts]/MdWidgets.CodeSnippetView.fromHTMLElement",
                            "HTMLElement": "https://www.typescriptlang.org/docs/handbook/dom-manipulation.html",
                            "CodeSnippetView": "@nav[mkdocs-ts]/MdWidgets.CodeSnippetView"
                        }
                    },
                    "semantic": {
                        "role": "method",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    }
                }
            ],
            "code": {
                "filePath": "src/lib/md-widgets/code-snippet.view.ts",
                "declaration": "export class CodeSnippetView implements VirtualDOM<'div'>",
                "implementation": "export class CodeSnippetView implements VirtualDOM<'div'> {\n    /**\n     * Component's class name for CSS query.\n     */\n    static readonly CssSelector = 'mkdocs-CodeSnippetView'\n\n    static defaultLanguagesFolder =\n        'https://w3nest.org/api/assets-gateway/webpm/resources/cHJpc21qcw==/1.30.0/components/'\n\n    /**\n     * The tag of the associated HTML element.\n     */\n    public readonly tag = 'div'\n\n    /**\n     * The class list of the associated HTML element.\n     */\n    public readonly class = `mkdocs-CodeSnippetView w-100 overflow-auto mb-3 mkdocs-resize-observer`\n    /**\n     * The style of the associated HTML element.\n     */\n    public readonly style = {\n        fontSize: '0.8rem',\n    }\n    /**\n     * The children of the associated HTML element.\n     */\n    public readonly children: ChildrenLike\n\n    public readonly content$: BehaviorSubject<string>\n\n    public readonly editor$ = new BehaviorSubject<CodeMirrorEditor | undefined>(\n        undefined,\n    )\n\n    /**\n     * Attributes mapper from an `HTMLElement` to the arguments of the class's constructor.\n     *\n     * @param element The `HTMLElement`.\n     */\n    static attributeMapper = (element: HTMLElement) => ({\n        language: (element.getAttribute('language') ??\n            'unknown') as CodeLanguage,\n        highlightedLines: element.getAttribute('highlightedLines') ?? undefined,\n        lineNumbers:\n            element.getAttribute('lineNumbers') &&\n            element.getAttribute('lineNumbers') == 'true'\n                ? true\n                : false,\n        content: element.textContent ?? '',\n    })\n    /**\n     * Construct an instance of CodeSnippetView from an `HTMLElement`.\n     *\n     * See {@link CodeSnippetView.attributeMapper} for details on the attributes conversion from the `HTMLElement`.\n     *\n     * @param element The `HTMLElement`.\n     */\n    static fromHTMLElement(element: HTMLElement) {\n        return new CodeSnippetView({\n            ...CodeSnippetView.attributeMapper(element),\n        })\n    }\n\n    /**\n     * Initialize the widget.\n     *\n     * @param _args arguments\n     * @param _args.language The target language.\n     * @param _args.content The snippet's content.\n     * @param _args.highlightedLines Highlighted lines, *e.g.* `5 10 20-25 28 30`.\n     * @param _args.lineNumbers whether to display line numbers.\n     */\n    constructor({\n        language,\n        content,\n        highlightedLines,\n        lineNumbers,\n    }: {\n        language: CodeLanguage\n        highlightedLines?: string\n        lineNumbers?: boolean\n        content: string\n    }) {\n        this.content$ = new BehaviorSubject<string>(content)\n\n        const prismCoreCasted = prismCore as {\n            plugins: { autoloader: { languages_path: string } }\n            highlightElement: (e: HTMLElement) => void\n        }\n        prismCoreCasted.plugins.autoloader.languages_path =\n            CodeSnippetView.defaultLanguagesFolder\n        const w3nestCookie = getW3NestCookie()\n        if (w3nestCookie) {\n            const origin = w3nestCookie.origin\n            const pathResource = w3nestCookie.webpm.pathResource\n            prismCoreCasted.plugins.autoloader.languages_path = `${origin}${pathResource}/cHJpc21qcw==/1.30.0/components/`\n        }\n        const lineNumbersClass =\n            lineNumbers || highlightedLines ? 'line-numbers' : ''\n        const languageClass =\n            language === 'unknown' ? '' : `language-${language}`\n        const customAttributes: Record<string, string> = highlightedLines\n            ? {\n                  dataLine: highlightedLines.trim().replace(/\\s+/g, ','),\n              }\n            : {}\n        this.children = [\n            {\n                tag: 'pre',\n                class: `${lineNumbersClass} ${languageClass}`,\n                customAttributes,\n                children: [\n                    {\n                        tag: 'code',\n                        connectedCallback: (e) => {\n                            e.textContent = content\n                            prismCoreCasted.highlightElement(e)\n                        },\n                    },\n                ],\n            },\n        ]\n    }\n}",
                "startLine": 186,
                "endLine": 311,
                "references": {
                    "CodeSnippetView": "@nav[mkdocs-ts]/MdWidgets.CodeSnippetView",
                    "CodeLanguage": "@nav[mkdocs-ts]/MdWidgets.CodeLanguage",
                    "CodeMirrorEditor": "@nav[mkdocs-ts]/MdWidgets.CodeMirrorEditor",
                    "ChildrenLike": "/apps/@rx-vdom/doc/latest?nav=/api.ChildrenLike",
                    "BehaviorSubject": "https://www.learnrxjs.io/learn-rxjs/subjects/subject",
                    "HTMLElement": "https://www.typescriptlang.org/docs/handbook/dom-manipulation.html",
                    "VirtualDOM": "/apps/@rx-vdom/doc/latest?nav=/api.VirtualDOM"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "CrossLink",
            "documentation": {
                "sections": [
                    {
                        "content": "Link component for cross-links:\n\n<md-cell>\n<cross-link target=\"API\">API</cross-link>\n</md-cell>\n\n<note level=\"warning\">\nIt requires the consumer-provided  <mkapi-api-link nav=\"@nav[mkdocs-ts]/MdWidgets.CrossLink.Mapper\" semantic=\"attribute\">CrossLink.Mapper</mkapi-api-link>  implementation that resolves the  `target`  attribute\nof an HTML element into a valid specification.\n</note>",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "CrossLink",
            "navPath": "@nav[mkdocs-ts]/MdWidgets.CrossLink",
            "attributes": [
                {
                    "name": "icon",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Icon representing cross links, shown alongside the label.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "CrossLink.icon",
                    "navPath": "@nav[mkdocs-ts]/MdWidgets.CrossLink.icon",
                    "code": {
                        "filePath": "src/lib/md-widgets/links.view.ts",
                        "declaration": "static readonly icon: AnyVirtualDOM = faIconTyped('fa-book-open', {\n        withStyle: { fontSize: stdIconFontSize },\n    })",
                        "implementation": "",
                        "startLine": 266,
                        "endLine": 267,
                        "references": {
                            "icon": "@nav[mkdocs-ts]/MdWidgets.CrossLink.icon",
                            "AnyVirtualDOM": "/apps/@rx-vdom/doc/latest?nav=/api.AnyVirtualDOM"
                        }
                    }
                },
                {
                    "name": "Mapper",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Maps a string  `target`  to an object containing:\n-  `href` : the relative URL fragment in the form e.g.  `@nav/tuto/getting-started` .\n-  `withClass`  (optional): a CSS class to apply for custom styling.\n-  `withStyle`  (optional): additional inline styles.\n\nThis should be implemented by the consumer of the class.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "CrossLink.Mapper",
                    "navPath": "@nav[mkdocs-ts]/MdWidgets.CrossLink.Mapper",
                    "code": {
                        "filePath": "src/lib/md-widgets/links.view.ts",
                        "declaration": "static Mapper: LinkMapper",
                        "implementation": "",
                        "startLine": 262,
                        "endLine": 263,
                        "references": {
                            "Mapper": "@nav[mkdocs-ts]/MdWidgets.CrossLink.Mapper",
                            "LinkMapper": "@nav[mkdocs-ts]/MdWidgets.LinkMapper"
                        }
                    }
                }
            ],
            "callables": [
                {
                    "name": "fromHTMLElement",
                    "documentation": {
                        "sections": [
                            {
                                "content": "Creates the view from a given HTML element.\nThe element should include a  `target`  attribute used to resolve link details via the mapper.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            },
                            {
                                "title": "Arguments",
                                "content": "\n*  **elem**: The original HTMLElement parsed from Markdown or the DOM.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "arguments",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            },
                            {
                                "title": "Returns",
                                "content": "A  `BaseLink`  instance representing the rendered VirtualDOM anchor tag.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "returns",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "CrossLink.fromHTMLElement",
                    "navPath": "@nav[mkdocs-ts]/MdWidgets.CrossLink.fromHTMLElement",
                    "code": {
                        "filePath": "src/lib/md-widgets/links.view.ts",
                        "declaration": "static fromHTMLElement(elem: HTMLElement): LinkView",
                        "implementation": "static fromHTMLElement(elem: HTMLElement): LinkView {\n    return new LinkView({\n        elem,\n        icon: CrossLink.icon,\n        mapper: CrossLink.Mapper,\n        newTab: false,\n    })\n}",
                        "startLine": 276,
                        "endLine": 284,
                        "references": {
                            "fromHTMLElement": "@nav[mkdocs-ts]/MdWidgets.CrossLink.fromHTMLElement",
                            "HTMLElement": "https://www.typescriptlang.org/docs/handbook/dom-manipulation.html",
                            "LinkView": "@nav[mkdocs-ts]/MdWidgets.LinkView"
                        }
                    },
                    "semantic": {
                        "role": "method",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    }
                }
            ],
            "code": {
                "filePath": "src/lib/md-widgets/links.view.ts",
                "declaration": "export class CrossLink",
                "implementation": "export class CrossLink {\n    /**\n     * Maps a string `target` to an object containing:\n     * - `href`: the relative URL fragment in the form e.g. `@nav/tuto/getting-started`.\n     * - `withClass` (optional): a CSS class to apply for custom styling.\n     * - `withStyle` (optional): additional inline styles.\n     *\n     * This should be implemented by the consumer of the class.\n     */\n    static Mapper: LinkMapper\n    /**\n     * Icon representing cross links, shown alongside the label.\n     */\n    static readonly icon: AnyVirtualDOM = faIconTyped('fa-book-open', {\n        withStyle: { fontSize: stdIconFontSize },\n    })\n    /**\n     * Creates the view from a given HTML element.\n     * The element should include a `target` attribute used to resolve link details via the mapper.\n     *\n     * @param elem - The original HTMLElement parsed from Markdown or the DOM.\n     * @returns A `BaseLink` instance representing the rendered VirtualDOM anchor tag.\n     */\n    static fromHTMLElement(elem: HTMLElement): LinkView {\n        return new LinkView({\n            elem,\n            icon: CrossLink.icon,\n            mapper: CrossLink.Mapper,\n            newTab: false,\n        })\n    }\n}",
                "startLine": 253,
                "endLine": 285,
                "references": {
                    "CrossLink": "@nav[mkdocs-ts]/MdWidgets.CrossLink",
                    "LinkMapper": "@nav[mkdocs-ts]/MdWidgets.LinkMapper",
                    "LinkView": "@nav[mkdocs-ts]/MdWidgets.LinkView",
                    "AnyVirtualDOM": "/apps/@rx-vdom/doc/latest?nav=/api.AnyVirtualDOM",
                    "HTMLElement": "https://www.typescriptlang.org/docs/handbook/dom-manipulation.html"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "ExtLink",
            "documentation": {
                "sections": [
                    {
                        "content": "Link component for external resources:\n\n<md-cell>\n<ext-link target=\"adams\">D. Adams</ext-link>\n</md-cell>\n\n\n<note level=\"warning\">\nIt requires the consumer-provided  <mkapi-api-link nav=\"@nav[mkdocs-ts]/MdWidgets.ExtLink.Mapper\" semantic=\"attribute\">ExtLink.Mapper</mkapi-api-link>  implementation that resolves the  `target`  attribute\nof an HTML element into a valid specification.\n</note>",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "ExtLink",
            "navPath": "@nav[mkdocs-ts]/MdWidgets.ExtLink",
            "attributes": [
                {
                    "name": "icon",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Icon representing external links, shown alongside the label.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "ExtLink.icon",
                    "navPath": "@nav[mkdocs-ts]/MdWidgets.ExtLink.icon",
                    "code": {
                        "filePath": "src/lib/md-widgets/links.view.ts",
                        "declaration": "static readonly icon: AnyVirtualDOM = faIconTyped('fa-external-link-alt', {\n        withStyle: { fontSize: stdIconFontSize },\n    })",
                        "implementation": "",
                        "startLine": 177,
                        "endLine": 178,
                        "references": {
                            "icon": "@nav[mkdocs-ts]/MdWidgets.ExtLink.icon",
                            "AnyVirtualDOM": "/apps/@rx-vdom/doc/latest?nav=/api.AnyVirtualDOM"
                        }
                    }
                },
                {
                    "name": "Mapper",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Maps a string  `target`  to an object containing:\n-  `href` : an absolute URL (e.g.,  `https://example.com` )\n-  `withClass`  (optional): a CSS class to apply for custom styling.\n-  `withStyle`  (optional): inline styles to apply to the link.\n\nThis should be implemented by the consumer of the class.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "ExtLink.Mapper",
                    "navPath": "@nav[mkdocs-ts]/MdWidgets.ExtLink.Mapper",
                    "code": {
                        "filePath": "src/lib/md-widgets/links.view.ts",
                        "declaration": "static Mapper: LinkMapper",
                        "implementation": "",
                        "startLine": 173,
                        "endLine": 174,
                        "references": {
                            "Mapper": "@nav[mkdocs-ts]/MdWidgets.ExtLink.Mapper",
                            "LinkMapper": "@nav[mkdocs-ts]/MdWidgets.LinkMapper"
                        }
                    }
                }
            ],
            "callables": [
                {
                    "name": "fromHTMLElement",
                    "documentation": {
                        "sections": [
                            {
                                "content": "Constructor from HTML element as defined in the Markdown source.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            },
                            {
                                "title": "Arguments",
                                "content": "\n*  **elem**: HTML element.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "arguments",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            },
                            {
                                "title": "Returns",
                                "content": "The hyperlink element.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "returns",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "ExtLink.fromHTMLElement",
                    "navPath": "@nav[mkdocs-ts]/MdWidgets.ExtLink.fromHTMLElement",
                    "code": {
                        "filePath": "src/lib/md-widgets/links.view.ts",
                        "declaration": "static fromHTMLElement(elem: HTMLElement): LinkView",
                        "implementation": "static fromHTMLElement(elem: HTMLElement): LinkView {\n    return new LinkView({\n        elem,\n        icon: ExtLink.icon,\n        mapper: ExtLink.Mapper,\n        newTab: true,\n    })\n}",
                        "startLine": 186,
                        "endLine": 194,
                        "references": {
                            "fromHTMLElement": "@nav[mkdocs-ts]/MdWidgets.ExtLink.fromHTMLElement",
                            "HTMLElement": "https://www.typescriptlang.org/docs/handbook/dom-manipulation.html",
                            "LinkView": "@nav[mkdocs-ts]/MdWidgets.LinkView"
                        }
                    },
                    "semantic": {
                        "role": "method",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    }
                }
            ],
            "code": {
                "filePath": "src/lib/md-widgets/links.view.ts",
                "declaration": "export class ExtLink",
                "implementation": "export class ExtLink {\n    /**\n     * Maps a string `target` to an object containing:\n     * - `href`: an absolute URL (e.g., `https://example.com`)\n     * - `withClass` (optional): a CSS class to apply for custom styling.\n     * - `withStyle` (optional): inline styles to apply to the link.\n     *\n     * This should be implemented by the consumer of the class.\n     */\n    static Mapper: LinkMapper\n    /**\n     * Icon representing external links, shown alongside the label.\n     */\n    static readonly icon: AnyVirtualDOM = faIconTyped('fa-external-link-alt', {\n        withStyle: { fontSize: stdIconFontSize },\n    })\n    /**\n     * Constructor from HTML element as defined in the Markdown source.\n     *\n     * @param elem HTML element.\n     * @returns The hyperlink element.\n     */\n    static fromHTMLElement(elem: HTMLElement): LinkView {\n        return new LinkView({\n            elem,\n            icon: ExtLink.icon,\n            mapper: ExtLink.Mapper,\n            newTab: true,\n        })\n    }\n}",
                "startLine": 164,
                "endLine": 195,
                "references": {
                    "ExtLink": "@nav[mkdocs-ts]/MdWidgets.ExtLink",
                    "LinkMapper": "@nav[mkdocs-ts]/MdWidgets.LinkMapper",
                    "LinkView": "@nav[mkdocs-ts]/MdWidgets.LinkView",
                    "AnyVirtualDOM": "/apps/@rx-vdom/doc/latest?nav=/api.AnyVirtualDOM",
                    "HTMLElement": "https://www.typescriptlang.org/docs/handbook/dom-manipulation.html"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "GitHubLink",
            "documentation": {
                "sections": [
                    {
                        "content": "Link component for GitHub resources:\n\n<md-cell>\n<github-link target=\"tutorials.basics.md\">GitHub page </github-link>\n</md-cell>\n\n<note level=\"warning\">\nIt requires the consumer-provided  <mkapi-api-link nav=\"@nav[mkdocs-ts]/MdWidgets.GitHubLink.Mapper\" semantic=\"attribute\">GitHubLink.Mapper</mkapi-api-link>  implementation that resolves the  `target`  attribute\nof an HTML element into a valid specification.\n</note>",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "GitHubLink",
            "navPath": "@nav[mkdocs-ts]/MdWidgets.GitHubLink",
            "attributes": [
                {
                    "name": "icon",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Icon representing GitHub links, shown alongside the label.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "GitHubLink.icon",
                    "navPath": "@nav[mkdocs-ts]/MdWidgets.GitHubLink.icon",
                    "code": {
                        "filePath": "src/lib/md-widgets/links.view.ts",
                        "declaration": "static readonly icon: AnyVirtualDOM = faIconTyped('fab-github', {\n        withStyle: { fontSize: '0.8rem' },\n    })",
                        "implementation": "",
                        "startLine": 221,
                        "endLine": 222,
                        "references": {
                            "icon": "@nav[mkdocs-ts]/MdWidgets.GitHubLink.icon",
                            "AnyVirtualDOM": "/apps/@rx-vdom/doc/latest?nav=/api.AnyVirtualDOM"
                        }
                    }
                },
                {
                    "name": "Mapper",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Maps a string  `target`  to an object containing:\n-  `href` : an absolute URL to a GitHub resource.\n-  `withClass`  (optional): a CSS class to apply for custom styling.\n-  `withStyle`  (optional): inline styles to apply to the link.\n\nThis should be implemented by the consumer of the class.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "GitHubLink.Mapper",
                    "navPath": "@nav[mkdocs-ts]/MdWidgets.GitHubLink.Mapper",
                    "code": {
                        "filePath": "src/lib/md-widgets/links.view.ts",
                        "declaration": "static Mapper: LinkMapper",
                        "implementation": "",
                        "startLine": 217,
                        "endLine": 218,
                        "references": {
                            "Mapper": "@nav[mkdocs-ts]/MdWidgets.GitHubLink.Mapper",
                            "LinkMapper": "@nav[mkdocs-ts]/MdWidgets.LinkMapper"
                        }
                    }
                }
            ],
            "callables": [
                {
                    "name": "fromHTMLElement",
                    "documentation": {
                        "sections": [
                            {
                                "content": "Creates the view from a given HTML element.\nThe element should include a  `target`  attribute used to resolve link details via the mapper.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            },
                            {
                                "title": "Arguments",
                                "content": "\n*  **elem**: The original HTMLElement parsed from Markdown or the DOM.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "arguments",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            },
                            {
                                "title": "Returns",
                                "content": "A  `BaseLink`  instance representing the rendered VirtualDOM anchor tag.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "returns",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "GitHubLink.fromHTMLElement",
                    "navPath": "@nav[mkdocs-ts]/MdWidgets.GitHubLink.fromHTMLElement",
                    "code": {
                        "filePath": "src/lib/md-widgets/links.view.ts",
                        "declaration": "static fromHTMLElement(elem: HTMLElement): LinkView",
                        "implementation": "static fromHTMLElement(elem: HTMLElement): LinkView {\n    return new LinkView({\n        elem,\n        icon: GitHubLink.icon,\n        mapper: GitHubLink.Mapper,\n        newTab: true,\n    })\n}",
                        "startLine": 231,
                        "endLine": 239,
                        "references": {
                            "fromHTMLElement": "@nav[mkdocs-ts]/MdWidgets.GitHubLink.fromHTMLElement",
                            "HTMLElement": "https://www.typescriptlang.org/docs/handbook/dom-manipulation.html",
                            "LinkView": "@nav[mkdocs-ts]/MdWidgets.LinkView"
                        }
                    },
                    "semantic": {
                        "role": "method",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    }
                }
            ],
            "code": {
                "filePath": "src/lib/md-widgets/links.view.ts",
                "declaration": "export class GitHubLink",
                "implementation": "export class GitHubLink {\n    /**\n     * Maps a string `target` to an object containing:\n     * - `href`: an absolute URL to a GitHub resource.\n     * - `withClass` (optional): a CSS class to apply for custom styling.\n     * - `withStyle` (optional): inline styles to apply to the link.\n     *\n     * This should be implemented by the consumer of the class.\n     */\n    static Mapper: LinkMapper\n    /**\n     * Icon representing GitHub links, shown alongside the label.\n     */\n    static readonly icon: AnyVirtualDOM = faIconTyped('fab-github', {\n        withStyle: { fontSize: '0.8rem' },\n    })\n    /**\n     * Creates the view from a given HTML element.\n     * The element should include a `target` attribute used to resolve link details via the mapper.\n     *\n     * @param elem - The original HTMLElement parsed from Markdown or the DOM.\n     * @returns A `BaseLink` instance representing the rendered VirtualDOM anchor tag.\n     */\n    static fromHTMLElement(elem: HTMLElement): LinkView {\n        return new LinkView({\n            elem,\n            icon: GitHubLink.icon,\n            mapper: GitHubLink.Mapper,\n            newTab: true,\n        })\n    }\n}",
                "startLine": 208,
                "endLine": 240,
                "references": {
                    "GitHubLink": "@nav[mkdocs-ts]/MdWidgets.GitHubLink",
                    "LinkMapper": "@nav[mkdocs-ts]/MdWidgets.LinkMapper",
                    "LinkView": "@nav[mkdocs-ts]/MdWidgets.LinkView",
                    "AnyVirtualDOM": "/apps/@rx-vdom/doc/latest?nav=/api.AnyVirtualDOM",
                    "HTMLElement": "https://www.typescriptlang.org/docs/handbook/dom-manipulation.html"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "LinkView",
            "documentation": {
                "sections": [
                    {
                        "content": "Base class for rendering a hyperlink ( `<a>` ) VirtualDOM element with text & icon.\nThis uses the  `target`  attribute from the provided DOM element along with the provided mapping function\nto resolve link information and generate text & icon.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "LinkView",
            "navPath": "@nav[mkdocs-ts]/MdWidgets.LinkView",
            "attributes": [
                {
                    "name": "children",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Children of the element.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "LinkView.children",
                    "navPath": "@nav[mkdocs-ts]/MdWidgets.LinkView.children",
                    "code": {
                        "filePath": "src/lib/md-widgets/links.view.ts",
                        "declaration": "public readonly children: ChildrenLike",
                        "implementation": "",
                        "startLine": 27,
                        "endLine": 28,
                        "references": {
                            "children": "@nav[mkdocs-ts]/MdWidgets.LinkView.children",
                            "ChildrenLike": "/apps/@rx-vdom/doc/latest?nav=/api.ChildrenLike"
                        }
                    }
                },
                {
                    "name": "href",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Returns the hyperlink's URL.\n\nCan be set, to change the URL.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/href)",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "LinkView.href",
                    "navPath": "@nav[mkdocs-ts]/MdWidgets.LinkView.href",
                    "code": {
                        "filePath": "src/lib/md-widgets/links.view.ts",
                        "declaration": "public readonly href: string",
                        "implementation": "",
                        "startLine": 28,
                        "endLine": 29,
                        "references": {
                            "href": "@nav[mkdocs-ts]/MdWidgets.LinkView.href"
                        }
                    }
                },
                {
                    "name": "tag",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The tag of the element, equivalent to the  `tagName`  property of  `HTMLElement` .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "LinkView.tag",
                    "navPath": "@nav[mkdocs-ts]/MdWidgets.LinkView.tag",
                    "code": {
                        "filePath": "src/lib/md-widgets/links.view.ts",
                        "declaration": "public readonly tag = 'a'",
                        "implementation": "",
                        "startLine": 26,
                        "endLine": 27,
                        "references": {
                            "tag": "@nav[mkdocs-ts]/MdWidgets.LinkView.tag"
                        }
                    }
                },
                {
                    "name": "target",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Sets or retrieves the window or frame at which to target content.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/target)",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "LinkView.target",
                    "navPath": "@nav[mkdocs-ts]/MdWidgets.LinkView.target",
                    "code": {
                        "filePath": "src/lib/md-widgets/links.view.ts",
                        "declaration": "public readonly target: string",
                        "implementation": "",
                        "startLine": 29,
                        "endLine": 30,
                        "references": {
                            "target": "@nav[mkdocs-ts]/MdWidgets.LinkView.target"
                        }
                    }
                }
            ],
            "callables": [
                {
                    "name": "constructor",
                    "documentation": {
                        "sections": [
                            {
                                "content": "Create an hyperlink from a corresponding HTMLElement in Markdown.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            },
                            {
                                "title": "Arguments",
                                "content": "\n*  **classPrefix**: Class prefix to always include.\n*  **elem**: The source HTML element containing a  `target`  attribute.\n*  **icon**: An icon to render before or after the label.\n*  **mapper**: A function that maps the target string to  `href` ,  `withClass` , and  `withStyle` .\n*  **newTab**: Whether to open the link in a new tab.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "arguments",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "LinkView.constructor",
                    "navPath": "@nav[mkdocs-ts]/MdWidgets.LinkView.constructor",
                    "code": {
                        "filePath": "src/lib/md-widgets/links.view.ts",
                        "declaration": "constructor({\n    elem,\n    icon,\n    mapper,\n    newTab,\n    classPrefix,\n}: {\n    elem: HTMLElement\n    icon: AnyVirtualDOM\n    mapper?: LinkMapper\n    newTab: boolean\n    classPrefix?: string\n})",
                        "implementation": "constructor({\n    elem,\n    icon,\n    mapper,\n    newTab,\n    classPrefix,\n}: {\n    elem: HTMLElement\n    icon: AnyVirtualDOM\n    mapper?: LinkMapper\n    newTab: boolean\n    classPrefix?: string\n}) {\n    this.elem = elem\n    if (!mapper) {\n        console.warn(\n            'Can not construct the link widget: no `mapper` defined',\n        )\n        return\n    }\n    const target = this.elem.getAttribute('target')\n    if (!target) {\n        console.warn(\n            'Can not construct the link widget: no `target` attribute provided',\n        )\n        return\n    }\n    const attributes = mapper(target, elem)\n    if (!attributes) {\n        console.warn(\n            `Can not construct the link widget: no attributes declared for ${target}`,\n        )\n        return\n    }\n    const { href, withClass, withStyle } = attributes\n    if (!href) {\n        console.warn(\n            `Can not construct the link widget: no 'href' returned by the mapper  for ${target}`,\n        )\n        return\n    }\n    if (newTab) {\n        this.target = '_blank'\n    }\n    this.href = href\n    const customClass = withClass ?? ''\n    this.children = [\n        {\n            tag: 'i',\n            innerText:\n                elem.textContent === '' ? target : (elem.textContent ?? ''),\n            class: `${classPrefix ?? ''} ${customClass} pe-1`,\n            style: withStyle ?? {},\n        },\n        icon,\n    ]\n}",
                        "startLine": 41,
                        "endLine": 98,
                        "references": {
                            "LinkView": "@nav[mkdocs-ts]/MdWidgets.LinkView",
                            "LinkMapper": "@nav[mkdocs-ts]/MdWidgets.LinkMapper",
                            "HTMLElement": "https://www.typescriptlang.org/docs/handbook/dom-manipulation.html",
                            "AnyVirtualDOM": "/apps/@rx-vdom/doc/latest?nav=/api.AnyVirtualDOM"
                        }
                    },
                    "semantic": {
                        "role": "constructor",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    }
                }
            ],
            "code": {
                "filePath": "src/lib/md-widgets/links.view.ts",
                "declaration": "export class LinkView implements VirtualDOM<'a'>",
                "implementation": "export class LinkView implements VirtualDOM<'a'> {\n    public readonly tag = 'a'\n    public readonly children: ChildrenLike\n    public readonly href: string\n    public readonly target: string\n    private readonly elem: HTMLElement\n    /**\n     * Create an hyperlink from a corresponding HTMLElement in Markdown.\n     *\n     * @param _p\n     * @param _p.elem The source HTML element containing a `target` attribute.\n     * @param _p.icon An icon to render before or after the label.\n     * @param _p.mapper A function that maps the target string to `href`, `withClass`, and `withStyle`.\n     * @param _p.newTab Whether to open the link in a new tab.\n     * @param _p.classPrefix Class prefix to always include.\n     */\n    constructor({\n        elem,\n        icon,\n        mapper,\n        newTab,\n        classPrefix,\n    }: {\n        elem: HTMLElement\n        icon: AnyVirtualDOM\n        mapper?: LinkMapper\n        newTab: boolean\n        classPrefix?: string\n    }) {\n        this.elem = elem\n        if (!mapper) {\n            console.warn(\n                'Can not construct the link widget: no `mapper` defined',\n            )\n            return\n        }\n        const target = this.elem.getAttribute('target')\n        if (!target) {\n            console.warn(\n                'Can not construct the link widget: no `target` attribute provided',\n            )\n            return\n        }\n        const attributes = mapper(target, elem)\n        if (!attributes) {\n            console.warn(\n                `Can not construct the link widget: no attributes declared for ${target}`,\n            )\n            return\n        }\n        const { href, withClass, withStyle } = attributes\n        if (!href) {\n            console.warn(\n                `Can not construct the link widget: no 'href' returned by the mapper  for ${target}`,\n            )\n            return\n        }\n        if (newTab) {\n            this.target = '_blank'\n        }\n        this.href = href\n        const customClass = withClass ?? ''\n        this.children = [\n            {\n                tag: 'i',\n                innerText:\n                    elem.textContent === '' ? target : (elem.textContent ?? ''),\n                class: `${classPrefix ?? ''} ${customClass} pe-1`,\n                style: withStyle ?? {},\n            },\n            icon,\n        ]\n    }\n}",
                "startLine": 25,
                "endLine": 99,
                "references": {
                    "LinkView": "@nav[mkdocs-ts]/MdWidgets.LinkView",
                    "LinkMapper": "@nav[mkdocs-ts]/MdWidgets.LinkMapper",
                    "HTMLElement": "https://www.typescriptlang.org/docs/handbook/dom-manipulation.html",
                    "AnyVirtualDOM": "/apps/@rx-vdom/doc/latest?nav=/api.AnyVirtualDOM",
                    "ChildrenLike": "/apps/@rx-vdom/doc/latest?nav=/api.ChildrenLike",
                    "VirtualDOM": "/apps/@rx-vdom/doc/latest?nav=/api.VirtualDOM"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "NoteView",
            "documentation": {
                "sections": [
                    {
                        "content": "Represents a note.\n\nThis view is registered in  <mkapi-api-link nav=\"@nav[mkdocs-ts].GlobalMarkdownViews\" semantic=\"class\">GlobalMarkdownViews</mkapi-api-link> : it can be instantiated from Markdown with an HTMLElement\nusing the tag  `note` , see  <mkapi-api-link nav=\"@nav[mkdocs-ts]/MdWidgets.NoteView.fromHTMLElement\" semantic=\"method\">NoteView.fromHTMLElement</mkapi-api-link> .\n\n## Examples\n\n### Basics\n\nA note is defined providing a  `level`  attribute and a text content:\n\n<md-cell>\n<note level='info'>\nThis is a note with no option beside  `level` .\n</note>\n</md-cell>\n\nAvailable levels are defined by  <mkapi-api-link nav=\"@nav[mkdocs-ts]/MdWidgets.NoteLevel\" semantic=\"type-alias\">NoteLevel</mkapi-api-link>  and illustrated in section **Available Levels**.\n\nThere are multiple options that can be provided, *e.g.*\n\n<md-cell>\n<note level='info' icon='fas fa-star' title='Custom label' expandable='true'>\nThis is a note with multiple options defined:\n*   `icon` : Overrides the default icon for the level.\n*   `title` : Overrides the default title for the level.\n*   `expandable` : Makes the note expandable.\n\n<note level=\"hint\">\nThe additional option  `mode`  is available for expandable notes.\n</note>\n</note>\n</md-cell>\n\nSee  <mkapi-api-link nav=\"@nav[mkdocs-ts]/MdWidgets.NoteView.attributeMapper\" semantic=\"method\">NoteView.attributeMapper</mkapi-api-link>  for the list of available options.\n\n### Available Levels\n\n<js-cell>\nconst { MkDocs } = await webpm.install({\n    esm:['mkdocs-ts#{{mkdocs-version}} as MkDocs']\n})\nconst src =  `\n<note level=\"{{level}}\">\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna\naliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\n</note> ` \n\nconst levels = ['note', 'abstract', 'info', 'hint', 'success', 'question',\n                'warning', 'failure', 'danger', 'bug', 'example', 'quote']\n\nlevels.forEach((level)=> {\n    display(MkDocs.parseMd({src:src.replace('{{level}}', level)}))\n})\n</js-cell>",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "NoteView",
            "navPath": "@nav[mkdocs-ts]/MdWidgets.NoteView",
            "attributes": [
                {
                    "name": "children",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Children of the element.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "NoteView.children",
                    "navPath": "@nav[mkdocs-ts]/MdWidgets.NoteView.children",
                    "code": {
                        "filePath": "src/lib/md-widgets/note.view.ts",
                        "declaration": "public readonly children: ChildrenLike",
                        "implementation": "",
                        "startLine": 109,
                        "endLine": 110,
                        "references": {
                            "children": "@nav[mkdocs-ts]/MdWidgets.NoteView.children",
                            "ChildrenLike": "/apps/@rx-vdom/doc/latest?nav=/api.ChildrenLike"
                        }
                    }
                },
                {
                    "name": "class",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The class associated with the element, equivalent to the  `className`  property of  `HTMLElement` .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "NoteView.class",
                    "navPath": "@nav[mkdocs-ts]/MdWidgets.NoteView.class",
                    "code": {
                        "filePath": "src/lib/md-widgets/note.view.ts",
                        "declaration": "public readonly class: string = `${NoteView.CssSelector} border rounded text-justify`",
                        "implementation": "",
                        "startLine": 108,
                        "endLine": 109,
                        "references": {
                            "class": "@nav[mkdocs-ts]/MdWidgets.NoteView.class"
                        }
                    }
                },
                {
                    "name": "connectedCallback",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Lifecycle hook called just after the element has been attached to the document's DOM.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "NoteView.connectedCallback",
                    "navPath": "@nav[mkdocs-ts]/MdWidgets.NoteView.connectedCallback",
                    "code": {
                        "filePath": "src/lib/md-widgets/note.view.ts",
                        "declaration": "public readonly connectedCallback: (elem: RxHTMLElement<'div'>) => void",
                        "implementation": "",
                        "startLine": 120,
                        "endLine": 121,
                        "references": {
                            "connectedCallback": "@nav[mkdocs-ts]/MdWidgets.NoteView.connectedCallback",
                            "RxHTMLElement": "/apps/@rx-vdom/doc/latest?nav=/api.RxHTMLElement"
                        }
                    }
                },
                {
                    "name": "tag",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The tag of the element, equivalent to the  `tagName`  property of  `HTMLElement` .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "NoteView.tag",
                    "navPath": "@nav[mkdocs-ts]/MdWidgets.NoteView.tag",
                    "code": {
                        "filePath": "src/lib/md-widgets/note.view.ts",
                        "declaration": "public readonly tag = 'div'",
                        "implementation": "",
                        "startLine": 107,
                        "endLine": 108,
                        "references": {
                            "tag": "@nav[mkdocs-ts]/MdWidgets.NoteView.tag"
                        }
                    }
                },
                {
                    "name": "CssSelector",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Component's class name for CSS query.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "NoteView.CssSelector",
                    "navPath": "@nav[mkdocs-ts]/MdWidgets.NoteView.CssSelector",
                    "code": {
                        "filePath": "src/lib/md-widgets/note.view.ts",
                        "declaration": "static readonly CssSelector = 'mkdocs-NoteView'",
                        "implementation": "",
                        "startLine": 105,
                        "endLine": 106,
                        "references": {
                            "CssSelector": "@nav[mkdocs-ts]/MdWidgets.NoteView.CssSelector"
                        }
                    }
                }
            ],
            "callables": [
                {
                    "name": "constructor",
                    "documentation": {
                        "sections": [
                            {
                                "content": "Initializes the instance.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            },
                            {
                                "title": "Arguments",
                                "content": "\n*  **content**: Text content.\n*  **expandable**: Whether the note is expandable. Expandable note are collapsed by default.\nDefault to  `false` ,\n*  **icon**: If provided, overrides the default icon associated to the given level.\n    If a  `string`  is provided, it is used as key to retrieve the actual icon from  <mkapi-api-link nav=\"@nav[mkdocs-ts].IconFactory\" semantic=\"class\">IconFactory</mkapi-api-link> .\n*  **label**: Label to display. If none is provided, it uses the level as default value.\n*  **level**: Level of the note.\n*  **mode**: See  <mkapi-api-link nav=\"@nav[mkdocs-ts]/MdWidgets.ExpandableMode\" semantic=\"type-alias\">ExpandableMode</mkapi-api-link> .\n*  **parsingArgs**: Parsing options used to parse the content in MarkDown.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "arguments",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "NoteView.constructor",
                    "navPath": "@nav[mkdocs-ts]/MdWidgets.NoteView.constructor",
                    "code": {
                        "filePath": "src/lib/md-widgets/note.view.ts",
                        "declaration": "constructor(params: {\n    level: NoteLevel\n    icon?: string | AnyVirtualDOM\n    label?: string | AnyVirtualDOM\n    content: string | AnyVirtualDOM\n    expandable?: boolean\n    mode?: ExpandableMode\n    parsingArgs: { router?: Router } & MdParsingOptions\n})",
                        "implementation": "constructor(params: {\n    level: NoteLevel\n    icon?: string | AnyVirtualDOM\n    label?: string | AnyVirtualDOM\n    content: string | AnyVirtualDOM\n    expandable?: boolean\n    mode?: ExpandableMode\n    parsingArgs: { router?: Router } & MdParsingOptions\n}) {\n    Object.assign(this, params)\n    const defaultLabels: Record<NoteLevel, string> = {\n        note: 'Note',\n        abstract: 'Abstract',\n        info: 'Info',\n        hint: 'Hint',\n        success: 'Success',\n        question: 'Question',\n        warning: 'Warning',\n        failure: 'Failure',\n        danger: 'Danger',\n        bug: 'Bug',\n        example: 'Example',\n        quote: 'Quote',\n    }\n    if (!this.expandable) {\n        this.expanded$.next(true)\n    }\n    this.label = this.label || defaultLabels[this.level]\n    this.class = `${this.class} mkdocs-border-${this.level}`\n    const content = (): AnyVirtualDOM => ({\n        tag: 'div' as const,\n        class: 'p-2',\n        children: [\n            typeof this.content === 'string'\n                ? parseMd({\n                      src: this.content,\n                      ...this.parsingArgs,\n                  })\n                : this.content,\n        ],\n    })\n\n    const maybeContent: AnyVirtualDOM | RxChild =\n        this.mode === 'stateless' && this.expandable\n            ? child$({\n                  source$: this.expanded$,\n                  vdomMap: (expanded) =>\n                      expanded ? content() : { tag: 'div' },\n              })\n            : {\n                  tag: 'div' as const,\n                  class: attr$({\n                      source$: this.expanded$,\n                      vdomMap: (expanded) => (expanded ? '' : 'd-none'),\n                  }),\n                  children: [content()],\n              }\n\n    this.children = [\n        new NoteHeaderView({\n            level: this.level,\n            label: this.label,\n            icon: this.icon,\n            expandable: this.expandable,\n            expanded$: this.expanded$,\n        }),\n        maybeContent,\n    ]\n}",
                        "startLine": 135,
                        "endLine": 204,
                        "references": {
                            "NoteView": "@nav[mkdocs-ts]/MdWidgets.NoteView",
                            "ExpandableMode": "@nav[mkdocs-ts]/MdWidgets.ExpandableMode",
                            "Router": "@nav[mkdocs-ts].Router",
                            "MdParsingOptions": "@nav[mkdocs-ts].MdParsingOptions",
                            "AnyVirtualDOM": "/apps/@rx-vdom/doc/latest?nav=/api.AnyVirtualDOM"
                        }
                    },
                    "semantic": {
                        "role": "constructor",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    }
                },
                {
                    "name": "attributeMapper",
                    "documentation": {
                        "sections": [
                            {
                                "content": "Attributes mapper from an  `HTMLElement`  to the arguments of the class's constructor.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            },
                            {
                                "title": "Arguments",
                                "content": "\n*  **element**: The  `HTMLElement` .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "arguments",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "NoteView.attributeMapper",
                    "navPath": "@nav[mkdocs-ts]/MdWidgets.NoteView.attributeMapper",
                    "code": {
                        "filePath": "src/lib/md-widgets/note.view.ts",
                        "declaration": "static attributeMapper = (element: HTMLElement) => ({\n        level: element.getAttribute('level') as NoteLevel,\n        label:\n            element.getAttribute('title') ??\n            element.getAttribute('label') ??\n            undefined,\n        content: element.textContent ?? '',\n        expandable: element.getAttribute('expandable')\n            ? element.getAttribute('expandable') === 'true'\n            : false,\n        mode:\n            (element.getAttribute('mode') as ExpandableMode | null) ??\n            'stateful',\n        icon: element.getAttribute('icon') ?? undefined,\n    })",
                        "implementation": "",
                        "startLine": 210,
                        "endLine": 211,
                        "references": {
                            "attributeMapper": "@nav[mkdocs-ts]/MdWidgets.NoteView.attributeMapper",
                            "HTMLElement": "https://www.typescriptlang.org/docs/handbook/dom-manipulation.html",
                            "ExpandableMode": "@nav[mkdocs-ts]/MdWidgets.ExpandableMode"
                        }
                    },
                    "semantic": {
                        "role": "method",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    }
                },
                {
                    "name": "fromHTMLElement",
                    "documentation": {
                        "sections": [
                            {
                                "content": "Construct an instance of NoteView from an  `HTMLElement` .\n\nSee  <mkapi-api-link nav=\"@nav[mkdocs-ts]/MdWidgets.NoteView.attributeMapper\" semantic=\"method\">NoteView.attributeMapper</mkapi-api-link>  for details on the attributes conversion from the  `HTMLElement` .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            },
                            {
                                "title": "Arguments",
                                "content": "\n*  **element**: The  `HTMLElement` .\n*  **parsingArgs**: Parsing options used to parse the content in MarkDown",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "arguments",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "NoteView.fromHTMLElement",
                    "navPath": "@nav[mkdocs-ts]/MdWidgets.NoteView.fromHTMLElement",
                    "code": {
                        "filePath": "src/lib/md-widgets/note.view.ts",
                        "declaration": "static fromHTMLElement(\n    element: HTMLElement,\n    parsingArgs: { router?: Router } & MdParsingOptions,\n)",
                        "implementation": "static fromHTMLElement(\n    element: HTMLElement,\n    parsingArgs: { router?: Router } & MdParsingOptions,\n) {\n    return new NoteView({\n        ...NoteView.attributeMapper(element),\n        parsingArgs,\n    })\n}",
                        "startLine": 234,
                        "endLine": 243,
                        "references": {
                            "fromHTMLElement": "@nav[mkdocs-ts]/MdWidgets.NoteView.fromHTMLElement",
                            "Router": "@nav[mkdocs-ts].Router",
                            "MdParsingOptions": "@nav[mkdocs-ts].MdParsingOptions",
                            "HTMLElement": "https://www.typescriptlang.org/docs/handbook/dom-manipulation.html",
                            "NoteView": "@nav[mkdocs-ts]/MdWidgets.NoteView"
                        }
                    },
                    "semantic": {
                        "role": "method",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    }
                }
            ],
            "code": {
                "filePath": "src/lib/md-widgets/note.view.ts",
                "declaration": "export class NoteView implements VirtualDOM<'div'>",
                "implementation": "export class NoteView implements VirtualDOM<'div'> {\n    /**\n     * Component's class name for CSS query.\n     */\n    static readonly CssSelector = 'mkdocs-NoteView'\n\n    public readonly tag = 'div'\n    public readonly class: string = `${NoteView.CssSelector} border rounded text-justify`\n    public readonly children: ChildrenLike\n\n    public readonly level: NoteLevel\n    public readonly icon?: string | AnyVirtualDOM\n    public readonly label: string | AnyVirtualDOM\n    public readonly content: string | AnyVirtualDOM\n    public readonly parsingArgs: { router: Router } & MdParsingOptions\n    public readonly expandable: boolean = false\n    public readonly expanded$ = new BehaviorSubject(false)\n    public readonly mode: ExpandableMode = 'stateful'\n\n    public readonly connectedCallback: (elem: RxHTMLElement<'div'>) => void\n    /**\n     * Initializes the instance.\n     *\n     * @param params\n     * @param params.level Level of the note.\n     * @param params.icon If provided, overrides the default icon associated to the given level.\n     *     If a `string` is provided, it is used as key to retrieve the actual icon from {@link IconFactory}.\n     * @param params.label Label to display. If none is provided, it uses the level as default value.\n     * @param params.content Text content.\n     * @param params.expandable Whether the note is expandable. Expandable note are collapsed by default.\n     * Default to `false`,\n     * @param params.mode See {@link ExpandableMode}.\n     * @param params.parsingArgs Parsing options used to parse the content in MarkDown.\n     */\n    constructor(params: {\n        level: NoteLevel\n        icon?: string | AnyVirtualDOM\n        label?: string | AnyVirtualDOM\n        content: string | AnyVirtualDOM\n        expandable?: boolean\n        mode?: ExpandableMode\n        parsingArgs: { router?: Router } & MdParsingOptions\n    }) {\n        Object.assign(this, params)\n        const defaultLabels: Record<NoteLevel, string> = {\n            note: 'Note',\n            abstract: 'Abstract',\n            info: 'Info',\n            hint: 'Hint',\n            success: 'Success',\n            question: 'Question',\n            warning: 'Warning',\n            failure: 'Failure',\n            danger: 'Danger',\n            bug: 'Bug',\n            example: 'Example',\n            quote: 'Quote',\n        }\n        if (!this.expandable) {\n            this.expanded$.next(true)\n        }\n        this.label = this.label || defaultLabels[this.level]\n        this.class = `${this.class} mkdocs-border-${this.level}`\n        const content = (): AnyVirtualDOM => ({\n            tag: 'div' as const,\n            class: 'p-2',\n            children: [\n                typeof this.content === 'string'\n                    ? parseMd({\n                          src: this.content,\n                          ...this.parsingArgs,\n                      })\n                    : this.content,\n            ],\n        })\n\n        const maybeContent: AnyVirtualDOM | RxChild =\n            this.mode === 'stateless' && this.expandable\n                ? child$({\n                      source$: this.expanded$,\n                      vdomMap: (expanded) =>\n                          expanded ? content() : { tag: 'div' },\n                  })\n                : {\n                      tag: 'div' as const,\n                      class: attr$({\n                          source$: this.expanded$,\n                          vdomMap: (expanded) => (expanded ? '' : 'd-none'),\n                      }),\n                      children: [content()],\n                  }\n\n        this.children = [\n            new NoteHeaderView({\n                level: this.level,\n                label: this.label,\n                icon: this.icon,\n                expandable: this.expandable,\n                expanded$: this.expanded$,\n            }),\n            maybeContent,\n        ]\n    }\n\n    /**\n     * Attributes mapper from an `HTMLElement` to the arguments of the class's constructor.\n     *\n     * @param element The `HTMLElement`.\n     */\n    static attributeMapper = (element: HTMLElement) => ({\n        level: element.getAttribute('level') as NoteLevel,\n        label:\n            element.getAttribute('title') ??\n            element.getAttribute('label') ??\n            undefined,\n        content: element.textContent ?? '',\n        expandable: element.getAttribute('expandable')\n            ? element.getAttribute('expandable') === 'true'\n            : false,\n        mode:\n            (element.getAttribute('mode') as ExpandableMode | null) ??\n            'stateful',\n        icon: element.getAttribute('icon') ?? undefined,\n    })\n\n    /**\n     * Construct an instance of NoteView from an `HTMLElement`.\n     *\n     * See {@link NoteView.attributeMapper} for details on the attributes conversion from the `HTMLElement`.\n     *\n     * @param element The `HTMLElement`.\n     * @param parsingArgs Parsing options used to parse the content in MarkDown\n     */\n    static fromHTMLElement(\n        element: HTMLElement,\n        parsingArgs: { router?: Router } & MdParsingOptions,\n    ) {\n        return new NoteView({\n            ...NoteView.attributeMapper(element),\n            parsingArgs,\n        })\n    }\n}",
                "startLine": 101,
                "endLine": 244,
                "references": {
                    "NoteView": "@nav[mkdocs-ts]/MdWidgets.NoteView",
                    "ExpandableMode": "@nav[mkdocs-ts]/MdWidgets.ExpandableMode",
                    "Router": "@nav[mkdocs-ts].Router",
                    "MdParsingOptions": "@nav[mkdocs-ts].MdParsingOptions",
                    "AnyVirtualDOM": "/apps/@rx-vdom/doc/latest?nav=/api.AnyVirtualDOM",
                    "ChildrenLike": "/apps/@rx-vdom/doc/latest?nav=/api.ChildrenLike",
                    "RxHTMLElement": "/apps/@rx-vdom/doc/latest?nav=/api.RxHTMLElement",
                    "BehaviorSubject": "https://www.learnrxjs.io/learn-rxjs/subjects/subject",
                    "HTMLElement": "https://www.typescriptlang.org/docs/handbook/dom-manipulation.html",
                    "VirtualDOM": "/apps/@rx-vdom/doc/latest?nav=/api.VirtualDOM"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "CodeMirror",
            "documentation": {
                "sections": [
                    {
                        "content": "Interface specification of CodeMirror module.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "CodeMirror",
            "navPath": "@nav[mkdocs-ts]/MdWidgets.CodeMirror",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/md-widgets/code-snippet.view.ts",
                "declaration": "export interface CodeMirror",
                "implementation": "export interface CodeMirror {\n    default: (\n        element: HTMLElement,\n        config: Record<string, unknown>,\n    ) => CodeMirrorEditor\n}",
                "startLine": 21,
                "endLine": 27,
                "references": {
                    "CodeMirror": "@nav[mkdocs-ts]/MdWidgets.CodeMirror",
                    "CodeMirrorEditor": "@nav[mkdocs-ts]/MdWidgets.CodeMirrorEditor",
                    "HTMLElement": "https://www.typescriptlang.org/docs/handbook/dom-manipulation.html",
                    "Record": "https://www.typescriptlang.org/docs/handbook/utility-types.html#recordkeys-type"
                }
            },
            "semantic": {
                "role": "interface",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "CodeMirrorEditor",
            "documentation": {
                "sections": [
                    {
                        "content": "Interface specification of CodeMirror editor.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "CodeMirrorEditor",
            "navPath": "@nav[mkdocs-ts]/MdWidgets.CodeMirrorEditor",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/md-widgets/code-snippet.view.ts",
                "declaration": "export interface CodeMirrorEditor",
                "implementation": "export interface CodeMirrorEditor {\n    on: (event: string, cb: (args: { getValue: () => string }) => void) => void\n    refresh: () => void\n    addLineClass: (line: number, kind: string, classes: string) => void\n}",
                "startLine": 12,
                "endLine": 17,
                "references": {
                    "CodeMirrorEditor": "@nav[mkdocs-ts]/MdWidgets.CodeMirrorEditor"
                }
            },
            "semantic": {
                "role": "interface",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "CodeLanguage",
            "documentation": {
                "sections": [
                    {
                        "content": "Languages supported.\n\nSee  <mkapi-ext-link href=\"https://prismjs.com/#supported-languages\">https://prismjs.com/#supported-languages</mkapi-ext-link> .",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "CodeLanguage",
            "navPath": "@nav[mkdocs-ts]/MdWidgets.CodeLanguage",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/md-widgets/code-snippet.view.ts",
                "declaration": "export type CodeLanguage =\n    | 'unknown'\n    | 'markup'\n    | 'html'\n    | 'xml'\n    | 'svg'\n    | 'mathml'\n    | 'ssml'\n    | 'atom'\n    | 'rss'\n    | 'css'\n    | 'clike'\n    | 'javascript'\n    | 'js'\n    | 'abap'\n    | 'abnf'\n    | 'actionscript'\n    | 'ada'\n    | 'agda'\n    | 'al'\n    | 'antlr4'\n    | 'g4'\n    | 'apacheconf'\n    | 'apex'\n    | 'apl'\n    | 'applescript'\n    | 'aql'\n    | 'arduino'\n    | 'ino'\n    | 'arff'\n    | 'armasm'\n    | 'arm-asm'\n    | 'arturo'\n    | 'art'\n    | 'asciidoc'\n    | 'adoc'\n    | 'aspnet'\n    | 'asm6502'\n    | 'asmatmel'\n    | 'autohotkey'\n    | 'autoit'\n    | 'avisynth'\n    | 'avs'\n    | 'avro-idl'\n    | 'avdl'\n    | 'awk'\n    | 'gawk'\n    | 'bash'\n    | 'sh'\n    | 'shell'\n    | 'basic'\n    | 'batch'\n    | 'bbcode'\n    | 'shortcode'\n    | 'bbj'\n    | 'bicep'\n    | 'birb'\n    | 'bison'\n    | 'bnf'\n    | 'rbnf'\n    | 'bqn'\n    | 'brainfuck'\n    | 'brightscript'\n    | 'bro'\n    | 'bsl'\n    | 'oscript'\n    | 'c'\n    | 'csharp'\n    | 'cs'\n    | 'dotnet'\n    | 'cpp'\n    | 'cfscript'\n    | 'cfc'\n    | 'chaiscript'\n    | 'cil'\n    | 'cilkc'\n    | 'cilk-c'\n    | 'cilkcpp'\n    | 'cilk-cpp'\n    | 'cilk'\n    | 'clojure'\n    | 'cmake'\n    | 'cobol'\n    | 'coffeescript'\n    | 'coffee'\n    | 'concurnas'\n    | 'conc'\n    | 'csp'\n    | 'cooklang'\n    | 'coq'\n    | 'crystal'\n    | 'css-extras'\n    | 'csv'\n    | 'cue'\n    | 'cypher'\n    | 'd'\n    | 'dart'\n    | 'dataweave'\n    | 'dax'\n    | 'dhall'\n    | 'diff'\n    | 'django'\n    | 'jinja2'\n    | 'dns-zone-file'\n    | 'dns-zone'\n    | 'docker'\n    | 'dockerfile'\n    | 'dot'\n    | 'gv'\n    | 'ebnf'\n    | 'editorconfig'\n    | 'eiffel'\n    | 'ejs'\n    | 'eta'\n    | 'elixir'\n    | 'elm'\n    | 'etlua'\n    | 'erb'\n    | 'erlang'\n    | 'excel-formula'\n    | 'xlsx'\n    | 'xls'\n    | 'fsharp'\n    | 'factor'\n    | 'false'\n    | 'firestore-security-rules'\n    | 'flow'\n    | 'fortran'\n    | 'ftl'\n    | 'gml'\n    | 'gamemakerlanguage'\n    | 'gap'\n    | 'gcode'\n    | 'gdscript'\n    | 'gedcom'\n    | 'gettext'\n    | 'po'\n    | 'gherkin'\n    | 'git'\n    | 'glsl'\n    | 'gn'\n    | 'gni'\n    | 'linker-script'\n    | 'ld'\n    | 'go'\n    | 'go-module'\n    | 'go-mod'\n    | 'gradle'\n    | 'graphql'\n    | 'groovy'\n    | 'haml'\n    | 'handlebars'\n    | 'hbs'\n    | 'mustache'\n    | 'haskell'\n    | 'hs'\n    | 'haxe'\n    | 'hcl'\n    | 'hlsl'\n    | 'hoon'\n    | 'http'\n    | 'hpkp'\n    | 'hsts'\n    | 'ichigojam'\n    | 'icon'\n    | 'icu-message-format'\n    | 'idris'\n    | 'idr'\n    | 'ignore'\n    | 'gitignore'\n    | 'hgignore'\n    | 'npmignore'\n    | 'inform7'\n    | 'ini'\n    | 'io'\n    | 'j'\n    | 'java'\n    | 'javadoc'\n    | 'javadoclike'\n    | 'javastacktrace'\n    | 'jexl'\n    | 'jolie'\n    | 'jq'\n    | 'jsdoc'\n    | 'js-extras'\n    | 'json'\n    | 'webmanifest'\n    | 'json5'\n    | 'jsonp'\n    | 'jsstacktrace'\n    | 'js-templates'\n    | 'julia'\n    | 'keepalived'\n    | 'keyman'\n    | 'kotlin'\n    | 'kt'\n    | 'kts'\n    | 'kumir'\n    | 'kum'\n    | 'kusto'\n    | 'latex'\n    | 'tex'\n    | 'context'\n    | 'latte'\n    | 'less'\n    | 'lilypond'\n    | 'ly'\n    | 'liquid'\n    | 'lisp'\n    | 'emacs'\n    | 'elisp'\n    | 'emacs-lisp'\n    | 'livescript'\n    | 'llvm'\n    | 'log'\n    | 'lolcode'\n    | 'lua'\n    | 'magma'\n    | 'makefile'\n    | 'markdown'\n    | 'md'\n    | 'markup-templating'\n    | 'mata'\n    | 'matlab'\n    | 'maxscript'\n    | 'mel'\n    | 'mermaid'\n    | 'metafont'\n    | 'mizar'\n    | 'mongodb'\n    | 'monkey'\n    | 'moonscript'\n    | 'moon'\n    | 'n1ql'\n    | 'n4js'\n    | 'n4jsd'\n    | 'nand2tetris-hdl'\n    | 'naniscript'\n    | 'nani'\n    | 'nasm'\n    | 'neon'\n    | 'nevod'\n    | 'nginx'\n    | 'nim'\n    | 'nix'\n    | 'nsis'\n    | 'objectivec'\n    | 'objc'\n    | 'ocaml'\n    | 'odin'\n    | 'opencl'\n    | 'openqasm'\n    | 'qasm'\n    | 'oz'\n    | 'parigp'\n    | 'parser'\n    | 'pascal'\n    | 'objectpascal'\n    | 'pascaligo'\n    | 'psl'\n    | 'pcaxis'\n    | 'px'\n    | 'peoplecode'\n    | 'pcode'\n    | 'perl'\n    | 'php'\n    | 'phpdoc'\n    | 'php-extras'\n    | 'plant-uml'\n    | 'plantuml'\n    | 'plsql'\n    | 'powerquery'\n    | 'pq'\n    | 'mscript'\n    | 'powershell'\n    | 'processing'\n    | 'prolog'\n    | 'promql'\n    | 'properties'\n    | 'protobuf'\n    | 'pug'\n    | 'puppet'\n    | 'pure'\n    | 'purebasic'\n    | 'pbfasm'\n    | 'purescript'\n    | 'purs'\n    | 'python'\n    | 'py'\n    | 'qsharp'\n    | 'qs'\n    | 'q'\n    | 'qml'\n    | 'qore'\n    | 'r'\n    | 'racket'\n    | 'rkt'\n    | 'cshtml'\n    | 'razor'\n    | 'jsx'\n    | 'tsx'\n    | 'reason'\n    | 'regex'\n    | 'rego'\n    | 'renpy'\n    | 'rpy'\n    | 'rescript'\n    | 'res'\n    | 'rest'\n    | 'rip'\n    | 'roboconf'\n    | 'robotframework'\n    | 'robot'\n    | 'ruby'\n    | 'rb'\n    | 'rust'\n    | 'sas'\n    | 'sass'\n    | 'scss'\n    | 'scala'\n    | 'scheme'\n    | 'shell-session'\n    | 'sh-session'\n    | 'shellsession'\n    | 'smali'\n    | 'smalltalk'\n    | 'smarty'\n    | 'sml'\n    | 'smlnj'\n    | 'solidity'\n    | 'sol'\n    | 'solution-file'\n    | 'sln'\n    | 'soy'\n    | 'sparql'\n    | 'rq'\n    | 'splunk-spl'\n    | 'sqf'\n    | 'sql'\n    | 'squirrel'\n    | 'stan'\n    | 'stata'\n    | 'iecst'\n    | 'stylus'\n    | 'supercollider'\n    | 'sclang'\n    | 'swift'\n    | 'systemd'\n    | 't4-templating'\n    | 't4-cs'\n    | 't4'\n    | 't4-vb'\n    | 'tap'\n    | 'tcl'\n    | 'tt2'\n    | 'textile'\n    | 'toml'\n    | 'tremor'\n    | 'trickle'\n    | 'troy'\n    | 'turtle'\n    | 'trig'\n    | 'twig'\n    | 'typescript'\n    | 'ts'\n    | 'typoscript'\n    | 'tsconfig'\n    | 'unrealscript'\n    | 'uscript'\n    | 'uc'\n    | 'uorazor'\n    | 'uri'\n    | 'url'\n    | 'v'\n    | 'vala'\n    | 'vbnet'\n    | 'velocity'\n    | 'verilog'\n    | 'vhdl'\n    | 'vim'\n    | 'visual-basic'\n    | 'vb'\n    | 'vba'\n    | 'warpscript'\n    | 'wasm'\n    | 'web-idl'\n    | 'webidl'\n    | 'wgsl'\n    | 'wiki'\n    | 'wolfram'\n    | 'mathematica'\n    | 'nb'\n    | 'wl'\n    | 'wren'\n    | 'xeora'\n    | 'xeoracube'\n    | 'xml-doc'\n    | 'xojo'\n    | 'xquery'\n    | 'yaml'\n    | 'yml'\n    | 'yang'\n    | 'zig'",
                "implementation": "",
                "startLine": 317,
                "endLine": 318,
                "references": {
                    "CodeLanguage": "@nav[mkdocs-ts]/MdWidgets.CodeLanguage"
                }
            },
            "semantic": {
                "role": "type-alias",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "ExpandableMode",
            "documentation": {
                "sections": [
                    {
                        "content": "Relevant for expandable note only.\nIf  `stateful` , the note is created right away and will preserve its state upon collapse/expand.\nIf  `stateless` , the content is created/removed each time the note is expanded/collapsed, effectively deleting the\nstate.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "ExpandableMode",
            "navPath": "@nav[mkdocs-ts]/MdWidgets.ExpandableMode",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/md-widgets/note.view.ts",
                "declaration": "export type ExpandableMode = 'stateful' | 'stateless'",
                "implementation": "",
                "startLine": 43,
                "endLine": 44,
                "references": {
                    "ExpandableMode": "@nav[mkdocs-ts]/MdWidgets.ExpandableMode"
                }
            },
            "semantic": {
                "role": "type-alias",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "LinkMapper",
            "documentation": {
                "sections": [
                    {
                        "content": "A function that maps a string target (link identifier) to\nhref, optional CSS class, and optional style attributes.\n\nThe  `elem`  argument is the  `HTMLElement`  as defined in the Markdown content.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "LinkMapper",
            "navPath": "@nav[mkdocs-ts]/MdWidgets.LinkMapper",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/md-widgets/links.view.ts",
                "declaration": "export type LinkMapper = (\n    target: string,\n    elem: HTMLElement,\n) =>\n    | {\n          href?: string\n          withClass?: string\n          withStyle?: CSSAttribute\n      }\n    | undefined",
                "implementation": "",
                "startLine": 10,
                "endLine": 11,
                "references": {
                    "LinkMapper": "@nav[mkdocs-ts]/MdWidgets.LinkMapper",
                    "HTMLElement": "https://www.typescriptlang.org/docs/handbook/dom-manipulation.html",
                    "CSSAttribute": "/apps/@rx-vdom/doc/latest?nav=/api.CSSAttribute"
                }
            },
            "semantic": {
                "role": "type-alias",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "NoteLevel",
            "documentation": {
                "sections": [
                    {
                        "content": "Note level in  <mkapi-api-link nav=\"@nav[mkdocs-ts]/MdWidgets.NoteView\" semantic=\"class\">NoteView</mkapi-api-link> .",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "NoteLevel",
            "navPath": "@nav[mkdocs-ts]/MdWidgets.NoteLevel",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/md-widgets/note.view.ts",
                "declaration": "export type NoteLevel = keyof typeof icons",
                "implementation": "",
                "startLine": 35,
                "endLine": 36,
                "references": {
                    "NoteLevel": "@nav[mkdocs-ts]/MdWidgets.NoteLevel",
                    "icons": "@nav[mkdocs-ts]/MdWidgets.icons"
                }
            },
            "semantic": {
                "role": "type-alias",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        }
    ],
    "callables": [],
    "files": [
        {
            "name": "links.view.ts",
            "path": "src/lib/md-widgets/links.view.ts",
            "documentation": {
                "sections": [
                    {
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "content": "",
                        "contentType": "markdown"
                    }
                ]
            }
        },
        {
            "name": "code-badges.ts",
            "path": "src/lib/md-widgets/code-badges.ts",
            "documentation": {
                "sections": [
                    {
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "content": "",
                        "contentType": "markdown"
                    }
                ]
            }
        },
        {
            "name": "code-snippet.view.ts",
            "path": "src/lib/md-widgets/code-snippet.view.ts",
            "documentation": {
                "sections": [
                    {
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "content": "",
                        "contentType": "markdown"
                    }
                ]
            }
        },
        {
            "name": "note.view.ts",
            "path": "src/lib/md-widgets/note.view.ts",
            "documentation": {
                "sections": [
                    {
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "content": "",
                        "contentType": "markdown"
                    }
                ]
            }
        }
    ],
    "children": [],
    "semantic": {
        "role": "module",
        "labels": [],
        "attributes": {},
        "relations": {}
    }
}
