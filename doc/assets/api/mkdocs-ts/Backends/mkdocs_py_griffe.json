{
    "name": "mkdocs_py_griffe",
    "documentation": {
        "sections": [
            {
                "content": "The backend for generating API data for python projects using the Python module\n<a href=\"https://mkdocstrings.github.io/griffe/\" target=\"_blank\">griffe</a> as the primary AST generator.\n\nThe entry point is the function [generate_api](@nav/api/Backends/mkdocs_py_griffe/.py_griffe.generate_api '{\"class\": \"mkapi-semantic-flag mkapi-role-function\"}'),\nproviding appropriate [Configuration](@nav/api/Backends/mkdocs_py_griffe/.py_griffe.Configuration '{\"class\": \"mkapi-semantic-flag mkapi-role-class\"}').\n\n**Supported style**\n\nWe encourage to use Google-style synthax for docstrings, as documented\n<a href=\"https://mkdocstrings.github.io/griffe/docstrings/#google-style\" target=\"_blank\">here</a>.\n\nRegarding symbols cross-linking, the sphinx syntax is supported,\nsee [SUPPORTED_CROSS_LINK_TAGS](@nav/api/Backends/mkdocs_py_griffe/.py_griffe.SUPPORTED_CROSS_LINK_TAGS '{\"class\": \"mkapi-semantic-flag mkapi-role-global\"}').",
                "contentType": "Markdown",
                "semantic": {
                    "role": "text",
                    "labels": [],
                    "attributes": {},
                    "relations": {}
                },
                "title": null
            }
        ]
    },
    "semantic": {
        "role": "module",
        "labels": [],
        "attributes": {},
        "relations": {}
    },
    "path": "mkdocs_py_griffe",
    "children": [],
    "callables": [
        {
            "name": "parse_module",
            "documentation": {
                "sections": [
                    {
                        "content": "Transforms module documentation as provided by griffe to the mkdocs-ts models.",
                        "contentType": "Markdown",
                        "semantic": {
                            "role": "text",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "title": null
                    },
                    {
                        "content": "The parsed model.",
                        "contentType": "Markdown",
                        "semantic": {
                            "role": "returns",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "title": "Returns"
                    },
                    {
                        "content": "\n*  **ast**: Griffe's module documentation.\n*  **project**: Project description.",
                        "contentType": "Markdown",
                        "semantic": {
                            "role": "arguments",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "title": "Arguments"
                    }
                ]
            },
            "code": {
                "declaration": "def parse_module(ast: AstModule, project: Project) -> Module",
                "filePath": "py_griffe.py",
                "startLine": 460,
                "endLine": 503,
                "references": {
                    "Module": "@nav/api/Backends/mkdocs_py_griffe/.models.Module",
                    "dataclasses": "https://docs.python.org/3/library/dataclasses.html#",
                    "dataclass": "https://docs.python.org/3/library/dataclasses.html#",
                    "str": "https://docs.python.org/fr/3/library/string.html",
                    "Documentation": "@nav/api/Backends/mkdocs_py_griffe/.models.Documentation",
                    "Semantic": "@nav/api/Backends/mkdocs_py_griffe/.models.Semantic",
                    "EntityPath": "@nav/api/Backends/mkdocs_py_griffe/.models.EntityPath",
                    "list": "https://docs.python.org/3/library/stdtypes.html#lists",
                    "ChildModule": "@nav/api/Backends/mkdocs_py_griffe/.models.ChildModule",
                    "Callable": "@nav/api/Backends/mkdocs_py_griffe/.models.Callable",
                    "Type": "@nav/api/Backends/mkdocs_py_griffe/.models.Type",
                    "Attribute": "@nav/api/Backends/mkdocs_py_griffe/.models.Attribute",
                    "File": "@nav/api/Backends/mkdocs_py_griffe/.models.File",
                    "AstModule": "https://mkdocstrings.github.io/griffe/reference/griffe/#griffe.Module",
                    "Project": "@nav/api/Backends/mkdocs_py_griffe/.py_griffe.Project",
                    "parse_module": "@nav/api/Backends/mkdocs_py_griffe/.py_griffe.parse_module"
                },
                "implementation": "def parse_module(ast: AstModule, project: Project) -> Module:\n    \"\"\"\n    Transforms module documentation as provided by griffe to the mkdocs-ts models.\n\n    Parameters:\n        ast: Griffe's module documentation.\n        project: Project description.\n\n    Returns:\n        The parsed model.\n    \"\"\"\n    elements = extract_module(ast=ast)\n    children_modules = [\n        *[parse_child_module(ast=m, project=project) for m in elements.modules],\n        *project.config.extra_modules.get(ast.canonical_path, []),\n    ]\n    classes = [\n        parse_class(ast=c, project=project) for c in elements.classes if c.has_docstring\n    ]\n    functions = [\n        parse_function(ast=f, semantic=FUNCTION_GLOBAL_SEMANTIC, project=project)\n        for f in elements.functions\n        if f.has_docstring\n    ]\n    attributes = [\n        parse_attribute(ast=a, semantic=GLOBAL_SEMANTIC, project=project)\n        for a in elements.attributes\n    ]\n    files = [format_file_doc(ast=f, project=project) for f in elements.files]\n    sections = get_docstring_sections(ast)\n\n    return Module(\n        name=ast.name,\n        documentation=format_detailed_docstring(\n            sections=sections, parent=ast, project=project\n        ),\n        semantic=MODULE_SEMANTIC,\n        path=canonical_path(ast=ast, project=project),\n        children=children_modules,\n        attributes=sorted(attributes, key=lambda m: m.name),\n        types=classes,\n        callables=functions,\n        files=files,\n    )"
            },
            "semantic": {
                "role": "function",
                "labels": [],
                "attributes": {},
                "relations": {}
            },
            "path": "py_griffe.parse_module"
        },
        {
            "name": "parse_child_module",
            "documentation": {
                "sections": [
                    {
                        "content": "Transforms submodule documentation as provided by griffe to the mkdocs-ts models.",
                        "contentType": "Markdown",
                        "semantic": {
                            "role": "text",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "title": null
                    },
                    {
                        "content": "The parsed model.",
                        "contentType": "Markdown",
                        "semantic": {
                            "role": "returns",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "title": "Returns"
                    },
                    {
                        "content": "\n*  **ast**: Griffe's module documentation.\n*  **project**: Project description.",
                        "contentType": "Markdown",
                        "semantic": {
                            "role": "arguments",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "title": "Arguments"
                    }
                ]
            },
            "code": {
                "declaration": "def parse_child_module(ast: AstModule, project: Project) -> ChildModule",
                "filePath": "py_griffe.py",
                "startLine": 516,
                "endLine": 531,
                "references": {
                    "ChildModule": "@nav/api/Backends/mkdocs_py_griffe/.models.ChildModule",
                    "dataclasses": "https://docs.python.org/3/library/dataclasses.html#",
                    "dataclass": "https://docs.python.org/3/library/dataclasses.html#",
                    "str": "https://docs.python.org/fr/3/library/string.html",
                    "EntityPath": "@nav/api/Backends/mkdocs_py_griffe/.models.EntityPath",
                    "bool": "https://docs.python.org/fr/3/library/stdtypes.html#boolean-type-bool",
                    "AstModule": "https://mkdocstrings.github.io/griffe/reference/griffe/#griffe.Module",
                    "Project": "@nav/api/Backends/mkdocs_py_griffe/.py_griffe.Project",
                    "parse_child_module": "@nav/api/Backends/mkdocs_py_griffe/.py_griffe.parse_child_module"
                },
                "implementation": "def parse_child_module(ast: AstModule, project: Project) -> ChildModule:\n    \"\"\"\n    Transforms submodule documentation as provided by griffe to the mkdocs-ts models.\n\n    Parameters:\n        ast: Griffe's module documentation.\n        project: Project description.\n\n    Returns:\n        The parsed model.\n    \"\"\"\n    return ChildModule(\n        name=ast.name,\n        path=ast.canonical_path,\n        isLeaf=is_leaf_module(path=ast.canonical_path, project=project),\n    )"
            },
            "semantic": {
                "role": "function",
                "labels": [],
                "attributes": {},
                "relations": {}
            },
            "path": "py_griffe.parse_child_module"
        },
        {
            "name": "format_file_doc",
            "documentation": {
                "sections": [
                    {
                        "content": "Transforms a file documentation as provided by griffe to the mkdocs-ts models.",
                        "contentType": "Markdown",
                        "semantic": {
                            "role": "text",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "title": null
                    },
                    {
                        "content": "The parsed model.",
                        "contentType": "Markdown",
                        "semantic": {
                            "role": "returns",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "title": "Returns"
                    },
                    {
                        "content": "\n*  **ast**: Griffe's module documentation.\n*  **project**: Project description.",
                        "contentType": "Markdown",
                        "semantic": {
                            "role": "arguments",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "title": "Arguments"
                    }
                ]
            },
            "code": {
                "declaration": "def format_file_doc(ast: AstModule, project: Project) -> File",
                "filePath": "py_griffe.py",
                "startLine": 534,
                "endLine": 551,
                "references": {
                    "File": "@nav/api/Backends/mkdocs_py_griffe/.models.File",
                    "dataclasses": "https://docs.python.org/3/library/dataclasses.html#",
                    "dataclass": "https://docs.python.org/3/library/dataclasses.html#",
                    "str": "https://docs.python.org/fr/3/library/string.html",
                    "Documentation": "@nav/api/Backends/mkdocs_py_griffe/.models.Documentation",
                    "AstModule": "https://mkdocstrings.github.io/griffe/reference/griffe/#griffe.Module",
                    "Project": "@nav/api/Backends/mkdocs_py_griffe/.py_griffe.Project",
                    "format_file_doc": "@nav/api/Backends/mkdocs_py_griffe/.py_griffe.format_file_doc"
                },
                "implementation": "def format_file_doc(ast: AstModule, project: Project) -> File:\n    \"\"\"\n    Transforms a file documentation as provided by griffe to the mkdocs-ts models.\n\n    Parameters:\n        ast: Griffe's module documentation.\n        project: Project description.\n\n    Returns:\n        The parsed model.\n    \"\"\"\n    return File(\n        name=ast.name,\n        path=str(ast.filepath.relative_to(project.root_ast.filepath.parent)),\n        documentation=format_detailed_docstring(\n            get_docstring_sections(ast), parent=ast, project=project\n        ),\n    )"
            },
            "semantic": {
                "role": "function",
                "labels": [],
                "attributes": {},
                "relations": {}
            },
            "path": "py_griffe.format_file_doc"
        },
        {
            "name": "parse_function",
            "documentation": {
                "sections": [
                    {
                        "content": "Transforms a function's documentation as provided by griffe to the mkdocs-ts models.",
                        "contentType": "Markdown",
                        "semantic": {
                            "role": "text",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "title": null
                    },
                    {
                        "content": "The parsed model.",
                        "contentType": "Markdown",
                        "semantic": {
                            "role": "returns",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "title": "Returns"
                    },
                    {
                        "content": "\n*  **ast**: Griffe's function documentation.\n*  **semantic**: Target semantic\n*  **project**: Project description.",
                        "contentType": "Markdown",
                        "semantic": {
                            "role": "arguments",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "title": "Arguments"
                    }
                ]
            },
            "code": {
                "declaration": "def parse_function(ast: AstFunction, semantic: Semantic, project: Project) -> Callable",
                "filePath": "py_griffe.py",
                "startLine": 554,
                "endLine": 590,
                "references": {
                    "Callable": "@nav/api/Backends/mkdocs_py_griffe/.models.Callable",
                    "Entity": "@nav/api/Backends/mkdocs_py_griffe/.models.Entity",
                    "AstFunction": "https://mkdocstrings.github.io/griffe/reference/griffe/#griffe.Function",
                    "Semantic": "@nav/api/Backends/mkdocs_py_griffe/.models.Semantic",
                    "Project": "@nav/api/Backends/mkdocs_py_griffe/.py_griffe.Project",
                    "parse_function": "@nav/api/Backends/mkdocs_py_griffe/.py_griffe.parse_function"
                },
                "implementation": "def parse_function(ast: AstFunction, semantic: Semantic, project: Project) -> Callable:\n    \"\"\"\n    Transforms a function's documentation as provided by griffe to the mkdocs-ts models.\n\n    Parameters:\n        ast: Griffe's function documentation.\n        semantic: Target semantic\n        project: Project description.\n\n    Returns:\n        The parsed model.\n    \"\"\"\n    parsed = get_docstring_sections(ast)\n    sections = [\n        p\n        for p in parsed\n        if isinstance(p, DocstringSectionText)\n        or (isinstance(p, DocstringSectionAdmonition) and p.title != \"Return\")\n    ]\n    formatted = format_detailed_docstring(sections, parent=ast, project=project)\n    params_doc = parse_parameters(ast=ast, parsed=parsed, project=project)\n    returns_doc = parse_returns(ast=ast, parsed=parsed, project=project)\n    raises_doc = parse_raises(ast=ast, parsed=parsed, project=project)\n\n    return Callable(\n        name=ast.name,\n        documentation=Documentation(\n            sections=[\n                s\n                for s in [*formatted.sections, returns_doc, params_doc, raises_doc]\n                if s\n            ]\n        ),\n        path=canonical_path(ast=ast, project=project),\n        code=parse_code(ast=ast, project=project),\n        semantic=semantic,\n    )"
            },
            "semantic": {
                "role": "function",
                "labels": [],
                "attributes": {},
                "relations": {}
            },
            "path": "py_griffe.parse_function"
        },
        {
            "name": "parse_class",
            "documentation": {
                "sections": [
                    {
                        "content": "Transforms a class's documentation as provided by griffe to the mkdocs-ts models.",
                        "contentType": "Markdown",
                        "semantic": {
                            "role": "text",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "title": null
                    },
                    {
                        "content": "The parsed model.",
                        "contentType": "Markdown",
                        "semantic": {
                            "role": "returns",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "title": "Returns"
                    },
                    {
                        "content": "\n*  **ast**: Griffe's class documentation.\n*  **project**: Project description.",
                        "contentType": "Markdown",
                        "semantic": {
                            "role": "arguments",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "title": "Arguments"
                    }
                ]
            },
            "code": {
                "declaration": "def parse_class(ast: AstClass, project: Project) -> Type",
                "filePath": "py_griffe.py",
                "startLine": 593,
                "endLine": 631,
                "references": {
                    "Type": "@nav/api/Backends/mkdocs_py_griffe/.models.Type",
                    "Entity": "@nav/api/Backends/mkdocs_py_griffe/.models.Entity",
                    "dataclasses": "https://docs.python.org/3/library/dataclasses.html#",
                    "dataclass": "https://docs.python.org/3/library/dataclasses.html#",
                    "str": "https://docs.python.org/fr/3/library/string.html",
                    "Documentation": "@nav/api/Backends/mkdocs_py_griffe/.models.Documentation",
                    "Code": "@nav/api/Backends/mkdocs_py_griffe/.models.Code",
                    "Semantic": "@nav/api/Backends/mkdocs_py_griffe/.models.Semantic",
                    "EntityPath": "@nav/api/Backends/mkdocs_py_griffe/.models.EntityPath",
                    "list": "https://docs.python.org/3/library/stdtypes.html#lists",
                    "Callable": "@nav/api/Backends/mkdocs_py_griffe/.models.Callable",
                    "Attribute": "@nav/api/Backends/mkdocs_py_griffe/.models.Attribute",
                    "AstClass": "https://mkdocstrings.github.io/griffe/reference/griffe/#griffe.Class",
                    "Project": "@nav/api/Backends/mkdocs_py_griffe/.py_griffe.Project",
                    "parse_class": "@nav/api/Backends/mkdocs_py_griffe/.py_griffe.parse_class"
                },
                "implementation": "def parse_class(ast: AstClass, project: Project) -> Type:\n    \"\"\"\n    Transforms a class's documentation as provided by griffe to the mkdocs-ts models.\n\n    Parameters:\n        ast: Griffe's class documentation.\n        project: Project description.\n\n    Returns:\n        The parsed model.\n    \"\"\"\n    bases = find_attributes_of_type(ast.bases, ExprName)\n    semantic = Semantic(\n        role=\"class\",\n        labels=[],\n        attributes={},\n        relations={\"inherits\": [b.canonical_path for b in bases]},\n    )\n    return Type(\n        name=ast.name,\n        documentation=format_detailed_docstring(\n            sections=get_docstring_sections(ast),\n            parent=ast,\n            project=project,\n        ),\n        path=canonical_path(ast=ast, project=project),\n        semantic=semantic,\n        attributes=[\n            parse_attribute(ast=attr, semantic=ATTR_SEMANTIC, project=project)\n            for attr in ast.attributes.values()\n            if attr.docstring and not attr.inherited\n        ],\n        callables=[\n            parse_function(ast=f, semantic=METHOD_SEMANTIC, project=project)\n            for f in ast.functions.values()\n            if f and f.docstring\n        ],\n        code=parse_code(ast, project=project),\n    )"
            },
            "semantic": {
                "role": "function",
                "labels": [],
                "attributes": {},
                "relations": {}
            },
            "path": "py_griffe.parse_class"
        },
        {
            "name": "parse_parameters",
            "documentation": {
                "sections": [
                    {
                        "content": "Transforms a function's parameter documentation as provided by griffe to the mkdocs-ts models.",
                        "contentType": "Markdown",
                        "semantic": {
                            "role": "text",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "title": null
                    },
                    {
                        "content": "The parsed model.",
                        "contentType": "Markdown",
                        "semantic": {
                            "role": "returns",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "title": "Returns"
                    },
                    {
                        "content": "\n*  **ast**: Griffe's function documentation.\n*  **parsed**: parsed documentation using google style.\n*  **project**: Project description.",
                        "contentType": "Markdown",
                        "semantic": {
                            "role": "arguments",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "title": "Arguments"
                    }
                ]
            },
            "code": {
                "declaration": "def parse_parameters(\n    ast: AstFunction, parsed: list[DocstringSection], project: Project\n) -> DocumentationSection | None",
                "filePath": "py_griffe.py",
                "startLine": 634,
                "endLine": 670,
                "references": {
                    "DocumentationSection": "@nav/api/Backends/mkdocs_py_griffe/.models.DocumentationSection",
                    "AstFunction": "https://mkdocstrings.github.io/griffe/reference/griffe/#griffe.Function",
                    "list": "https://docs.python.org/3/library/stdtypes.html#lists",
                    "DocstringSection": "https://mkdocstrings.github.io/griffe/reference/api/docstrings/models/#griffe.DocstringSection",
                    "Project": "@nav/api/Backends/mkdocs_py_griffe/.py_griffe.Project",
                    "parse_parameters": "@nav/api/Backends/mkdocs_py_griffe/.py_griffe.parse_parameters"
                },
                "implementation": "def parse_parameters(\n    ast: AstFunction, parsed: list[DocstringSection], project: Project\n) -> DocumentationSection | None:\n    \"\"\"\n    Transforms a function's parameter documentation as provided by griffe to the mkdocs-ts models.\n\n    Parameters:\n        ast: Griffe's function documentation.\n        parsed: parsed documentation using google style.\n        project: Project description.\n\n    Returns:\n        The parsed model.\n    \"\"\"\n\n    params = next(\n        (p for p in parsed if isinstance(p, DocstringSectionParameters)), None\n    )\n\n    def format_param(e):\n        with_links = replace_links(\n            e.description, parent=ast.canonical_path, project=project\n        )\n        return f\"*  **{e.name}**: {with_links}\"\n\n    if not params:\n        return None\n\n    content = functools.reduce(\n        lambda acc, e: f\"{acc}\\n{format_param(e)}\", params.value, \"\"\n    )\n    return DocumentationSection(\n        title=\"Arguments\",\n        content=content,\n        contentType=\"Markdown\",\n        semantic=Semantic(role=\"arguments\", labels=[], attributes={}, relations={}),\n    )"
            },
            "semantic": {
                "role": "function",
                "labels": [],
                "attributes": {},
                "relations": {}
            },
            "path": "py_griffe.parse_parameters"
        },
        {
            "name": "parse_returns",
            "documentation": {
                "sections": [
                    {
                        "content": "Transforms a function's returns documentation as provided by griffe to the mkdocs-ts models.",
                        "contentType": "Markdown",
                        "semantic": {
                            "role": "text",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "title": null
                    },
                    {
                        "content": "The parsed model.",
                        "contentType": "Markdown",
                        "semantic": {
                            "role": "returns",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "title": "Returns"
                    },
                    {
                        "content": "\n*  **ast**: Griffe's function documentation.\n*  **parsed**: parsed documentation using google style.\n*  **project**: Project description.",
                        "contentType": "Markdown",
                        "semantic": {
                            "role": "arguments",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "title": "Arguments"
                    }
                ]
            },
            "code": {
                "declaration": "def parse_returns(\n    ast: AstFunction, parsed: list[DocstringSection], project: Project\n) -> DocumentationSection | None",
                "filePath": "py_griffe.py",
                "startLine": 673,
                "endLine": 713,
                "references": {
                    "DocumentationSection": "@nav/api/Backends/mkdocs_py_griffe/.models.DocumentationSection",
                    "AstFunction": "https://mkdocstrings.github.io/griffe/reference/griffe/#griffe.Function",
                    "list": "https://docs.python.org/3/library/stdtypes.html#lists",
                    "DocstringSection": "https://mkdocstrings.github.io/griffe/reference/api/docstrings/models/#griffe.DocstringSection",
                    "Project": "@nav/api/Backends/mkdocs_py_griffe/.py_griffe.Project",
                    "parse_returns": "@nav/api/Backends/mkdocs_py_griffe/.py_griffe.parse_returns"
                },
                "implementation": "def parse_returns(\n    ast: AstFunction, parsed: list[DocstringSection], project: Project\n) -> DocumentationSection | None:\n    \"\"\"\n    Transforms a function's returns documentation as provided by griffe to the mkdocs-ts models.\n\n    Parameters:\n        ast: Griffe's function documentation.\n        parsed: parsed documentation using google style.\n        project: Project description.\n\n    Returns:\n        The parsed model.\n    \"\"\"\n\n    returns = next(\n        (p for p in parsed if isinstance(p, DocstringSectionReturns)),\n        None,\n    )\n    if returns:\n        try:\n            returns_doc = replace_links(\n                returns.value[0].description,\n                parent=ast.canonical_path,\n                project=project,\n            )\n            return DocumentationSection(\n                title=\"Returns\",\n                content=returns_doc,\n                contentType=\"Markdown\",\n                semantic=Semantic(\n                    role=\"returns\", labels=[], attributes={}, relations={}\n                ),\n            )\n        except RuntimeError as e:\n            DocReporter.add_error(\n                ast.canonical_path,\n                f\"Failed to parse return of function {ast.name}: {e}\",\n            )\n\n    return None"
            },
            "semantic": {
                "role": "function",
                "labels": [],
                "attributes": {},
                "relations": {}
            },
            "path": "py_griffe.parse_returns"
        },
        {
            "name": "parse_raises",
            "documentation": {
                "sections": [
                    {
                        "content": "Transforms a function's raises documentation as provided by griffe to the mkdocs-ts models.",
                        "contentType": "Markdown",
                        "semantic": {
                            "role": "text",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "title": null
                    },
                    {
                        "content": "The parsed model.",
                        "contentType": "Markdown",
                        "semantic": {
                            "role": "returns",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "title": "Returns"
                    },
                    {
                        "content": "\n*  **ast**: Griffe's function documentation.\n*  **parsed**: parsed documentation using google style.\n*  **project**: Project description.",
                        "contentType": "Markdown",
                        "semantic": {
                            "role": "arguments",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "title": "Arguments"
                    }
                ]
            },
            "code": {
                "declaration": "def parse_raises(\n    ast: AstFunction, parsed: list[DocstringSection], project: Project\n) -> DocumentationSection | None",
                "filePath": "py_griffe.py",
                "startLine": 716,
                "endLine": 768,
                "references": {
                    "DocumentationSection": "@nav/api/Backends/mkdocs_py_griffe/.models.DocumentationSection",
                    "AstFunction": "https://mkdocstrings.github.io/griffe/reference/griffe/#griffe.Function",
                    "list": "https://docs.python.org/3/library/stdtypes.html#lists",
                    "DocstringSection": "https://mkdocstrings.github.io/griffe/reference/api/docstrings/models/#griffe.DocstringSection",
                    "Project": "@nav/api/Backends/mkdocs_py_griffe/.py_griffe.Project",
                    "parse_raises": "@nav/api/Backends/mkdocs_py_griffe/.py_griffe.parse_raises"
                },
                "implementation": "def parse_raises(\n    ast: AstFunction, parsed: list[DocstringSection], project: Project\n) -> DocumentationSection | None:\n    \"\"\"\n    Transforms a function's raises documentation as provided by griffe to the mkdocs-ts models.\n\n    Parameters:\n        ast: Griffe's function documentation.\n        parsed: parsed documentation using google style.\n        project: Project description.\n\n    Returns:\n        The parsed model.\n    \"\"\"\n\n    raises = next(\n        (p for p in parsed if isinstance(p, DocstringSectionRaises)),\n        None,\n    )\n    if raises:\n        try:\n\n            def format_raise(raise_ast):\n                with_links = replace_links(\n                    raise_ast.description, parent=ast.canonical_path, project=project\n                )\n                annotation = raise_ast.annotation\n                exception_nav = navigation_path(\n                    py_path=annotation.canonical_path,\n                    name=annotation.name,\n                    project=project,\n                )\n                return f\"*  **<a target='_blank' href='{exception_nav}'>{annotation.name}</a>**: {with_links}\"\n\n            content = functools.reduce(\n                lambda acc, e: f\"{acc}\\n{format_raise(e)}\", raises.value, \"\"\n            )\n\n            return DocumentationSection(\n                title=\"Raises\",\n                content=content,\n                contentType=\"Markdown\",\n                semantic=Semantic(\n                    role=\"raises\", labels=[], attributes={}, relations={}\n                ),\n            )\n        except RuntimeError as error:\n            DocReporter.add_error(\n                ast.canonical_path,\n                f\"Failed to parse 'raises' of function {ast.name}: {error}\",\n            )\n\n    return None"
            },
            "semantic": {
                "role": "function",
                "labels": [],
                "attributes": {},
                "relations": {}
            },
            "path": "py_griffe.parse_raises"
        },
        {
            "name": "parse_attribute",
            "documentation": {
                "sections": [
                    {
                        "content": "Transforms an attribute's documentation as provided by griffe to the mkdocs-ts models.",
                        "contentType": "Markdown",
                        "semantic": {
                            "role": "text",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "title": null
                    },
                    {
                        "content": "The parsed model.",
                        "contentType": "Markdown",
                        "semantic": {
                            "role": "returns",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "title": "Returns"
                    },
                    {
                        "content": "\n*  **ast**: Griffe's module documentation.\n*  **semantic**: Target semantic.\n*  **project**: Project description.",
                        "contentType": "Markdown",
                        "semantic": {
                            "role": "arguments",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "title": "Arguments"
                    }
                ]
            },
            "code": {
                "declaration": "def parse_attribute(\n    ast: AstAttribute, semantic: Semantic, project: Project\n) -> Attribute",
                "filePath": "py_griffe.py",
                "startLine": 918,
                "endLine": 942,
                "references": {
                    "Attribute": "@nav/api/Backends/mkdocs_py_griffe/.models.Attribute",
                    "Entity": "@nav/api/Backends/mkdocs_py_griffe/.models.Entity",
                    "AstAttribute": "https://mkdocstrings.github.io/griffe/reference/griffe/#griffe.Attribute",
                    "Semantic": "@nav/api/Backends/mkdocs_py_griffe/.models.Semantic",
                    "Project": "@nav/api/Backends/mkdocs_py_griffe/.py_griffe.Project",
                    "parse_attribute": "@nav/api/Backends/mkdocs_py_griffe/.py_griffe.parse_attribute"
                },
                "implementation": "def parse_attribute(\n    ast: AstAttribute, semantic: Semantic, project: Project\n) -> Attribute:\n    \"\"\"\n    Transforms an attribute's documentation as provided by griffe to the mkdocs-ts models.\n\n    Parameters:\n        ast: Griffe's module documentation.\n        semantic: Target semantic.\n        project: Project description.\n\n    Returns:\n        The parsed model.\n    \"\"\"\n    sections = get_docstring_sections(ast)\n    documentation = format_detailed_docstring(\n        sections=sections, parent=ast, project=project\n    )\n    return Attribute(\n        name=ast.name,\n        semantic=semantic,\n        documentation=documentation,\n        path=canonical_path(ast=ast, project=project),\n        code=parse_code(ast=ast, project=project),\n    )"
            },
            "semantic": {
                "role": "function",
                "labels": [],
                "attributes": {},
                "relations": {}
            },
            "path": "py_griffe.parse_attribute"
        },
        {
            "name": "parse_code",
            "documentation": {
                "sections": [
                    {
                        "content": "Transforms a code's documentation from class, function or attribute provided by griffe to the mkdocs-ts models.",
                        "contentType": "Markdown",
                        "semantic": {
                            "role": "text",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "title": null
                    },
                    {
                        "content": "The parsed model.",
                        "contentType": "Markdown",
                        "semantic": {
                            "role": "returns",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "title": "Returns"
                    },
                    {
                        "content": "\n*  **ast**: Griffe's module documentation.\n*  **project**: Project description.",
                        "contentType": "Markdown",
                        "semantic": {
                            "role": "arguments",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "title": "Arguments"
                    }
                ]
            },
            "code": {
                "declaration": "def parse_code(ast: AstClass | AstFunction | AstAttribute, project: Project) -> Code",
                "filePath": "py_griffe.py",
                "startLine": 961,
                "endLine": 1049,
                "references": {
                    "Code": "@nav/api/Backends/mkdocs_py_griffe/.models.Code",
                    "dataclasses": "https://docs.python.org/3/library/dataclasses.html#",
                    "dataclass": "https://docs.python.org/3/library/dataclasses.html#",
                    "str": "https://docs.python.org/fr/3/library/string.html",
                    "int": "https://docs.python.org/fr/3/library/stdtypes.html#numeric-types-int-float-complex",
                    "dict": "https://docs.python.org/3/library/stdtypes.html#mapping-types-dict",
                    "EntityPath": "@nav/api/Backends/mkdocs_py_griffe/.models.EntityPath",
                    "Optional": "https://docs.python.org/3/library/typing.html#typing.Optional",
                    "AstClass": "https://mkdocstrings.github.io/griffe/reference/griffe/#griffe.Class",
                    "AstFunction": "https://mkdocstrings.github.io/griffe/reference/griffe/#griffe.Function",
                    "AstAttribute": "https://mkdocstrings.github.io/griffe/reference/griffe/#griffe.Attribute",
                    "Project": "@nav/api/Backends/mkdocs_py_griffe/.py_griffe.Project",
                    "parse_code": "@nav/api/Backends/mkdocs_py_griffe/.py_griffe.parse_code"
                },
                "implementation": "def parse_code(ast: AstClass | AstFunction | AstAttribute, project: Project) -> Code:\n    \"\"\"\n    Transforms a code's documentation from class, function or attribute provided by griffe to the mkdocs-ts models.\n\n    Parameters:\n        ast: Griffe's module documentation.\n        project: Project description.\n\n    Returns:\n        The parsed model.\n    \"\"\"\n\n    def nav_path(e: ExprName | AstClass | AstFunction) -> str | None:\n        nav = navigation_path_ast(ast=e, project=project, report_error=False)\n        if nav:\n            return nav\n        if e.parent and e.parent.canonical_path == \"self\":\n            # When declaring a variable in '__init__'.\n            parent_class = e.parent.parent.parent.canonical_path\n            nav = navigation_path(\n                py_path=f\"{parent_class}.{e.name}\", name=e.name, project=project\n            )\n            return nav\n\n        if e.parent and e.parent.canonical_path.endswith(\".__init__\"):\n            # This is when a symbol is coming from the '__init__' parameters\n            nav = navigation_path(\n                py_path=e.parent.canonical_path, name=e.name, project=project\n            )\n            return nav\n\n        # Let's try if a unique symbol with given name exists\n        keys = [v for k, v in project.all_symbols.items() if k.endswith(f\".{e.name}\")]\n        if len(keys) == 1:\n            return keys[0].navigation_path\n\n        DocReporter.add_internal_cross_ref_error(e.canonical_path)\n\n        return None\n\n    file_path = str(ast.filepath.relative_to(project.root_ast.filepath.parent))\n    references = {}\n    implementation = None\n    declaration = \"\"\n    if isinstance(ast, AstAttribute):\n        types_annotation = find_attributes_of_type(ast.annotation, ExprName)\n        types_value = find_attributes_of_type(ast.value, ExprName)\n        declaration = functools.reduce(lambda acc, e: f\"{acc}\\n{e}\", ast.lines)\n        implementation = None\n        references = {e.name: nav_path(e=e) for e in [*types_annotation, *types_value]}\n\n    if isinstance(ast, AstFunction):\n        types_annotation = find_attributes_of_type(ast.annotation, ExprName)\n        returns_annotation = find_attributes_of_type(ast.returns, ExprName)\n        parameters_annotation = find_attributes_of_type(ast.parameters, ExprName)\n        all_annotations = [\n            *types_annotation,\n            *returns_annotation,\n            *parameters_annotation,\n        ]\n        implementation = functools.reduce(lambda acc, e: f\"{acc}\\n{e}\", ast.lines)\n        declaration = extract_function_declaration(implementation)\n        references = {\n            **{e.name: nav_path(e=e) for e in all_annotations},\n            ast.name: nav_path(e=ast),\n        }\n\n    if isinstance(ast, AstClass):\n        decorators_annotation = find_attributes_of_type(ast.decorators, ExprName)\n        bases_annotation = find_attributes_of_type(ast.bases, ExprName)\n        all_annotations = [\n            *decorators_annotation,\n            *bases_annotation,\n        ]\n        implementation = functools.reduce(lambda acc, e: f\"{acc}\\n{e}\", ast.lines)\n        declaration = extract_class_declaration(implementation)\n        references = {\n            **{e.name: nav_path(e=e) for e in all_annotations},\n            ast.name: nav_path(e=ast),\n        }\n\n    return Code(\n        filePath=file_path,\n        startLine=ast.lineno,\n        endLine=ast.endlineno,\n        declaration=declaration,\n        implementation=implementation,\n        references=references,\n    )"
            },
            "semantic": {
                "role": "function",
                "labels": [],
                "attributes": {},
                "relations": {}
            },
            "path": "py_griffe.parse_code"
        },
        {
            "name": "init_symbols",
            "documentation": {
                "sections": [
                    {
                        "content": "Recursive look up for all the symbols within the provided AST.",
                        "contentType": "Markdown",
                        "semantic": {
                            "role": "text",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "title": null
                    },
                    {
                        "content": "A dictionary `canonical path` => [SymbolRef](@nav/api/Backends/mkdocs_py_griffe/.py_griffe.SymbolRef '{\"class\": \"mkapi-semantic-flag mkapi-role-class\"}').",
                        "contentType": "Markdown",
                        "semantic": {
                            "role": "returns",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "title": "Returns"
                    },
                    {
                        "content": "\n*  **root_ast**: Root module's AST.",
                        "contentType": "Markdown",
                        "semantic": {
                            "role": "arguments",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "title": "Arguments"
                    }
                ]
            },
            "code": {
                "declaration": "def init_symbols(root_ast: AstModule) -> dict[str, SymbolRef]",
                "filePath": "py_griffe.py",
                "startLine": 1108,
                "endLine": 1191,
                "references": {
                    "dict": "https://docs.python.org/3/library/stdtypes.html#mapping-types-dict",
                    "str": "https://docs.python.org/fr/3/library/string.html",
                    "SymbolRef": "@nav/api/Backends/mkdocs_py_griffe/.py_griffe.SymbolRef",
                    "NamedTuple": "https://docs.python.org/3/library/typing.html#typing.NamedTuple",
                    "AstModule": "https://mkdocstrings.github.io/griffe/reference/griffe/#griffe.Module",
                    "init_symbols": "@nav/api/Backends/mkdocs_py_griffe/.py_griffe.init_symbols"
                },
                "implementation": "def init_symbols(root_ast: AstModule) -> dict[str, SymbolRef]:\n    \"\"\"\n    Recursive look up for all the symbols within the provided AST.\n\n    Parameters:\n        root_ast: Root module's AST.\n\n    Returns:\n        A dictionary `canonical path` => :class:`mkdocs_py_griffe.py_griffe.SymbolRef`.\n    \"\"\"\n\n    def get_canonical_path(p: str):\n        return p.replace(f\"{root_ast.name}.\", \"\")\n\n    def get_symbol(\n        ast: AstClass | AstFunction | AstAttribute | AstModule, from_class: bool\n    ):\n        base = get_canonical_path(ast.canonical_path)\n        indexes = {\n            Kind.MODULE: 1,\n            Kind.ATTRIBUTE: 3 if from_class else 2,\n            Kind.FUNCTION: 3 if from_class else 2,\n            Kind.CLASS: 2,\n        }\n        kinds = {\n            Kind.MODULE: \"module\",\n            Kind.ATTRIBUTE: \"property\" if from_class else \"attribute\",\n            Kind.FUNCTION: \"method\" if from_class else \"function\",\n            Kind.CLASS: \"class\",\n        }\n        index = indexes[ast.kind]\n        module_path = \"/\".join(base.split(\".\")[0:-index])\n        remaining = \".\".join(base.split(\".\")[-index:])\n        return SymbolRef(\n            navigation_path=f\"{module_path}.{remaining}\",\n            kind=cast(SymbolKind, kinds[ast.kind]),\n        )\n\n    def init_symbols_rec(ast: AstModule, depth=0, max_depth=10) -> dict[str, SymbolRef]:\n        if depth > max_depth:\n            raise RecursionError(\"Maximum recursion depth reached\")\n\n        elements = extract_module(ast=ast)\n        functions = {\n            get_canonical_path(f.canonical_path): get_symbol(f, from_class=False)\n            for f in elements.functions\n        }\n        attributes = {\n            get_canonical_path(a.canonical_path): get_symbol(a, from_class=False)\n            for a in elements.attributes\n        }\n        classes = {\n            get_canonical_path(c.canonical_path): get_symbol(c, from_class=False)\n            for c in elements.classes\n        }\n        methods = {\n            get_canonical_path(m.canonical_path): get_symbol(m, from_class=True)\n            for c in elements.classes\n            for m in c.functions.values()\n        }\n        properties = {\n            get_canonical_path(p.canonical_path): get_symbol(p, from_class=True)\n            for c in elements.classes\n            for p in c.attributes.values()\n        }\n        sub_modules = {\n            k: v\n            for module in elements.modules\n            for k, v in init_symbols_rec(\n                ast=module, depth=depth + 1, max_depth=max_depth\n            ).items()\n        }\n        return {\n            get_canonical_path(ast.canonical_path): get_symbol(ast, from_class=False),\n            **functions,\n            **attributes,\n            **classes,\n            **methods,\n            **properties,\n            **attributes,\n            **sub_modules,\n        }\n\n    return init_symbols_rec(ast=root_ast)"
            },
            "semantic": {
                "role": "function",
                "labels": [],
                "attributes": {},
                "relations": {}
            },
            "path": "py_griffe.init_symbols"
        },
        {
            "name": "init_aliases",
            "documentation": {
                "sections": [
                    {
                        "content": "Recursive look up for all the aliases within the provided AST.",
                        "contentType": "Markdown",
                        "semantic": {
                            "role": "text",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "title": null
                    },
                    {
                        "content": "A dictionary `alias canonical path` => `resolved canonical path`.",
                        "contentType": "Markdown",
                        "semantic": {
                            "role": "returns",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "title": "Returns"
                    },
                    {
                        "content": "\n*  **root_ast**: Root module's AST.",
                        "contentType": "Markdown",
                        "semantic": {
                            "role": "arguments",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "title": "Arguments"
                    }
                ]
            },
            "code": {
                "declaration": "def init_aliases(root_ast: AstModule) -> dict[str, str]",
                "filePath": "py_griffe.py",
                "startLine": 1194,
                "endLine": 1274,
                "references": {
                    "dict": "https://docs.python.org/3/library/stdtypes.html#mapping-types-dict",
                    "str": "https://docs.python.org/fr/3/library/string.html",
                    "AstModule": "https://mkdocstrings.github.io/griffe/reference/griffe/#griffe.Module",
                    "init_aliases": "@nav/api/Backends/mkdocs_py_griffe/.py_griffe.init_aliases"
                },
                "implementation": "def init_aliases(root_ast: AstModule) -> dict[str, str]:\n    \"\"\"\n    Recursive look up for all the aliases within the provided AST.\n\n    Parameters:\n        root_ast: Root module's AST.\n\n    Returns:\n        A dictionary `alias canonical path` => `resolved canonical path`.\n    \"\"\"\n\n    aliases = {}\n    modules_seen = []\n\n    def is_leaf(ast):\n        return any(isinstance(ast, C) for C in [AstAttribute, AstClass, AstFunction])\n\n    def process_entity(\n        ast: AstModule | AstAlias | AstAttribute | AstClass | AstFunction,\n        parent_module: str,\n        parents_wild_card: list[str],\n    ):\n\n        def add_import(\n            entity: AstModule | AstAlias | AstAttribute | AstClass | AstFunction,\n        ):\n            aliases[f\"{parent_module}.{entity.name}\"] = entity.canonical_path\n            for parent_wild_card in parents_wild_card:\n                aliases[f\"{parent_wild_card}.{entity.name}\"] = entity.canonical_path\n\n        if is_leaf(ast):\n            add_import(ast)\n            return\n\n        def is_in_lib(m):\n            try:\n                m.canonical_path.startswith(root_ast.name)\n                return True\n            except AliasResolutionError:\n                return False\n\n        lib_members = [m for m in ast.all_members.values() if is_in_lib(m)]\n\n        modules = [\n            m\n            for m in lib_members\n            if isinstance(m, AstModule) and m.canonical_path not in modules_seen\n        ]\n        for m in modules:\n            modules_seen.append(m.canonical_path)\n            add_import(m)\n            process_entity(m, m.canonical_path, parents_wild_card)\n\n        direct_imports = [\n            m\n            for m in lib_members\n            if not isinstance(m, AstAlias) and not isinstance(m, AstModule)\n        ]\n        for direct_import in direct_imports:\n            process_entity(direct_import, ast.canonical_path, parents_wild_card)\n\n        direct_aliases: list[AstAlias] = [\n            m\n            for m in lib_members\n            if isinstance(m, AstAlias) and not m.name.endswith(\"/*\")\n        ]\n        for direct_alias in direct_aliases:\n            add_import(direct_alias)\n\n        wild_cards_aliases: list[AstAlias] = [\n            m for m in lib_members if isinstance(m, AstAlias) and m.name.endswith(\"/*\")\n        ]\n        for wild_card_alias in wild_cards_aliases:\n            process_entity(\n                wild_card_alias,\n                wild_card_alias.canonical_path,\n                [*parents_wild_card, ast.canonical_path],\n            )\n\n    process_entity(root_ast, root_ast.name, [])\n    return aliases"
            },
            "semantic": {
                "role": "function",
                "labels": [],
                "attributes": {},
                "relations": {}
            },
            "path": "py_griffe.init_aliases"
        },
        {
            "name": "generate_api",
            "documentation": {
                "sections": [
                    {
                        "content": "Create documentation API files from an AST parsed by the griffe library:\n* It generates the list of exported symbols (those documented).\n  See [init_symbols](@nav/api/Backends/mkdocs_py_griffe/.py_griffe.init_symbols '{\"class\": \"mkapi-semantic-flag mkapi-role-function\"}').\n* It generates the list of all aliases from the `__init__.py` files, and from the `import` statements in the files.\n  See [init_aliases](@nav/api/Backends/mkdocs_py_griffe/.py_griffe.init_aliases '{\"class\": \"mkapi-semantic-flag mkapi-role-function\"}').\n* It generates the documentation recursively for all exported modules (those documented).",
                        "contentType": "Markdown",
                        "semantic": {
                            "role": "text",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "title": null
                    },
                    {
                        "content": "\n*  **root_ast**: Root module's AST.\n*  **config**: Configuration.",
                        "contentType": "Markdown",
                        "semantic": {
                            "role": "arguments",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "title": "Arguments"
                    }
                ]
            },
            "code": {
                "declaration": "def generate_api(root_ast: AstModule, config: Configuration)",
                "filePath": "py_griffe.py",
                "startLine": 1277,
                "endLine": 1340,
                "references": {
                    "AstModule": "https://mkdocstrings.github.io/griffe/reference/griffe/#griffe.Module",
                    "Configuration": "@nav/api/Backends/mkdocs_py_griffe/.py_griffe.Configuration",
                    "generate_api": "@nav/api/Backends/mkdocs_py_griffe/.py_griffe.generate_api"
                },
                "implementation": "def generate_api(root_ast: AstModule, config: Configuration):\n    \"\"\"\n    Create documentation API files from an AST parsed by the griffe library:\n    * It generates the list of exported symbols (those documented).\n      See :func:`mkdocs_py_griffe.py_griffe.init_symbols`.\n    * It generates the list of all aliases from the `__init__.py` files, and from the `import` statements in the files.\n      See :func:`mkdocs_py_griffe.py_griffe.init_aliases`.\n    * It generates the documentation recursively for all exported modules (those documented).\n\n    Parameters:\n        root_ast: Root module's AST.\n        config: Configuration.\n    \"\"\"\n    DocReporter.clear()\n    all_symbols = init_symbols(root_ast=root_ast)\n    all_aliases = init_aliases(root_ast=root_ast)\n    cross_packages: dict[str, CrossLinkedPackage] = {}\n    for key in config.cross_linked_packages.keys():\n        root_package_ast = cast(griffe.Module, griffe.load(key, submodules=True))\n        cross_packages[key] = CrossLinkedPackage(\n            all_aliases=init_aliases(root_ast=root_package_ast),\n            all_symbols=init_symbols(root_ast=root_package_ast),\n        )\n    project = Project(\n        config=config,\n        root_ast=root_ast,\n        all_symbols=all_symbols,\n        all_aliases=all_aliases,\n        cross_linked_packages=cross_packages,\n    )\n\n    def get_doc_rec(module: AstModule, path: str):\n\n        doc = parse_module(module, project=project)\n        target_path = Path(config.out, *path.split(\".\")).with_suffix(\".json\")\n        if target_path.exists():\n            target_path.unlink()\n        target_path.parent.mkdir(parents=True, exist_ok=True)\n        with open(target_path, \"w\", encoding=\"UTF8\") as json_file:\n            json.dump(doc, json_file, cls=DataclassJSONEncoder, indent=4)\n        for child in doc.children:\n            if child in config.extra_modules.get(path, []):\n                continue\n            gr_child = module[child.name]\n            get_doc_rec(module=gr_child, path=f\"{path}.{child.name}\")\n\n    get_doc_rec(module=root_ast, path=root_ast.name)\n\n    print(\n        f\"Internal cross links errors ({len(DocReporter.internal_cross_ref_errors)}):\"\n    )\n    pprint.pprint(DocReporter.internal_cross_ref_errors)\n    print(\n        f\"External cross links errors  ({len(DocReporter.external_cross_ref_errors)}):\"\n    )\n    pprint.pprint(DocReporter.external_cross_ref_errors)\n    print(f\"No docstring errors ({len(DocReporter.no_docstrings_errors)}):\")\n    pprint.pprint(DocReporter.no_docstrings_errors)\n    print(f\"Sphinx cross-link tag unknown ({len(DocReporter.sphinx_tag_unknown)}):\")\n    pprint.pprint(DocReporter.sphinx_tag_unknown)\n    print(\n        f\"Sphinx cross-link unresolved ({len(DocReporter.sphinx_links_unresolved.keys())}):\"\n    )\n    pprint.pprint(DocReporter.sphinx_links_unresolved)"
            },
            "semantic": {
                "role": "function",
                "labels": [],
                "attributes": {},
                "relations": {}
            },
            "path": "py_griffe.generate_api"
        },
        {
            "name": "std_links",
            "documentation": {
                "sections": [
                    {
                        "content": "Returns typical links for standard python symbols from `https://docs.python.org`.",
                        "contentType": "Markdown",
                        "semantic": {
                            "role": "text",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "title": null
                    },
                    {
                        "content": "Dictionary `symbol-path` -> `URL`",
                        "contentType": "Markdown",
                        "semantic": {
                            "role": "returns",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "title": "Returns"
                    }
                ]
            },
            "code": {
                "declaration": "def std_links() -> dict[str, str]",
                "filePath": "std_links.py",
                "startLine": 1,
                "endLine": 73,
                "references": {
                    "dict": "https://docs.python.org/3/library/stdtypes.html#mapping-types-dict",
                    "str": "https://docs.python.org/fr/3/library/string.html",
                    "std_links": "@nav/api/Backends/mkdocs_py_griffe/.std_links.std_links"
                },
                "implementation": "def std_links() -> dict[str, str]:\n    \"\"\"\n    Returns typical links for standard python symbols from `https://docs.python.org`.\n\n    Returns:\n        Dictionary `symbol-path` -> `URL`\n    \"\"\"\n\n    typing_url = \"https://docs.python.org/3/library/typing.html\"\n    return {\n        \"hashlib\": \"https://docs.python.org/3/library/hashlib.html\",\n        \"hashlib.sha1\": \"https://docs.python.org/3/library/hashlib.html#hashlib.sha1\",\n        \"io\": \"https://docs.python.org/3/library/io.html\",\n        \"os\": \"https://docs.python.org/3/library/os.html\",\n        \"os.getenv\": \"https://docs.python.org/3/library/os.html#os.getenv\",\n        \"os.getcwd\": \"https://docs.python.org/3/library/os.html#os.getcwd\",\n        \"typing.Protocol\": \"https://docs.python.org/3/library/typing.html#typing.Protocol\",\n        \"typing.TextIO\": \"https://docs.python.org/3/library/typing.html#typing.TextIO\",\n        \"builtins\": \"https://docs.python.org/3/library/functions.html\",\n        \"builtins.dict\": \"https://docs.python.org/3/library/functions.html#func-dict\",\n        \"Exception\": \"https://docs.python.org/3/tutorial/errors.html\",\n        \"RuntimeError\": \"https://docs.python.org/3/library/exceptions.html#RuntimeError\",\n        \"bytes\": \"https://docs.python.org/3/library/stdtypes.html#bytes-and-bytearray-operations\",\n        \"str\": \"https://docs.python.org/fr/3/library/string.html\",\n        \"bool\": \"https://docs.python.org/fr/3/library/stdtypes.html#boolean-type-bool\",\n        \"int\": \"https://docs.python.org/fr/3/library/stdtypes.html#numeric-types-int-float-complex\",\n        \"float\": \"https://docs.python.org/fr/3/library/stdtypes.html#numeric-types-int-float-complex\",\n        \"list\": \"https://docs.python.org/3/library/stdtypes.html#lists\",\n        \"dict\": \"https://docs.python.org/3/library/stdtypes.html#mapping-types-dict\",\n        \"set\": \"https://docs.python.org/3/library/stdtypes.html#set\",\n        \"tuple\": \"https://docs.python.org/3/library/stdtypes.html#tuple\",\n        \"asyncio\": \"https://docs.python.org/3/library/asyncio.html\",\n        \"asyncio.subprocess.Process\": \"https://docs.python.org/3/library/asyncio-subprocess.html\",\n        \"collections.abc.Callable\": \"https://docs.python.org/3/library/collections.abc.html#collections.abc.Callable\",\n        \"collections.abc.Coroutine\": \"https://docs.python.org/3/library/collections.abc.html#collections.abc.Coroutine\",\n        \"collections.abc.Iterable\": \"https://docs.python.org/3/library/collections.abc.html#collections.abc.Iterable\",\n        \"collections.abc.Mapping\": \"https://docs.python.org/3/library/collections.abc.html#collections.abc.Mapping\",\n        \"io.BytesIO\": \"https://docs.python.org/3/library/io.html#io.BytesIO\",\n        \"enum.Enum\": \"https://docs.python.org/3/library/enum.html\",\n        \"abc.ABC\": \"https://docs.python.org/3/library/abc.html\",\n        \"collections.abc.Awaitable\": \"https://docs.python.org/3/library/collections.abc.html#collections.abc.Awaitable\",\n        \"pathlib.Path\": \"https://docs.python.org/fr/3/library/pathlib.html#pathlib.Path\",\n        \"typing.List\": f\"{typing_url}#typing.List\",\n        \"typing.Dict\": f\"{typing_url}#typing.Dict\",\n        \"typing.Tuple\": f\"{typing_url}#typing.Tuple\",\n        \"typing.Optional\": f\"{typing_url}#typing.Optional\",\n        \"typing.Union\": f\"{typing_url}#typing.Union\",\n        \"typing.Any\": f\"{typing_url}#typing.Any\",\n        \"typing.Annotated\": \"https://docs.python.org/3/library/typing.html#typing.Annotated\",\n        \"typing.Mapping\": f\"{typing_url}#typing.Mapping\",\n        \"typing.Awaitable\": f\"{typing_url}#typing.Awaitable\",\n        \"typing.Callable\": f\"{typing_url}#typing.Callable\",\n        \"typing.Set\": f\"{typing_url}#typing.Set\",\n        \"typing.NamedTuple\": f\"{typing_url}#typing.NamedTuple\",\n        \"typing.Literal\": f\"{typing_url}#typing.Literal\",\n        \"typing.TypeVar\": f\"{typing_url}#typing.TypeVar\",\n        \"typing.TypedDict\": f\"{typing_url}#typing.TypedDict\",\n        \"typing.Type\": f\"{typing_url}#typing.Type\",\n        \"typing.Generic\": \"https://mypy.readthedocs.io/en/stable/generics.html\",\n        \"asyncio.Future\": \"https://docs.python.org/3/library/asyncio-future.html\",\n        \"dataclasses\": \"https://docs.python.org/3/library/dataclasses.html#\",\n        \"dataclasses.field\": \"https://docs.python.org/3/library/dataclasses.html#\",\n        \"dataclasses.dataclass\": \"https://docs.python.org/3/library/dataclasses.html#\",\n        \"pathlib.Path.home\": \"https://docs.python.org/3/library/pathlib.html#pathlib.Path.home\",\n        \"tempfile\": \"https://docs.python.org/3/library/tempfile.html\",\n        \"tempfile.gettempdir\": \"https://docs.python.org/3/library/tempfile.html#tempfile.gettempdir\",\n        \"threading.Lock\": \"https://docs.python.org/3/library/threading.html#threading.Lock\",\n        \"threading.Thread\": \"https://docs.python.org/3/library/threading.html#threading.Thread\",\n        \"time\": \"https://docs.python.org/3/library/time.html\",\n        \"time.time\": \"https://docs.python.org/3/library/time.html#time.time\",\n        \"watchdog.events.FileSystemEvent\": \"https://pythonhosted.org/watchdog/api.html#watchdog.events.FileSystemEvent\",\n        \"watchdog.events.PatternMatchingEventHandler\": \"https://pythonhosted.org/watchdog/api.html#watchdog.events.PatternMatchingEventHandler\",\n    }"
            },
            "semantic": {
                "role": "function",
                "labels": [],
                "attributes": {},
                "relations": {}
            },
            "path": "std_links.std_links"
        }
    ],
    "types": [
        {
            "name": "Semantic",
            "documentation": {
                "sections": [
                    {
                        "content": "Semantic representation.\n\nThey represent metadata transmitted to the frontend renderer to display appropriately the elements.",
                        "contentType": "Markdown",
                        "semantic": {
                            "role": "text",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "title": null
                    }
                ]
            },
            "code": {
                "declaration": "@dataclasses.dataclass(frozen=True)\nclass Semantic",
                "filePath": "models.py",
                "startLine": 16,
                "endLine": 39,
                "references": {
                    "dataclasses": "https://docs.python.org/3/library/dataclasses.html#",
                    "dataclass": "https://docs.python.org/3/library/dataclasses.html#",
                    "Semantic": "@nav/api/Backends/mkdocs_py_griffe/.models.Semantic"
                },
                "implementation": "@dataclasses.dataclass(frozen=True)\nclass Semantic:\n    \"\"\"\n    Semantic representation.\n\n    They represent metadata transmitted to the frontend renderer to display appropriately the elements.\n    \"\"\"\n\n    role: str\n    \"\"\"\n    Role, a unique meaning (*e.g.* `Class`, `Interface`, `TypeAlias`, *etc.*).\n    \"\"\"\n    labels: list[str]\n    \"\"\"\n    Some labels.\n    \"\"\"\n    attributes: dict[str, str]\n    \"\"\"\n    Some attributes.\n    \"\"\"\n    relations: dict[str, list[str]]\n    \"\"\"\n    Some relation with other entities (grouped by a category keyword, *e.g.* `InheritedBy`).\n    \"\"\""
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {
                    "inherits": []
                }
            },
            "path": "models.Semantic",
            "callables": [],
            "attributes": [
                {
                    "name": "role",
                    "documentation": {
                        "sections": [
                            {
                                "content": "Role, a unique meaning (*e.g.* `Class`, `Interface`, `TypeAlias`, *etc.*).",
                                "contentType": "Markdown",
                                "semantic": {
                                    "role": "text",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                },
                                "title": null
                            }
                        ]
                    },
                    "code": {
                        "declaration": "    role: str",
                        "filePath": "models.py",
                        "startLine": 24,
                        "endLine": 24,
                        "references": {
                            "str": "https://docs.python.org/fr/3/library/string.html"
                        },
                        "implementation": null
                    },
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "path": "models.Semantic.role"
                },
                {
                    "name": "labels",
                    "documentation": {
                        "sections": [
                            {
                                "content": "Some labels.",
                                "contentType": "Markdown",
                                "semantic": {
                                    "role": "text",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                },
                                "title": null
                            }
                        ]
                    },
                    "code": {
                        "declaration": "    labels: list[str]",
                        "filePath": "models.py",
                        "startLine": 28,
                        "endLine": 28,
                        "references": {
                            "list": "https://docs.python.org/3/library/stdtypes.html#lists",
                            "str": "https://docs.python.org/fr/3/library/string.html"
                        },
                        "implementation": null
                    },
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "path": "models.Semantic.labels"
                },
                {
                    "name": "attributes",
                    "documentation": {
                        "sections": [
                            {
                                "content": "Some attributes.",
                                "contentType": "Markdown",
                                "semantic": {
                                    "role": "text",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                },
                                "title": null
                            }
                        ]
                    },
                    "code": {
                        "declaration": "    attributes: dict[str, str]",
                        "filePath": "models.py",
                        "startLine": 32,
                        "endLine": 32,
                        "references": {
                            "dict": "https://docs.python.org/3/library/stdtypes.html#mapping-types-dict",
                            "str": "https://docs.python.org/fr/3/library/string.html"
                        },
                        "implementation": null
                    },
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "path": "models.Semantic.attributes"
                },
                {
                    "name": "relations",
                    "documentation": {
                        "sections": [
                            {
                                "content": "Some relation with other entities (grouped by a category keyword, *e.g.* `InheritedBy`).",
                                "contentType": "Markdown",
                                "semantic": {
                                    "role": "text",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                },
                                "title": null
                            }
                        ]
                    },
                    "code": {
                        "declaration": "    relations: dict[str, list[str]]",
                        "filePath": "models.py",
                        "startLine": 36,
                        "endLine": 36,
                        "references": {
                            "dict": "https://docs.python.org/3/library/stdtypes.html#mapping-types-dict",
                            "str": "https://docs.python.org/fr/3/library/string.html",
                            "list": "https://docs.python.org/3/library/stdtypes.html#lists"
                        },
                        "implementation": null
                    },
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "path": "models.Semantic.relations"
                }
            ]
        },
        {
            "name": "DocumentationSection",
            "documentation": {
                "sections": [
                    {
                        "content": "Documentation section.",
                        "contentType": "Markdown",
                        "semantic": {
                            "role": "text",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "title": null
                    }
                ]
            },
            "code": {
                "declaration": "@dataclasses.dataclass(frozen=True)\nclass DocumentationSection",
                "filePath": "models.py",
                "startLine": 42,
                "endLine": 63,
                "references": {
                    "dataclasses": "https://docs.python.org/3/library/dataclasses.html#",
                    "dataclass": "https://docs.python.org/3/library/dataclasses.html#",
                    "DocumentationSection": "@nav/api/Backends/mkdocs_py_griffe/.models.DocumentationSection"
                },
                "implementation": "@dataclasses.dataclass(frozen=True)\nclass DocumentationSection:\n    \"\"\"\n    Documentation section.\n    \"\"\"\n\n    content: str\n    \"\"\"\n    Section's content.\n    \"\"\"\n    contentType: str\n    \"\"\"\n    Content's type.\n    \"\"\"\n    semantic: Semantic\n    \"\"\"\n    Associated semantic.\n    \"\"\"\n    title: Optional[str] = None\n    \"\"\"\n    Section's title.\n    \"\"\""
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {
                    "inherits": []
                }
            },
            "path": "models.DocumentationSection",
            "callables": [],
            "attributes": [
                {
                    "name": "content",
                    "documentation": {
                        "sections": [
                            {
                                "content": "Section's content.",
                                "contentType": "Markdown",
                                "semantic": {
                                    "role": "text",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                },
                                "title": null
                            }
                        ]
                    },
                    "code": {
                        "declaration": "    content: str",
                        "filePath": "models.py",
                        "startLine": 48,
                        "endLine": 48,
                        "references": {
                            "str": "https://docs.python.org/fr/3/library/string.html"
                        },
                        "implementation": null
                    },
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "path": "models.DocumentationSection.content"
                },
                {
                    "name": "contentType",
                    "documentation": {
                        "sections": [
                            {
                                "content": "Content's type.",
                                "contentType": "Markdown",
                                "semantic": {
                                    "role": "text",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                },
                                "title": null
                            }
                        ]
                    },
                    "code": {
                        "declaration": "    contentType: str",
                        "filePath": "models.py",
                        "startLine": 52,
                        "endLine": 52,
                        "references": {
                            "str": "https://docs.python.org/fr/3/library/string.html"
                        },
                        "implementation": null
                    },
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "path": "models.DocumentationSection.contentType"
                },
                {
                    "name": "semantic",
                    "documentation": {
                        "sections": [
                            {
                                "content": "Associated semantic.",
                                "contentType": "Markdown",
                                "semantic": {
                                    "role": "text",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                },
                                "title": null
                            }
                        ]
                    },
                    "code": {
                        "declaration": "    semantic: Semantic",
                        "filePath": "models.py",
                        "startLine": 56,
                        "endLine": 56,
                        "references": {
                            "Semantic": "@nav/api/Backends/mkdocs_py_griffe/.models.Semantic",
                            "dataclasses": "https://docs.python.org/3/library/dataclasses.html#",
                            "dataclass": "https://docs.python.org/3/library/dataclasses.html#",
                            "str": "https://docs.python.org/fr/3/library/string.html",
                            "list": "https://docs.python.org/3/library/stdtypes.html#lists",
                            "dict": "https://docs.python.org/3/library/stdtypes.html#mapping-types-dict"
                        },
                        "implementation": null
                    },
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "path": "models.DocumentationSection.semantic"
                },
                {
                    "name": "title",
                    "documentation": {
                        "sections": [
                            {
                                "content": "Section's title.",
                                "contentType": "Markdown",
                                "semantic": {
                                    "role": "text",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                },
                                "title": null
                            }
                        ]
                    },
                    "code": {
                        "declaration": "    title: Optional[str] = None",
                        "filePath": "models.py",
                        "startLine": 60,
                        "endLine": 60,
                        "references": {
                            "Optional": "https://docs.python.org/3/library/typing.html#typing.Optional",
                            "str": "https://docs.python.org/fr/3/library/string.html"
                        },
                        "implementation": null
                    },
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "path": "models.DocumentationSection.title"
                }
            ]
        },
        {
            "name": "Documentation",
            "documentation": {
                "sections": [
                    {
                        "content": "An entity documentation.",
                        "contentType": "Markdown",
                        "semantic": {
                            "role": "text",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "title": null
                    }
                ]
            },
            "code": {
                "declaration": "@dataclasses.dataclass(frozen=True)\nclass Documentation",
                "filePath": "models.py",
                "startLine": 66,
                "endLine": 75,
                "references": {
                    "dataclasses": "https://docs.python.org/3/library/dataclasses.html#",
                    "dataclass": "https://docs.python.org/3/library/dataclasses.html#",
                    "Documentation": "@nav/api/Backends/mkdocs_py_griffe/.models.Documentation"
                },
                "implementation": "@dataclasses.dataclass(frozen=True)\nclass Documentation:\n    \"\"\"\n    An entity documentation.\n    \"\"\"\n\n    sections: list[DocumentationSection]\n    \"\"\"\n    List of the sections.\n    \"\"\""
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {
                    "inherits": []
                }
            },
            "path": "models.Documentation",
            "callables": [],
            "attributes": [
                {
                    "name": "sections",
                    "documentation": {
                        "sections": [
                            {
                                "content": "List of the sections.",
                                "contentType": "Markdown",
                                "semantic": {
                                    "role": "text",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                },
                                "title": null
                            }
                        ]
                    },
                    "code": {
                        "declaration": "    sections: list[DocumentationSection]",
                        "filePath": "models.py",
                        "startLine": 72,
                        "endLine": 72,
                        "references": {
                            "list": "https://docs.python.org/3/library/stdtypes.html#lists",
                            "DocumentationSection": "@nav/api/Backends/mkdocs_py_griffe/.models.DocumentationSection"
                        },
                        "implementation": null
                    },
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "path": "models.Documentation.sections"
                }
            ]
        },
        {
            "name": "Code",
            "documentation": {
                "sections": [
                    {
                        "content": "Entity code's description.",
                        "contentType": "Markdown",
                        "semantic": {
                            "role": "text",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "title": null
                    }
                ]
            },
            "code": {
                "declaration": "@dataclasses.dataclass(frozen=True)\nclass Code",
                "filePath": "models.py",
                "startLine": 78,
                "endLine": 107,
                "references": {
                    "dataclasses": "https://docs.python.org/3/library/dataclasses.html#",
                    "dataclass": "https://docs.python.org/3/library/dataclasses.html#",
                    "Code": "@nav/api/Backends/mkdocs_py_griffe/.models.Code"
                },
                "implementation": "@dataclasses.dataclass(frozen=True)\nclass Code:\n    \"\"\"\n    Entity code's description.\n    \"\"\"\n\n    declaration: str\n    \"\"\"\n    Entity's declaration.\n    \"\"\"\n    filePath: str\n    \"\"\"\n    File path in which the declaration is included.\n    \"\"\"\n    startLine: int\n    \"\"\"\n    Starting line of the declaration.\n    \"\"\"\n    endLine: int\n    \"\"\"\n    Ending line of the declaration.\n    \"\"\"\n    references: dict[str, EntityPath]\n    \"\"\"\n    References to other entities in the declaration.\n    \"\"\"\n    implementation: Optional[str] = None\n    \"\"\"\n    Optional associated implementation.\n    \"\"\""
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {
                    "inherits": []
                }
            },
            "path": "models.Code",
            "callables": [],
            "attributes": [
                {
                    "name": "declaration",
                    "documentation": {
                        "sections": [
                            {
                                "content": "Entity's declaration.",
                                "contentType": "Markdown",
                                "semantic": {
                                    "role": "text",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                },
                                "title": null
                            }
                        ]
                    },
                    "code": {
                        "declaration": "    declaration: str",
                        "filePath": "models.py",
                        "startLine": 84,
                        "endLine": 84,
                        "references": {
                            "str": "https://docs.python.org/fr/3/library/string.html"
                        },
                        "implementation": null
                    },
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "path": "models.Code.declaration"
                },
                {
                    "name": "filePath",
                    "documentation": {
                        "sections": [
                            {
                                "content": "File path in which the declaration is included.",
                                "contentType": "Markdown",
                                "semantic": {
                                    "role": "text",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                },
                                "title": null
                            }
                        ]
                    },
                    "code": {
                        "declaration": "    filePath: str",
                        "filePath": "models.py",
                        "startLine": 88,
                        "endLine": 88,
                        "references": {
                            "str": "https://docs.python.org/fr/3/library/string.html"
                        },
                        "implementation": null
                    },
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "path": "models.Code.filePath"
                },
                {
                    "name": "startLine",
                    "documentation": {
                        "sections": [
                            {
                                "content": "Starting line of the declaration.",
                                "contentType": "Markdown",
                                "semantic": {
                                    "role": "text",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                },
                                "title": null
                            }
                        ]
                    },
                    "code": {
                        "declaration": "    startLine: int",
                        "filePath": "models.py",
                        "startLine": 92,
                        "endLine": 92,
                        "references": {
                            "int": "https://docs.python.org/fr/3/library/stdtypes.html#numeric-types-int-float-complex"
                        },
                        "implementation": null
                    },
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "path": "models.Code.startLine"
                },
                {
                    "name": "endLine",
                    "documentation": {
                        "sections": [
                            {
                                "content": "Ending line of the declaration.",
                                "contentType": "Markdown",
                                "semantic": {
                                    "role": "text",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                },
                                "title": null
                            }
                        ]
                    },
                    "code": {
                        "declaration": "    endLine: int",
                        "filePath": "models.py",
                        "startLine": 96,
                        "endLine": 96,
                        "references": {
                            "int": "https://docs.python.org/fr/3/library/stdtypes.html#numeric-types-int-float-complex"
                        },
                        "implementation": null
                    },
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "path": "models.Code.endLine"
                },
                {
                    "name": "references",
                    "documentation": {
                        "sections": [
                            {
                                "content": "References to other entities in the declaration.",
                                "contentType": "Markdown",
                                "semantic": {
                                    "role": "text",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                },
                                "title": null
                            }
                        ]
                    },
                    "code": {
                        "declaration": "    references: dict[str, EntityPath]",
                        "filePath": "models.py",
                        "startLine": 100,
                        "endLine": 100,
                        "references": {
                            "dict": "https://docs.python.org/3/library/stdtypes.html#mapping-types-dict",
                            "str": "https://docs.python.org/fr/3/library/string.html",
                            "EntityPath": "@nav/api/Backends/mkdocs_py_griffe/.models.EntityPath"
                        },
                        "implementation": null
                    },
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "path": "models.Code.references"
                },
                {
                    "name": "implementation",
                    "documentation": {
                        "sections": [
                            {
                                "content": "Optional associated implementation.",
                                "contentType": "Markdown",
                                "semantic": {
                                    "role": "text",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                },
                                "title": null
                            }
                        ]
                    },
                    "code": {
                        "declaration": "    implementation: Optional[str] = None",
                        "filePath": "models.py",
                        "startLine": 104,
                        "endLine": 104,
                        "references": {
                            "Optional": "https://docs.python.org/3/library/typing.html#typing.Optional",
                            "str": "https://docs.python.org/fr/3/library/string.html"
                        },
                        "implementation": null
                    },
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "path": "models.Code.implementation"
                }
            ]
        },
        {
            "name": "Entity",
            "documentation": {
                "sections": [
                    {
                        "content": "Base structure to represent an entity within the code, e.g. class, structure, function, variable, *etc.*.",
                        "contentType": "Markdown",
                        "semantic": {
                            "role": "text",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "title": null
                    }
                ]
            },
            "code": {
                "declaration": "@dataclasses.dataclass(frozen=True)\nclass Entity",
                "filePath": "models.py",
                "startLine": 110,
                "endLine": 135,
                "references": {
                    "dataclasses": "https://docs.python.org/3/library/dataclasses.html#",
                    "dataclass": "https://docs.python.org/3/library/dataclasses.html#",
                    "Entity": "@nav/api/Backends/mkdocs_py_griffe/.models.Entity"
                },
                "implementation": "@dataclasses.dataclass(frozen=True)\nclass Entity:\n    \"\"\"\n    Base structure to represent an entity within the code, e.g. class, structure, function, variable, *etc.*.\n    \"\"\"\n\n    name: str\n    \"\"\"\n    Name.\n    \"\"\"\n    documentation: Documentation\n    \"\"\"\n    Documentation\n    \"\"\"\n    code: Code\n    \"\"\"\n    Code information.\n    \"\"\"\n    semantic: Semantic\n    \"\"\"\n    Associated semantic.\n    \"\"\"\n    path: EntityPath\n    \"\"\"\n    The path (e.g. `ModuleFoo.TypeBar.attrBaz`).\n    \"\"\""
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {
                    "inherits": []
                }
            },
            "path": "models.Entity",
            "callables": [],
            "attributes": [
                {
                    "name": "name",
                    "documentation": {
                        "sections": [
                            {
                                "content": "Name.",
                                "contentType": "Markdown",
                                "semantic": {
                                    "role": "text",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                },
                                "title": null
                            }
                        ]
                    },
                    "code": {
                        "declaration": "    name: str",
                        "filePath": "models.py",
                        "startLine": 116,
                        "endLine": 116,
                        "references": {
                            "str": "https://docs.python.org/fr/3/library/string.html"
                        },
                        "implementation": null
                    },
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "path": "models.Entity.name"
                },
                {
                    "name": "documentation",
                    "documentation": {
                        "sections": [
                            {
                                "content": "Documentation",
                                "contentType": "Markdown",
                                "semantic": {
                                    "role": "text",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                },
                                "title": null
                            }
                        ]
                    },
                    "code": {
                        "declaration": "    documentation: Documentation",
                        "filePath": "models.py",
                        "startLine": 120,
                        "endLine": 120,
                        "references": {
                            "Documentation": "@nav/api/Backends/mkdocs_py_griffe/.models.Documentation",
                            "dataclasses": "https://docs.python.org/3/library/dataclasses.html#",
                            "dataclass": "https://docs.python.org/3/library/dataclasses.html#",
                            "list": "https://docs.python.org/3/library/stdtypes.html#lists",
                            "DocumentationSection": "@nav/api/Backends/mkdocs_py_griffe/.models.DocumentationSection"
                        },
                        "implementation": null
                    },
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "path": "models.Entity.documentation"
                },
                {
                    "name": "code",
                    "documentation": {
                        "sections": [
                            {
                                "content": "Code information.",
                                "contentType": "Markdown",
                                "semantic": {
                                    "role": "text",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                },
                                "title": null
                            }
                        ]
                    },
                    "code": {
                        "declaration": "    code: Code",
                        "filePath": "models.py",
                        "startLine": 124,
                        "endLine": 124,
                        "references": {
                            "Code": "@nav/api/Backends/mkdocs_py_griffe/.models.Code",
                            "dataclasses": "https://docs.python.org/3/library/dataclasses.html#",
                            "dataclass": "https://docs.python.org/3/library/dataclasses.html#",
                            "str": "https://docs.python.org/fr/3/library/string.html",
                            "int": "https://docs.python.org/fr/3/library/stdtypes.html#numeric-types-int-float-complex",
                            "dict": "https://docs.python.org/3/library/stdtypes.html#mapping-types-dict",
                            "EntityPath": "@nav/api/Backends/mkdocs_py_griffe/.models.EntityPath",
                            "Optional": "https://docs.python.org/3/library/typing.html#typing.Optional"
                        },
                        "implementation": null
                    },
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "path": "models.Entity.code"
                },
                {
                    "name": "semantic",
                    "documentation": {
                        "sections": [
                            {
                                "content": "Associated semantic.",
                                "contentType": "Markdown",
                                "semantic": {
                                    "role": "text",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                },
                                "title": null
                            }
                        ]
                    },
                    "code": {
                        "declaration": "    semantic: Semantic",
                        "filePath": "models.py",
                        "startLine": 128,
                        "endLine": 128,
                        "references": {
                            "Semantic": "@nav/api/Backends/mkdocs_py_griffe/.models.Semantic",
                            "dataclasses": "https://docs.python.org/3/library/dataclasses.html#",
                            "dataclass": "https://docs.python.org/3/library/dataclasses.html#",
                            "str": "https://docs.python.org/fr/3/library/string.html",
                            "list": "https://docs.python.org/3/library/stdtypes.html#lists",
                            "dict": "https://docs.python.org/3/library/stdtypes.html#mapping-types-dict"
                        },
                        "implementation": null
                    },
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "path": "models.Entity.semantic"
                },
                {
                    "name": "path",
                    "documentation": {
                        "sections": [
                            {
                                "content": "The path (e.g. `ModuleFoo.TypeBar.attrBaz`).",
                                "contentType": "Markdown",
                                "semantic": {
                                    "role": "text",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                },
                                "title": null
                            }
                        ]
                    },
                    "code": {
                        "declaration": "    path: EntityPath",
                        "filePath": "models.py",
                        "startLine": 132,
                        "endLine": 132,
                        "references": {
                            "EntityPath": "@nav/api/Backends/mkdocs_py_griffe/.models.EntityPath",
                            "str": "https://docs.python.org/fr/3/library/string.html"
                        },
                        "implementation": null
                    },
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "path": "models.Entity.path"
                }
            ]
        },
        {
            "name": "Type",
            "documentation": {
                "sections": [
                    {
                        "content": "Type representation.",
                        "contentType": "Markdown",
                        "semantic": {
                            "role": "text",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "title": null
                    }
                ]
            },
            "code": {
                "declaration": "@dataclasses.dataclass(frozen=True)\nclass Type(Entity)",
                "filePath": "models.py",
                "startLine": 149,
                "endLine": 162,
                "references": {
                    "dataclasses": "https://docs.python.org/3/library/dataclasses.html#",
                    "dataclass": "https://docs.python.org/3/library/dataclasses.html#",
                    "Entity": "@nav/api/Backends/mkdocs_py_griffe/.models.Entity",
                    "str": "https://docs.python.org/fr/3/library/string.html",
                    "Documentation": "@nav/api/Backends/mkdocs_py_griffe/.models.Documentation",
                    "Code": "@nav/api/Backends/mkdocs_py_griffe/.models.Code",
                    "Semantic": "@nav/api/Backends/mkdocs_py_griffe/.models.Semantic",
                    "EntityPath": "@nav/api/Backends/mkdocs_py_griffe/.models.EntityPath",
                    "Type": "@nav/api/Backends/mkdocs_py_griffe/.models.Type"
                },
                "implementation": "@dataclasses.dataclass(frozen=True)\nclass Type(Entity):\n    \"\"\"\n    Type representation.\n    \"\"\"\n\n    callables: list[Callable]\n    \"\"\"\n    List of owned callable.\n    \"\"\"\n    attributes: list[Attribute]\n    \"\"\"\n    List of owned attributes.\n    \"\"\""
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {
                    "inherits": [
                        "mkdocs_py_griffe.models.Entity",
                        "dataclasses",
                        "dataclasses.dataclass",
                        "dataclasses",
                        "dataclasses.dataclass",
                        "str",
                        "mkdocs_py_griffe.models.Documentation",
                        "mkdocs_py_griffe.models.Code",
                        "mkdocs_py_griffe.models.Semantic",
                        "mkdocs_py_griffe.models.EntityPath"
                    ]
                }
            },
            "path": "models.Type",
            "callables": [],
            "attributes": [
                {
                    "name": "callables",
                    "documentation": {
                        "sections": [
                            {
                                "content": "List of owned callable.",
                                "contentType": "Markdown",
                                "semantic": {
                                    "role": "text",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                },
                                "title": null
                            }
                        ]
                    },
                    "code": {
                        "declaration": "    callables: list[Callable]",
                        "filePath": "models.py",
                        "startLine": 155,
                        "endLine": 155,
                        "references": {
                            "list": "https://docs.python.org/3/library/stdtypes.html#lists",
                            "Callable": "@nav/api/Backends/mkdocs_py_griffe/.models.Callable"
                        },
                        "implementation": null
                    },
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "path": "models.Type.callables"
                },
                {
                    "name": "attributes",
                    "documentation": {
                        "sections": [
                            {
                                "content": "List of owned attributes.",
                                "contentType": "Markdown",
                                "semantic": {
                                    "role": "text",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                },
                                "title": null
                            }
                        ]
                    },
                    "code": {
                        "declaration": "    attributes: list[Attribute]",
                        "filePath": "models.py",
                        "startLine": 159,
                        "endLine": 159,
                        "references": {
                            "list": "https://docs.python.org/3/library/stdtypes.html#lists",
                            "Attribute": "@nav/api/Backends/mkdocs_py_griffe/.models.Attribute"
                        },
                        "implementation": null
                    },
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "path": "models.Type.attributes"
                }
            ]
        },
        {
            "name": "File",
            "documentation": {
                "sections": [
                    {
                        "content": "File representation.",
                        "contentType": "Markdown",
                        "semantic": {
                            "role": "text",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "title": null
                    }
                ]
            },
            "code": {
                "declaration": "@dataclasses.dataclass(frozen=True)\nclass File",
                "filePath": "models.py",
                "startLine": 165,
                "endLine": 182,
                "references": {
                    "dataclasses": "https://docs.python.org/3/library/dataclasses.html#",
                    "dataclass": "https://docs.python.org/3/library/dataclasses.html#",
                    "File": "@nav/api/Backends/mkdocs_py_griffe/.models.File"
                },
                "implementation": "@dataclasses.dataclass(frozen=True)\nclass File:\n    \"\"\"\n    File representation.\n    \"\"\"\n\n    name: str\n    \"\"\"\n    Name.\n    \"\"\"\n    path: str\n    \"\"\"\n    Path.\n    \"\"\"\n    documentation: Documentation\n    \"\"\"\n    Documentation.\n    \"\"\""
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {
                    "inherits": []
                }
            },
            "path": "models.File",
            "callables": [],
            "attributes": [
                {
                    "name": "name",
                    "documentation": {
                        "sections": [
                            {
                                "content": "Name.",
                                "contentType": "Markdown",
                                "semantic": {
                                    "role": "text",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                },
                                "title": null
                            }
                        ]
                    },
                    "code": {
                        "declaration": "    name: str",
                        "filePath": "models.py",
                        "startLine": 171,
                        "endLine": 171,
                        "references": {
                            "str": "https://docs.python.org/fr/3/library/string.html"
                        },
                        "implementation": null
                    },
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "path": "models.File.name"
                },
                {
                    "name": "path",
                    "documentation": {
                        "sections": [
                            {
                                "content": "Path.",
                                "contentType": "Markdown",
                                "semantic": {
                                    "role": "text",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                },
                                "title": null
                            }
                        ]
                    },
                    "code": {
                        "declaration": "    path: str",
                        "filePath": "models.py",
                        "startLine": 175,
                        "endLine": 175,
                        "references": {
                            "str": "https://docs.python.org/fr/3/library/string.html"
                        },
                        "implementation": null
                    },
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "path": "models.File.path"
                },
                {
                    "name": "documentation",
                    "documentation": {
                        "sections": [
                            {
                                "content": "Documentation.",
                                "contentType": "Markdown",
                                "semantic": {
                                    "role": "text",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                },
                                "title": null
                            }
                        ]
                    },
                    "code": {
                        "declaration": "    documentation: Documentation",
                        "filePath": "models.py",
                        "startLine": 179,
                        "endLine": 179,
                        "references": {
                            "Documentation": "@nav/api/Backends/mkdocs_py_griffe/.models.Documentation",
                            "dataclasses": "https://docs.python.org/3/library/dataclasses.html#",
                            "dataclass": "https://docs.python.org/3/library/dataclasses.html#",
                            "list": "https://docs.python.org/3/library/stdtypes.html#lists",
                            "DocumentationSection": "@nav/api/Backends/mkdocs_py_griffe/.models.DocumentationSection"
                        },
                        "implementation": null
                    },
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "path": "models.File.documentation"
                }
            ]
        },
        {
            "name": "ChildModule",
            "documentation": {
                "sections": [
                    {
                        "content": "Child module representation.",
                        "contentType": "Markdown",
                        "semantic": {
                            "role": "text",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "title": null
                    }
                ]
            },
            "code": {
                "declaration": "@dataclasses.dataclass(frozen=True)\nclass ChildModule",
                "filePath": "models.py",
                "startLine": 185,
                "endLine": 202,
                "references": {
                    "dataclasses": "https://docs.python.org/3/library/dataclasses.html#",
                    "dataclass": "https://docs.python.org/3/library/dataclasses.html#",
                    "ChildModule": "@nav/api/Backends/mkdocs_py_griffe/.models.ChildModule"
                },
                "implementation": "@dataclasses.dataclass(frozen=True)\nclass ChildModule:\n    \"\"\"\n    Child module representation.\n    \"\"\"\n\n    name: str\n    \"\"\"\n    Name.\n    \"\"\"\n    path: EntityPath\n    \"\"\"\n    Path (*e.g.* `ModuleFoo.ModuleBar`).\n    \"\"\"\n    isLeaf: bool\n    \"\"\"\n    Whether it includes children modules.\n    \"\"\""
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {
                    "inherits": []
                }
            },
            "path": "models.ChildModule",
            "callables": [],
            "attributes": [
                {
                    "name": "name",
                    "documentation": {
                        "sections": [
                            {
                                "content": "Name.",
                                "contentType": "Markdown",
                                "semantic": {
                                    "role": "text",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                },
                                "title": null
                            }
                        ]
                    },
                    "code": {
                        "declaration": "    name: str",
                        "filePath": "models.py",
                        "startLine": 191,
                        "endLine": 191,
                        "references": {
                            "str": "https://docs.python.org/fr/3/library/string.html"
                        },
                        "implementation": null
                    },
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "path": "models.ChildModule.name"
                },
                {
                    "name": "path",
                    "documentation": {
                        "sections": [
                            {
                                "content": "Path (*e.g.* `ModuleFoo.ModuleBar`).",
                                "contentType": "Markdown",
                                "semantic": {
                                    "role": "text",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                },
                                "title": null
                            }
                        ]
                    },
                    "code": {
                        "declaration": "    path: EntityPath",
                        "filePath": "models.py",
                        "startLine": 195,
                        "endLine": 195,
                        "references": {
                            "EntityPath": "@nav/api/Backends/mkdocs_py_griffe/.models.EntityPath",
                            "str": "https://docs.python.org/fr/3/library/string.html"
                        },
                        "implementation": null
                    },
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "path": "models.ChildModule.path"
                },
                {
                    "name": "isLeaf",
                    "documentation": {
                        "sections": [
                            {
                                "content": "Whether it includes children modules.",
                                "contentType": "Markdown",
                                "semantic": {
                                    "role": "text",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                },
                                "title": null
                            }
                        ]
                    },
                    "code": {
                        "declaration": "    isLeaf: bool",
                        "filePath": "models.py",
                        "startLine": 199,
                        "endLine": 199,
                        "references": {
                            "bool": "https://docs.python.org/fr/3/library/stdtypes.html#boolean-type-bool"
                        },
                        "implementation": null
                    },
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "path": "models.ChildModule.isLeaf"
                }
            ]
        },
        {
            "name": "Module",
            "documentation": {
                "sections": [
                    {
                        "content": "Module representation.",
                        "contentType": "Markdown",
                        "semantic": {
                            "role": "text",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "title": null
                    }
                ]
            },
            "code": {
                "declaration": "@dataclasses.dataclass(frozen=True)\n# pylint: disable=too-many-instance-attributes\nclass Module",
                "filePath": "models.py",
                "startLine": 205,
                "endLine": 249,
                "references": {
                    "dataclasses": "https://docs.python.org/3/library/dataclasses.html#",
                    "dataclass": "https://docs.python.org/3/library/dataclasses.html#",
                    "Module": "@nav/api/Backends/mkdocs_py_griffe/.models.Module"
                },
                "implementation": "@dataclasses.dataclass(frozen=True)\n# pylint: disable=too-many-instance-attributes\nclass Module:\n    \"\"\"\n    Module representation.\n    \"\"\"\n\n    name: str\n    \"\"\"\n    Name.\n    \"\"\"\n    documentation: Documentation\n    \"\"\"\n    Documentation\n    \"\"\"\n\n    semantic: Semantic\n    \"\"\"\n    Associated semantic.\n    \"\"\"\n    path: EntityPath\n    \"\"\"\n    The path (e.g. `ModuleFoo.TypeBar.attrBaz`).\n    \"\"\"\n\n    children: list[ChildModule]\n    \"\"\"\n    Children modules.\n    \"\"\"\n    callables: list[Callable]\n    \"\"\"\n    Callable components.\n    \"\"\"\n    types: list[Type]\n    \"\"\"\n    Types components.\n    \"\"\"\n    attributes: list[Attribute]\n    \"\"\"\n    Attributes components.\n    \"\"\"\n    files: list[File]\n    \"\"\"\n    Files components.\n    \"\"\""
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {
                    "inherits": []
                }
            },
            "path": "models.Module",
            "callables": [],
            "attributes": [
                {
                    "name": "name",
                    "documentation": {
                        "sections": [
                            {
                                "content": "Name.",
                                "contentType": "Markdown",
                                "semantic": {
                                    "role": "text",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                },
                                "title": null
                            }
                        ]
                    },
                    "code": {
                        "declaration": "    name: str",
                        "filePath": "models.py",
                        "startLine": 212,
                        "endLine": 212,
                        "references": {
                            "str": "https://docs.python.org/fr/3/library/string.html"
                        },
                        "implementation": null
                    },
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "path": "models.Module.name"
                },
                {
                    "name": "documentation",
                    "documentation": {
                        "sections": [
                            {
                                "content": "Documentation",
                                "contentType": "Markdown",
                                "semantic": {
                                    "role": "text",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                },
                                "title": null
                            }
                        ]
                    },
                    "code": {
                        "declaration": "    documentation: Documentation",
                        "filePath": "models.py",
                        "startLine": 216,
                        "endLine": 216,
                        "references": {
                            "Documentation": "@nav/api/Backends/mkdocs_py_griffe/.models.Documentation",
                            "dataclasses": "https://docs.python.org/3/library/dataclasses.html#",
                            "dataclass": "https://docs.python.org/3/library/dataclasses.html#",
                            "list": "https://docs.python.org/3/library/stdtypes.html#lists",
                            "DocumentationSection": "@nav/api/Backends/mkdocs_py_griffe/.models.DocumentationSection"
                        },
                        "implementation": null
                    },
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "path": "models.Module.documentation"
                },
                {
                    "name": "semantic",
                    "documentation": {
                        "sections": [
                            {
                                "content": "Associated semantic.",
                                "contentType": "Markdown",
                                "semantic": {
                                    "role": "text",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                },
                                "title": null
                            }
                        ]
                    },
                    "code": {
                        "declaration": "    semantic: Semantic",
                        "filePath": "models.py",
                        "startLine": 221,
                        "endLine": 221,
                        "references": {
                            "Semantic": "@nav/api/Backends/mkdocs_py_griffe/.models.Semantic",
                            "dataclasses": "https://docs.python.org/3/library/dataclasses.html#",
                            "dataclass": "https://docs.python.org/3/library/dataclasses.html#",
                            "str": "https://docs.python.org/fr/3/library/string.html",
                            "list": "https://docs.python.org/3/library/stdtypes.html#lists",
                            "dict": "https://docs.python.org/3/library/stdtypes.html#mapping-types-dict"
                        },
                        "implementation": null
                    },
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "path": "models.Module.semantic"
                },
                {
                    "name": "path",
                    "documentation": {
                        "sections": [
                            {
                                "content": "The path (e.g. `ModuleFoo.TypeBar.attrBaz`).",
                                "contentType": "Markdown",
                                "semantic": {
                                    "role": "text",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                },
                                "title": null
                            }
                        ]
                    },
                    "code": {
                        "declaration": "    path: EntityPath",
                        "filePath": "models.py",
                        "startLine": 225,
                        "endLine": 225,
                        "references": {
                            "EntityPath": "@nav/api/Backends/mkdocs_py_griffe/.models.EntityPath",
                            "str": "https://docs.python.org/fr/3/library/string.html"
                        },
                        "implementation": null
                    },
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "path": "models.Module.path"
                },
                {
                    "name": "children",
                    "documentation": {
                        "sections": [
                            {
                                "content": "Children modules.",
                                "contentType": "Markdown",
                                "semantic": {
                                    "role": "text",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                },
                                "title": null
                            }
                        ]
                    },
                    "code": {
                        "declaration": "    children: list[ChildModule]",
                        "filePath": "models.py",
                        "startLine": 230,
                        "endLine": 230,
                        "references": {
                            "list": "https://docs.python.org/3/library/stdtypes.html#lists",
                            "ChildModule": "@nav/api/Backends/mkdocs_py_griffe/.models.ChildModule"
                        },
                        "implementation": null
                    },
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "path": "models.Module.children"
                },
                {
                    "name": "callables",
                    "documentation": {
                        "sections": [
                            {
                                "content": "Callable components.",
                                "contentType": "Markdown",
                                "semantic": {
                                    "role": "text",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                },
                                "title": null
                            }
                        ]
                    },
                    "code": {
                        "declaration": "    callables: list[Callable]",
                        "filePath": "models.py",
                        "startLine": 234,
                        "endLine": 234,
                        "references": {
                            "list": "https://docs.python.org/3/library/stdtypes.html#lists",
                            "Callable": "@nav/api/Backends/mkdocs_py_griffe/.models.Callable"
                        },
                        "implementation": null
                    },
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "path": "models.Module.callables"
                },
                {
                    "name": "types",
                    "documentation": {
                        "sections": [
                            {
                                "content": "Types components.",
                                "contentType": "Markdown",
                                "semantic": {
                                    "role": "text",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                },
                                "title": null
                            }
                        ]
                    },
                    "code": {
                        "declaration": "    types: list[Type]",
                        "filePath": "models.py",
                        "startLine": 238,
                        "endLine": 238,
                        "references": {
                            "list": "https://docs.python.org/3/library/stdtypes.html#lists",
                            "Type": "@nav/api/Backends/mkdocs_py_griffe/.models.Type"
                        },
                        "implementation": null
                    },
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "path": "models.Module.types"
                },
                {
                    "name": "attributes",
                    "documentation": {
                        "sections": [
                            {
                                "content": "Attributes components.",
                                "contentType": "Markdown",
                                "semantic": {
                                    "role": "text",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                },
                                "title": null
                            }
                        ]
                    },
                    "code": {
                        "declaration": "    attributes: list[Attribute]",
                        "filePath": "models.py",
                        "startLine": 242,
                        "endLine": 242,
                        "references": {
                            "list": "https://docs.python.org/3/library/stdtypes.html#lists",
                            "Attribute": "@nav/api/Backends/mkdocs_py_griffe/.models.Attribute"
                        },
                        "implementation": null
                    },
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "path": "models.Module.attributes"
                },
                {
                    "name": "files",
                    "documentation": {
                        "sections": [
                            {
                                "content": "Files components.",
                                "contentType": "Markdown",
                                "semantic": {
                                    "role": "text",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                },
                                "title": null
                            }
                        ]
                    },
                    "code": {
                        "declaration": "    files: list[File]",
                        "filePath": "models.py",
                        "startLine": 246,
                        "endLine": 246,
                        "references": {
                            "list": "https://docs.python.org/3/library/stdtypes.html#lists",
                            "File": "@nav/api/Backends/mkdocs_py_griffe/.models.File"
                        },
                        "implementation": null
                    },
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "path": "models.Module.files"
                }
            ]
        },
        {
            "name": "Configuration",
            "documentation": {
                "sections": [
                    {
                        "content": "Represents the configuration to generate API files using\n[generate_api](@nav/api/Backends/mkdocs_py_griffe/.py_griffe.generate_api '{\"class\": \"mkapi-semantic-flag mkapi-role-function\"}').",
                        "contentType": "Markdown",
                        "semantic": {
                            "role": "text",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "title": null
                    }
                ]
            },
            "code": {
                "declaration": "class Configuration(NamedTuple)",
                "filePath": "py_griffe.py",
                "startLine": 53,
                "endLine": 114,
                "references": {
                    "NamedTuple": "https://docs.python.org/3/library/typing.html#typing.NamedTuple",
                    "Configuration": "@nav/api/Backends/mkdocs_py_griffe/.py_griffe.Configuration"
                },
                "implementation": "class Configuration(NamedTuple):\n    \"\"\"\n    Represents the configuration to generate API files using\n    :func:`mkdocs_py_griffe.py_griffe.generate_api`.\n    \"\"\"\n\n    base_nav: str\n    \"\"\"\n    The base URL for the navigation.\n    \"\"\"\n    out: Path\n    \"\"\"\n    Path of the output folder in which API files are generated.\n    \"\"\"\n    external_links: dict[str, str] = {}\n    \"\"\"\n    External links definition, e.g.:\n    ```\n    {   \n        \"float\": \"https://docs.python.org/fr/3/library/stdtypes.html#numeric-types-int-float-complex\",\n        \"list\": \"https://docs.python.org/3/library/stdtypes.html#lists\",\n        \"dict\": \"https://docs.python.org/3/library/stdtypes.html#mapping-types-dict\",\n    }\n    ```\n    The function :func:`mkdocs_py_griffe.std_links.std_links` is available, it includes common standard Python links.\n    \"\"\"\n    cross_linked_packages: dict[str, str] = {}\n    \"\"\"\n    Other packages to cross-link with, for which documentation has been generated by the same tool.\n    \n    This is a dictionary where the keys are package names and the values are base URLs for the corresponding package \n    documentation.\n    \n    Absolute URLs (e.g., \"https://foo.com/docs/api/foo\") are used to open links in a new tab, \n    typically when the package documentation is hosted separately from the current documentation.\n    \n    Relative URLs (e.g., \"documentation/api/bar\") are used to navigate within the same documentation site, \n    typically when the package documentation is part of the same document.\n    \n    Example:\n    ```\n    {\n        \"foo\": \"https://foo.com/docs/api/foo\",\n        \"bar\": \"documentation/api/bar\"\n    }\n    ```\n    \"\"\"\n    extra_modules: dict[str, list[ChildModule]] = {}\n    \"\"\"\n    Other API module documentation node that should be added as a child of a given module.\n    \n    This is a dictionary where the keys are the parent's module names, and the values are a list of child modules' \n    specification.\n    \n    Example:\n    ```\n    {\n        \"foo\": [ChildModule(name=\"Foo\", path=\"foo/extra-foo\", isLeaf=False)],\n        \"foo.bar\": [ChildModule(name=\"Bar\", path=\"foo/bar/extra-bar\", isLeaf=True)],\n    }\n    ```\n    \"\"\""
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {
                    "inherits": [
                        "typing.NamedTuple"
                    ]
                }
            },
            "path": "py_griffe.Configuration",
            "callables": [],
            "attributes": [
                {
                    "name": "base_nav",
                    "documentation": {
                        "sections": [
                            {
                                "content": "The base URL for the navigation.",
                                "contentType": "Markdown",
                                "semantic": {
                                    "role": "text",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                },
                                "title": null
                            }
                        ]
                    },
                    "code": {
                        "declaration": "    base_nav: str",
                        "filePath": "py_griffe.py",
                        "startLine": 59,
                        "endLine": 59,
                        "references": {
                            "str": "https://docs.python.org/fr/3/library/string.html"
                        },
                        "implementation": null
                    },
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "path": "py_griffe.Configuration.base_nav"
                },
                {
                    "name": "out",
                    "documentation": {
                        "sections": [
                            {
                                "content": "Path of the output folder in which API files are generated.",
                                "contentType": "Markdown",
                                "semantic": {
                                    "role": "text",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                },
                                "title": null
                            }
                        ]
                    },
                    "code": {
                        "declaration": "    out: Path",
                        "filePath": "py_griffe.py",
                        "startLine": 63,
                        "endLine": 63,
                        "references": {
                            "Path": "https://docs.python.org/fr/3/library/pathlib.html#pathlib.Path"
                        },
                        "implementation": null
                    },
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "path": "py_griffe.Configuration.out"
                },
                {
                    "name": "external_links",
                    "documentation": {
                        "sections": [
                            {
                                "content": "External links definition, e.g.:\n```\n{   \n    \"float\": \"https://docs.python.org/fr/3/library/stdtypes.html#numeric-types-int-float-complex\",\n    \"list\": \"https://docs.python.org/3/library/stdtypes.html#lists\",\n    \"dict\": \"https://docs.python.org/3/library/stdtypes.html#mapping-types-dict\",\n}\n```\nThe function [std_links](@nav/api/Backends/mkdocs_py_griffe/.std_links.std_links '{\"class\": \"mkapi-semantic-flag mkapi-role-function\"}') is available, it includes common standard Python links.",
                                "contentType": "Markdown",
                                "semantic": {
                                    "role": "text",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                },
                                "title": null
                            }
                        ]
                    },
                    "code": {
                        "declaration": "    external_links: dict[str, str] = {}",
                        "filePath": "py_griffe.py",
                        "startLine": 67,
                        "endLine": 67,
                        "references": {
                            "dict": "https://docs.python.org/3/library/stdtypes.html#mapping-types-dict",
                            "str": "https://docs.python.org/fr/3/library/string.html"
                        },
                        "implementation": null
                    },
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "path": "py_griffe.Configuration.external_links"
                },
                {
                    "name": "cross_linked_packages",
                    "documentation": {
                        "sections": [
                            {
                                "content": "Other packages to cross-link with, for which documentation has been generated by the same tool.\n\nThis is a dictionary where the keys are package names and the values are base URLs for the corresponding package \ndocumentation.\n\nAbsolute URLs (e.g., \"https://foo.com/docs/api/foo\") are used to open links in a new tab, \ntypically when the package documentation is hosted separately from the current documentation.\n\nRelative URLs (e.g., \"documentation/api/bar\") are used to navigate within the same documentation site, \ntypically when the package documentation is part of the same document.\n\nExample:\n```\n{\n    \"foo\": \"https://foo.com/docs/api/foo\",\n    \"bar\": \"documentation/api/bar\"\n}\n```",
                                "contentType": "Markdown",
                                "semantic": {
                                    "role": "text",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                },
                                "title": null
                            }
                        ]
                    },
                    "code": {
                        "declaration": "    cross_linked_packages: dict[str, str] = {}",
                        "filePath": "py_griffe.py",
                        "startLine": 79,
                        "endLine": 79,
                        "references": {
                            "dict": "https://docs.python.org/3/library/stdtypes.html#mapping-types-dict",
                            "str": "https://docs.python.org/fr/3/library/string.html"
                        },
                        "implementation": null
                    },
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "path": "py_griffe.Configuration.cross_linked_packages"
                },
                {
                    "name": "extra_modules",
                    "documentation": {
                        "sections": [
                            {
                                "content": "Other API module documentation node that should be added as a child of a given module.\n\nThis is a dictionary where the keys are the parent's module names, and the values are a list of child modules' \nspecification.\n\nExample:\n```\n{\n    \"foo\": [ChildModule(name=\"Foo\", path=\"foo/extra-foo\", isLeaf=False)],\n    \"foo.bar\": [ChildModule(name=\"Bar\", path=\"foo/bar/extra-bar\", isLeaf=True)],\n}\n```",
                                "contentType": "Markdown",
                                "semantic": {
                                    "role": "text",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                },
                                "title": null
                            }
                        ]
                    },
                    "code": {
                        "declaration": "    extra_modules: dict[str, list[ChildModule]] = {}",
                        "filePath": "py_griffe.py",
                        "startLine": 100,
                        "endLine": 100,
                        "references": {
                            "dict": "https://docs.python.org/3/library/stdtypes.html#mapping-types-dict",
                            "str": "https://docs.python.org/fr/3/library/string.html",
                            "list": "https://docs.python.org/3/library/stdtypes.html#lists",
                            "ChildModule": "@nav/api/Backends/mkdocs_py_griffe/.models.ChildModule"
                        },
                        "implementation": null
                    },
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "path": "py_griffe.Configuration.extra_modules"
                }
            ]
        },
        {
            "name": "SymbolRef",
            "documentation": {
                "sections": [
                    {
                        "content": "Represents a reference of a symbol in the library.\nInitialized from the function [init_symbols](@nav/api/Backends/mkdocs_py_griffe/.py_griffe.init_symbols '{\"class\": \"mkapi-semantic-flag mkapi-role-function\"}').",
                        "contentType": "Markdown",
                        "semantic": {
                            "role": "text",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "title": null
                    }
                ]
            },
            "code": {
                "declaration": "class SymbolRef(NamedTuple)",
                "filePath": "py_griffe.py",
                "startLine": 123,
                "endLine": 136,
                "references": {
                    "NamedTuple": "https://docs.python.org/3/library/typing.html#typing.NamedTuple",
                    "SymbolRef": "@nav/api/Backends/mkdocs_py_griffe/.py_griffe.SymbolRef"
                },
                "implementation": "class SymbolRef(NamedTuple):\n    \"\"\"\n    Represents a reference of a symbol in the library.\n    Initialized from the function :func:`mkdocs_py_griffe.py_griffe.init_symbols`.\n    \"\"\"\n\n    kind: SymbolKind\n    \"\"\"\n    Kind of the symbol.\n    \"\"\"\n    navigation_path: str\n    \"\"\"\n    Navigation path.\n    \"\"\""
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {
                    "inherits": [
                        "typing.NamedTuple"
                    ]
                }
            },
            "path": "py_griffe.SymbolRef",
            "callables": [],
            "attributes": [
                {
                    "name": "kind",
                    "documentation": {
                        "sections": [
                            {
                                "content": "Kind of the symbol.",
                                "contentType": "Markdown",
                                "semantic": {
                                    "role": "text",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                },
                                "title": null
                            }
                        ]
                    },
                    "code": {
                        "declaration": "    kind: SymbolKind",
                        "filePath": "py_griffe.py",
                        "startLine": 129,
                        "endLine": 129,
                        "references": {
                            "SymbolKind": "@nav/api/Backends/mkdocs_py_griffe/.py_griffe.SymbolKind",
                            "Literal": "https://docs.python.org/3/library/typing.html#typing.Literal"
                        },
                        "implementation": null
                    },
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "path": "py_griffe.SymbolRef.kind"
                },
                {
                    "name": "navigation_path",
                    "documentation": {
                        "sections": [
                            {
                                "content": "Navigation path.",
                                "contentType": "Markdown",
                                "semantic": {
                                    "role": "text",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                },
                                "title": null
                            }
                        ]
                    },
                    "code": {
                        "declaration": "    navigation_path: str",
                        "filePath": "py_griffe.py",
                        "startLine": 133,
                        "endLine": 133,
                        "references": {
                            "str": "https://docs.python.org/fr/3/library/string.html"
                        },
                        "implementation": null
                    },
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "path": "py_griffe.SymbolRef.navigation_path"
                }
            ]
        },
        {
            "name": "CrossLinkedPackage",
            "documentation": {
                "sections": [
                    {
                        "content": "Encapsulates symbols definition of a cross-linked package.",
                        "contentType": "Markdown",
                        "semantic": {
                            "role": "text",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "title": null
                    }
                ]
            },
            "code": {
                "declaration": "class CrossLinkedPackage(NamedTuple)",
                "filePath": "py_griffe.py",
                "startLine": 139,
                "endLine": 151,
                "references": {
                    "NamedTuple": "https://docs.python.org/3/library/typing.html#typing.NamedTuple",
                    "CrossLinkedPackage": "@nav/api/Backends/mkdocs_py_griffe/.py_griffe.CrossLinkedPackage"
                },
                "implementation": "class CrossLinkedPackage(NamedTuple):\n    \"\"\"\n    Encapsulates symbols definition of a cross-linked package.\n    \"\"\"\n\n    all_symbols: dict[str, SymbolRef]\n    \"\"\"\n    The list of all symbols defined in the documented module.\n    \"\"\"\n    all_aliases: dict[str, str]\n    \"\"\"\n    The list of aliases defined in the documented module (from the library).\n    \"\"\""
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {
                    "inherits": [
                        "typing.NamedTuple"
                    ]
                }
            },
            "path": "py_griffe.CrossLinkedPackage",
            "callables": [],
            "attributes": [
                {
                    "name": "all_symbols",
                    "documentation": {
                        "sections": [
                            {
                                "content": "The list of all symbols defined in the documented module.",
                                "contentType": "Markdown",
                                "semantic": {
                                    "role": "text",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                },
                                "title": null
                            }
                        ]
                    },
                    "code": {
                        "declaration": "    all_symbols: dict[str, SymbolRef]",
                        "filePath": "py_griffe.py",
                        "startLine": 144,
                        "endLine": 144,
                        "references": {
                            "dict": "https://docs.python.org/3/library/stdtypes.html#mapping-types-dict",
                            "str": "https://docs.python.org/fr/3/library/string.html",
                            "SymbolRef": "@nav/api/Backends/mkdocs_py_griffe/.py_griffe.SymbolRef",
                            "NamedTuple": "https://docs.python.org/3/library/typing.html#typing.NamedTuple"
                        },
                        "implementation": null
                    },
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "path": "py_griffe.CrossLinkedPackage.all_symbols"
                },
                {
                    "name": "all_aliases",
                    "documentation": {
                        "sections": [
                            {
                                "content": "The list of aliases defined in the documented module (from the library).",
                                "contentType": "Markdown",
                                "semantic": {
                                    "role": "text",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                },
                                "title": null
                            }
                        ]
                    },
                    "code": {
                        "declaration": "    all_aliases: dict[str, str]",
                        "filePath": "py_griffe.py",
                        "startLine": 148,
                        "endLine": 148,
                        "references": {
                            "dict": "https://docs.python.org/3/library/stdtypes.html#mapping-types-dict",
                            "str": "https://docs.python.org/fr/3/library/string.html"
                        },
                        "implementation": null
                    },
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "path": "py_griffe.CrossLinkedPackage.all_aliases"
                }
            ]
        },
        {
            "name": "Project",
            "documentation": {
                "sections": [
                    {
                        "content": "Represents the project, holding global symbols.",
                        "contentType": "Markdown",
                        "semantic": {
                            "role": "text",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "title": null
                    }
                ]
            },
            "code": {
                "declaration": "class Project(NamedTuple)",
                "filePath": "py_griffe.py",
                "startLine": 154,
                "endLine": 178,
                "references": {
                    "NamedTuple": "https://docs.python.org/3/library/typing.html#typing.NamedTuple",
                    "Project": "@nav/api/Backends/mkdocs_py_griffe/.py_griffe.Project"
                },
                "implementation": "class Project(NamedTuple):\n    \"\"\"\n    Represents the project, holding global symbols.\n    \"\"\"\n\n    config: Configuration\n    \"\"\"\n    The configuration.\n    \"\"\"\n    root_ast: AstModule\n    \"\"\"\n    The root AST from griffe of the documented module.\n    \"\"\"\n    all_symbols: dict[str, SymbolRef]\n    \"\"\"\n    The list of all symbols defined in the documented module.\n    \"\"\"\n    all_aliases: dict[str, str]\n    \"\"\"\n    The list of aliases defined in the documented module (from the library).\n    \"\"\"\n    cross_linked_packages: dict[str, CrossLinkedPackage]\n    \"\"\"\n    Data prepared for cross-linked packages.\n    \"\"\""
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {
                    "inherits": [
                        "typing.NamedTuple"
                    ]
                }
            },
            "path": "py_griffe.Project",
            "callables": [],
            "attributes": [
                {
                    "name": "config",
                    "documentation": {
                        "sections": [
                            {
                                "content": "The configuration.",
                                "contentType": "Markdown",
                                "semantic": {
                                    "role": "text",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                },
                                "title": null
                            }
                        ]
                    },
                    "code": {
                        "declaration": "    config: Configuration",
                        "filePath": "py_griffe.py",
                        "startLine": 159,
                        "endLine": 159,
                        "references": {
                            "Configuration": "@nav/api/Backends/mkdocs_py_griffe/.py_griffe.Configuration",
                            "NamedTuple": "https://docs.python.org/3/library/typing.html#typing.NamedTuple"
                        },
                        "implementation": null
                    },
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "path": "py_griffe.Project.config"
                },
                {
                    "name": "root_ast",
                    "documentation": {
                        "sections": [
                            {
                                "content": "The root AST from griffe of the documented module.",
                                "contentType": "Markdown",
                                "semantic": {
                                    "role": "text",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                },
                                "title": null
                            }
                        ]
                    },
                    "code": {
                        "declaration": "    root_ast: AstModule",
                        "filePath": "py_griffe.py",
                        "startLine": 163,
                        "endLine": 163,
                        "references": {
                            "AstModule": "https://mkdocstrings.github.io/griffe/reference/griffe/#griffe.Module"
                        },
                        "implementation": null
                    },
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "path": "py_griffe.Project.root_ast"
                },
                {
                    "name": "all_symbols",
                    "documentation": {
                        "sections": [
                            {
                                "content": "The list of all symbols defined in the documented module.",
                                "contentType": "Markdown",
                                "semantic": {
                                    "role": "text",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                },
                                "title": null
                            }
                        ]
                    },
                    "code": {
                        "declaration": "    all_symbols: dict[str, SymbolRef]",
                        "filePath": "py_griffe.py",
                        "startLine": 167,
                        "endLine": 167,
                        "references": {
                            "dict": "https://docs.python.org/3/library/stdtypes.html#mapping-types-dict",
                            "str": "https://docs.python.org/fr/3/library/string.html",
                            "SymbolRef": "@nav/api/Backends/mkdocs_py_griffe/.py_griffe.SymbolRef",
                            "NamedTuple": "https://docs.python.org/3/library/typing.html#typing.NamedTuple"
                        },
                        "implementation": null
                    },
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "path": "py_griffe.Project.all_symbols"
                },
                {
                    "name": "all_aliases",
                    "documentation": {
                        "sections": [
                            {
                                "content": "The list of aliases defined in the documented module (from the library).",
                                "contentType": "Markdown",
                                "semantic": {
                                    "role": "text",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                },
                                "title": null
                            }
                        ]
                    },
                    "code": {
                        "declaration": "    all_aliases: dict[str, str]",
                        "filePath": "py_griffe.py",
                        "startLine": 171,
                        "endLine": 171,
                        "references": {
                            "dict": "https://docs.python.org/3/library/stdtypes.html#mapping-types-dict",
                            "str": "https://docs.python.org/fr/3/library/string.html"
                        },
                        "implementation": null
                    },
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "path": "py_griffe.Project.all_aliases"
                },
                {
                    "name": "cross_linked_packages",
                    "documentation": {
                        "sections": [
                            {
                                "content": "Data prepared for cross-linked packages.",
                                "contentType": "Markdown",
                                "semantic": {
                                    "role": "text",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                },
                                "title": null
                            }
                        ]
                    },
                    "code": {
                        "declaration": "    cross_linked_packages: dict[str, CrossLinkedPackage]",
                        "filePath": "py_griffe.py",
                        "startLine": 175,
                        "endLine": 175,
                        "references": {
                            "dict": "https://docs.python.org/3/library/stdtypes.html#mapping-types-dict",
                            "str": "https://docs.python.org/fr/3/library/string.html",
                            "CrossLinkedPackage": "@nav/api/Backends/mkdocs_py_griffe/.py_griffe.CrossLinkedPackage",
                            "NamedTuple": "https://docs.python.org/3/library/typing.html#typing.NamedTuple"
                        },
                        "implementation": null
                    },
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "path": "py_griffe.Project.cross_linked_packages"
                }
            ]
        }
    ],
    "attributes": [
        {
            "name": "ATTR_SEMANTIC",
            "documentation": {
                "sections": [
                    {
                        "content": "Semantic for class's attributes.",
                        "contentType": "Markdown",
                        "semantic": {
                            "role": "text",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "title": null
                    }
                ]
            },
            "code": {
                "declaration": "ATTR_SEMANTIC = Semantic(role=\"attribute\", labels=[], attributes={}, relations={})",
                "filePath": "py_griffe.py",
                "startLine": 208,
                "endLine": 208,
                "references": {
                    "Semantic": "@nav/api/Backends/mkdocs_py_griffe/.models.Semantic"
                },
                "implementation": null
            },
            "semantic": {
                "role": "global",
                "labels": [],
                "attributes": {},
                "relations": {}
            },
            "path": "py_griffe.ATTR_SEMANTIC"
        },
        {
            "name": "Attribute",
            "documentation": {
                "sections": [
                    {
                        "content": "Type alias for Attribute.",
                        "contentType": "Markdown",
                        "semantic": {
                            "role": "text",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "title": null
                    }
                ]
            },
            "code": {
                "declaration": "Attribute = Entity",
                "filePath": "models.py",
                "startLine": 143,
                "endLine": 143,
                "references": {
                    "Entity": "@nav/api/Backends/mkdocs_py_griffe/.models.Entity",
                    "dataclasses": "https://docs.python.org/3/library/dataclasses.html#",
                    "dataclass": "https://docs.python.org/3/library/dataclasses.html#",
                    "str": "https://docs.python.org/fr/3/library/string.html",
                    "Documentation": "@nav/api/Backends/mkdocs_py_griffe/.models.Documentation",
                    "Code": "@nav/api/Backends/mkdocs_py_griffe/.models.Code",
                    "Semantic": "@nav/api/Backends/mkdocs_py_griffe/.models.Semantic",
                    "EntityPath": "@nav/api/Backends/mkdocs_py_griffe/.models.EntityPath"
                },
                "implementation": null
            },
            "semantic": {
                "role": "global",
                "labels": [],
                "attributes": {},
                "relations": {}
            },
            "path": "models.Attribute"
        },
        {
            "name": "CLASS_SEMANTIC",
            "documentation": {
                "sections": [
                    {
                        "content": "Semantic for class's attributes.",
                        "contentType": "Markdown",
                        "semantic": {
                            "role": "text",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "title": null
                    }
                ]
            },
            "code": {
                "declaration": "CLASS_SEMANTIC = Semantic(role=\"class\", labels=[], attributes={}, relations={})",
                "filePath": "py_griffe.py",
                "startLine": 203,
                "endLine": 203,
                "references": {
                    "Semantic": "@nav/api/Backends/mkdocs_py_griffe/.models.Semantic"
                },
                "implementation": null
            },
            "semantic": {
                "role": "global",
                "labels": [],
                "attributes": {},
                "relations": {}
            },
            "path": "py_griffe.CLASS_SEMANTIC"
        },
        {
            "name": "Callable",
            "documentation": {
                "sections": [
                    {
                        "content": "Type alias for Callable.",
                        "contentType": "Markdown",
                        "semantic": {
                            "role": "text",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "title": null
                    }
                ]
            },
            "code": {
                "declaration": "Callable = Entity",
                "filePath": "models.py",
                "startLine": 138,
                "endLine": 138,
                "references": {
                    "Entity": "@nav/api/Backends/mkdocs_py_griffe/.models.Entity",
                    "dataclasses": "https://docs.python.org/3/library/dataclasses.html#",
                    "dataclass": "https://docs.python.org/3/library/dataclasses.html#",
                    "str": "https://docs.python.org/fr/3/library/string.html",
                    "Documentation": "@nav/api/Backends/mkdocs_py_griffe/.models.Documentation",
                    "Code": "@nav/api/Backends/mkdocs_py_griffe/.models.Code",
                    "Semantic": "@nav/api/Backends/mkdocs_py_griffe/.models.Semantic",
                    "EntityPath": "@nav/api/Backends/mkdocs_py_griffe/.models.EntityPath"
                },
                "implementation": null
            },
            "semantic": {
                "role": "global",
                "labels": [],
                "attributes": {},
                "relations": {}
            },
            "path": "models.Callable"
        },
        {
            "name": "EntityPath",
            "documentation": {
                "sections": [
                    {
                        "content": "Entity path is the python path of a module, e.g. `moduleFoo.ClassBar.attBaz`.",
                        "contentType": "Markdown",
                        "semantic": {
                            "role": "text",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "title": null
                    }
                ]
            },
            "code": {
                "declaration": "EntityPath = str",
                "filePath": "models.py",
                "startLine": 10,
                "endLine": 10,
                "references": {
                    "str": "https://docs.python.org/fr/3/library/string.html"
                },
                "implementation": null
            },
            "semantic": {
                "role": "global",
                "labels": [],
                "attributes": {},
                "relations": {}
            },
            "path": "models.EntityPath"
        },
        {
            "name": "FUNCTION_GLOBAL_SEMANTIC",
            "documentation": {
                "sections": [
                    {
                        "content": "Semantic for globals functions.",
                        "contentType": "Markdown",
                        "semantic": {
                            "role": "text",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "title": null
                    }
                ]
            },
            "code": {
                "declaration": "FUNCTION_GLOBAL_SEMANTIC = Semantic(\n    role=\"function\", labels=[], attributes={}, relations={}\n)",
                "filePath": "py_griffe.py",
                "startLine": 196,
                "endLine": 198,
                "references": {
                    "Semantic": "@nav/api/Backends/mkdocs_py_griffe/.models.Semantic"
                },
                "implementation": null
            },
            "semantic": {
                "role": "global",
                "labels": [],
                "attributes": {},
                "relations": {}
            },
            "path": "py_griffe.FUNCTION_GLOBAL_SEMANTIC"
        },
        {
            "name": "GLOBAL_SEMANTIC",
            "documentation": {
                "sections": [
                    {
                        "content": "Semantic for global variables.",
                        "contentType": "Markdown",
                        "semantic": {
                            "role": "text",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "title": null
                    }
                ]
            },
            "code": {
                "declaration": "GLOBAL_SEMANTIC = Semantic(role=\"global\", labels=[], attributes={}, relations={})",
                "filePath": "py_griffe.py",
                "startLine": 191,
                "endLine": 191,
                "references": {
                    "Semantic": "@nav/api/Backends/mkdocs_py_griffe/.models.Semantic"
                },
                "implementation": null
            },
            "semantic": {
                "role": "global",
                "labels": [],
                "attributes": {},
                "relations": {}
            },
            "path": "py_griffe.GLOBAL_SEMANTIC"
        },
        {
            "name": "INIT_FILENAME",
            "documentation": {
                "sections": [
                    {
                        "content": "The '__init__.py' filename to recognize module.",
                        "contentType": "Markdown",
                        "semantic": {
                            "role": "text",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "title": null
                    }
                ]
            },
            "code": {
                "declaration": "INIT_FILENAME = \"__init__.py\"",
                "filePath": "py_griffe.py",
                "startLine": 47,
                "endLine": 47,
                "references": {},
                "implementation": null
            },
            "semantic": {
                "role": "global",
                "labels": [],
                "attributes": {},
                "relations": {}
            },
            "path": "py_griffe.INIT_FILENAME"
        },
        {
            "name": "METHOD_SEMANTIC",
            "documentation": {
                "sections": [
                    {
                        "content": "Semantic for class's method.",
                        "contentType": "Markdown",
                        "semantic": {
                            "role": "text",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "title": null
                    }
                ]
            },
            "code": {
                "declaration": "METHOD_SEMANTIC = Semantic(role=\"method\", labels=[], attributes={}, relations={})",
                "filePath": "py_griffe.py",
                "startLine": 213,
                "endLine": 213,
                "references": {
                    "Semantic": "@nav/api/Backends/mkdocs_py_griffe/.models.Semantic"
                },
                "implementation": null
            },
            "semantic": {
                "role": "global",
                "labels": [],
                "attributes": {},
                "relations": {}
            },
            "path": "py_griffe.METHOD_SEMANTIC"
        },
        {
            "name": "MODULE_SEMANTIC",
            "documentation": {
                "sections": [
                    {
                        "content": "Semantic for global variables.",
                        "contentType": "Markdown",
                        "semantic": {
                            "role": "text",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "title": null
                    }
                ]
            },
            "code": {
                "declaration": "MODULE_SEMANTIC = Semantic(role=\"module\", labels=[], attributes={}, relations={})",
                "filePath": "py_griffe.py",
                "startLine": 186,
                "endLine": 186,
                "references": {
                    "Semantic": "@nav/api/Backends/mkdocs_py_griffe/.models.Semantic"
                },
                "implementation": null
            },
            "semantic": {
                "role": "global",
                "labels": [],
                "attributes": {},
                "relations": {}
            },
            "path": "py_griffe.MODULE_SEMANTIC"
        },
        {
            "name": "NO_SEMANTIC",
            "documentation": {
                "sections": [
                    {
                        "content": "No semantic.",
                        "contentType": "Markdown",
                        "semantic": {
                            "role": "text",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "title": null
                    }
                ]
            },
            "code": {
                "declaration": "NO_SEMANTIC = Semantic(role=\"\", labels=[], attributes={}, relations={})",
                "filePath": "py_griffe.py",
                "startLine": 181,
                "endLine": 181,
                "references": {
                    "Semantic": "@nav/api/Backends/mkdocs_py_griffe/.models.Semantic"
                },
                "implementation": null
            },
            "semantic": {
                "role": "global",
                "labels": [],
                "attributes": {},
                "relations": {}
            },
            "path": "py_griffe.NO_SEMANTIC"
        },
        {
            "name": "SUPPORTED_CROSS_LINK_TAGS",
            "documentation": {
                "sections": [
                    {
                        "content": "The supported tags for sphinx like cross links.\n\n*E.g.*:\n```\n*  symbol\n*  a custom text <symbol>\n*  symbol>\n```",
                        "contentType": "Markdown",
                        "semantic": {
                            "role": "text",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "title": null
                    }
                ]
            },
            "code": {
                "declaration": "SUPPORTED_CROSS_LINK_TAGS: set[SphinxCrossLinkTag] = {\n    \"mod\",\n    \"class\",\n    \"func\",\n    \"attr\",\n    \"meth\",\n    \"glob\",\n}",
                "filePath": "py_griffe.py",
                "startLine": 223,
                "endLine": 230,
                "references": {
                    "set": "https://docs.python.org/3/library/stdtypes.html#set",
                    "SphinxCrossLinkTag": "@nav/api/Backends/mkdocs_py_griffe/.py_griffe.SphinxCrossLinkTag"
                },
                "implementation": null
            },
            "semantic": {
                "role": "global",
                "labels": [],
                "attributes": {},
                "relations": {}
            },
            "path": "py_griffe.SUPPORTED_CROSS_LINK_TAGS"
        },
        {
            "name": "SphinxCrossLinkTag",
            "documentation": {
                "sections": [
                    {
                        "content": "Type of supported tags for sphinx like cross links.",
                        "contentType": "Markdown",
                        "semantic": {
                            "role": "text",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "title": null
                    }
                ]
            },
            "code": {
                "declaration": "SphinxCrossLinkTag = Literal[\"mod\", \"class\", \"func\", \"attr\", \"meth\", \"glob\"]",
                "filePath": "py_griffe.py",
                "startLine": 218,
                "endLine": 218,
                "references": {
                    "Literal": "https://docs.python.org/3/library/typing.html#typing.Literal"
                },
                "implementation": null
            },
            "semantic": {
                "role": "global",
                "labels": [],
                "attributes": {},
                "relations": {}
            },
            "path": "py_griffe.SphinxCrossLinkTag"
        },
        {
            "name": "SymbolKind",
            "documentation": {
                "sections": [
                    {
                        "content": "Possible kinds for a symbol.",
                        "contentType": "Markdown",
                        "semantic": {
                            "role": "text",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "title": null
                    }
                ]
            },
            "code": {
                "declaration": "SymbolKind = Literal[\"function\", \"attribute\", \"class\", \"property\", \"method\", \"module\"]",
                "filePath": "py_griffe.py",
                "startLine": 117,
                "endLine": 117,
                "references": {
                    "Literal": "https://docs.python.org/3/library/typing.html#typing.Literal"
                },
                "implementation": null
            },
            "semantic": {
                "role": "global",
                "labels": [],
                "attributes": {},
                "relations": {}
            },
            "path": "py_griffe.SymbolKind"
        },
        {
            "name": "TAGS_TO_SEMANTIC",
            "documentation": {
                "sections": [
                    {
                        "content": "Tags to semantic convertor.",
                        "contentType": "Markdown",
                        "semantic": {
                            "role": "text",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "title": null
                    }
                ]
            },
            "code": {
                "declaration": "TAGS_TO_SEMANTIC: dict[str, str] = {\n    \"mod\": \"mkapi-role-module\",\n    \"class\": \"mkapi-role-class\",\n    \"func\": \"mkapi-role-function\",\n    \"attr\": \"mkapi-role-attribute\",\n    \"meth\": \"mkapi-role-method\",\n    \"glob\": \"mkapi-role-global\",\n}",
                "filePath": "py_griffe.py",
                "startLine": 241,
                "endLine": 248,
                "references": {
                    "dict": "https://docs.python.org/3/library/stdtypes.html#mapping-types-dict",
                    "str": "https://docs.python.org/fr/3/library/string.html"
                },
                "implementation": null
            },
            "semantic": {
                "role": "global",
                "labels": [],
                "attributes": {},
                "relations": {}
            },
            "path": "py_griffe.TAGS_TO_SEMANTIC"
        }
    ],
    "files": [
        {
            "name": "models",
            "path": "models.py",
            "documentation": {
                "sections": [
                    {
                        "content": "Python version of the target TypeScript [models](@nav/api/CodeApi.models.ts).",
                        "contentType": "Markdown",
                        "semantic": {
                            "role": "text",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "title": null
                    }
                ]
            }
        },
        {
            "name": "py_griffe",
            "path": "py_griffe.py",
            "documentation": {
                "sections": [
                    {
                        "content": "The python backend module to produce API files from python modules.",
                        "contentType": "Markdown",
                        "semantic": {
                            "role": "text",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "title": null
                    }
                ]
            }
        },
        {
            "name": "std_links",
            "path": "std_links.py",
            "documentation": {
                "sections": [
                    {
                        "content": "",
                        "contentType": "Markdown",
                        "semantic": {
                            "role": "text",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "title": null
                    }
                ]
            }
        }
    ]
}