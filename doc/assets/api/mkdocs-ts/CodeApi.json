{
    "name": "CodeApi",
    "documentation": {
        "sections": [
            {
                "content": "The Code API Plugin integrates API documentation into your application.\n\nAPI documentation is structured based on the module hierarchy, where each page corresponds to a specific module.\n\nThe root node of the API documentation is generated using  <mkapi-api-link nav=\"@nav/api/CodeApi.codeApiEntryNode\" semantic=\"function\">CodeApi.codeApiEntryNode</mkapi-api-link> .\nBy default, it utilizes a  <mkapi-api-link nav=\"@nav/api/CodeApi.HttpClient\" semantic=\"class\">CodeApi.HttpClient</mkapi-api-link>  to fetch module data from .json files,\nwith each file representing a  <mkapi-api-link nav=\"@nav/api/CodeApi.Module\" semantic=\"type-alias\">CodeApi.Module</mkapi-api-link> . The module is then displayed on the page using\n <mkapi-api-link nav=\"@nav/api/CodeApi.ModuleView\" semantic=\"class\">CodeApi.ModuleView</mkapi-api-link> .\n\n<note level=\"warning\">\nThis module does **not** handle the generation of  `.json`  files. For details on generating these files,\nrefer to  <mkapi-api-link nav=\"@nav/api/MkApiBackends\" semantic=\"module\">MkApiBackends</mkapi-api-link> .\n</note>",
                "contentType": "markdown",
                "semantic": {
                    "role": "",
                    "labels": [],
                    "attributes": {},
                    "relations": {}
                }
            }
        ]
    },
    "path": "mkdocs-ts/CodeApi",
    "navPath": "@nav/api/",
    "attributes": [
        {
            "name": "configurationDefault",
            "semantic": {
                "role": "global",
                "labels": [],
                "attributes": {},
                "relations": {}
            },
            "documentation": {
                "sections": [
                    {
                        "content": "",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "configurationDefault",
            "navPath": "@nav/api/CodeApi.configurationDefault",
            "code": {
                "filePath": "src/lib/code-api/configurations.ts",
                "declaration": "configurationDefault: Configuration = {\n    codeUrl: ({\n        project,\n        path,\n        startLine,\n    }: {\n        project: Project\n        path: string\n        startLine: number\n    }) => {\n        return `https://github.com/${project.name}/tree/main/src/${path}#L${String(startLine)}`\n    },\n    externalTypes: {},\n    css: () => `${pkgJson.name}#${pkgJson.version}~assets/ts-typedoc.css`,\n    notebook: undefined,\n    navNode: ({ name, header, layout }) => ({\n        name,\n        header,\n        layout,\n    }),\n}",
                "implementation": "",
                "startLine": 98,
                "endLine": 99,
                "references": {
                    "configurationDefault": "@nav/api/CodeApi.configurationDefault",
                    "Configuration": "@nav/api/CodeApi.Configuration"
                }
            }
        },
        {
            "name": "configurationPython",
            "semantic": {
                "role": "global",
                "labels": [],
                "attributes": {},
                "relations": {}
            },
            "documentation": {
                "sections": [
                    {
                        "content": "",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "configurationPython",
            "navPath": "@nav/api/CodeApi.configurationPython",
            "code": {
                "filePath": "src/lib/code-api/configurations.ts",
                "declaration": "configurationPython: Configuration = configurationDefault",
                "implementation": "",
                "startLine": 128,
                "endLine": 129,
                "references": {
                    "configurationPython": "@nav/api/CodeApi.configurationPython",
                    "Configuration": "@nav/api/CodeApi.Configuration"
                }
            }
        },
        {
            "name": "configurationTsTypedoc",
            "semantic": {
                "role": "global",
                "labels": [],
                "attributes": {},
                "relations": {}
            },
            "documentation": {
                "sections": [
                    {
                        "content": "",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "configurationTsTypedoc",
            "navPath": "@nav/api/CodeApi.configurationTsTypedoc",
            "code": {
                "filePath": "src/lib/code-api/configurations.ts",
                "declaration": "configurationTsTypedoc: Configuration = configurationDefault",
                "implementation": "",
                "startLine": 123,
                "endLine": 124,
                "references": {
                    "configurationTsTypedoc": "@nav/api/CodeApi.configurationTsTypedoc",
                    "Configuration": "@nav/api/CodeApi.Configuration"
                }
            }
        }
    ],
    "types": [
        {
            "name": "AttributeView",
            "documentation": {
                "sections": [
                    {
                        "content": "View for a  <mkapi-api-link nav=\"@nav/api/CodeApi.Attribute\" semantic=\"type-alias\">Attribute</mkapi-api-link> .",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "AttributeView",
            "navPath": "@nav/api/CodeApi.AttributeView",
            "attributes": [
                {
                    "name": "children",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Children of the element.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "AttributeView.children",
                    "navPath": "@nav/api/CodeApi.AttributeView.children",
                    "code": {
                        "filePath": "src/lib/code-api/attribute.view.ts",
                        "declaration": "public readonly children: ChildrenLike",
                        "implementation": "",
                        "startLine": 25,
                        "endLine": 26,
                        "references": {
                            "children": "@nav/api/CodeApi.AttributeView.children",
                            "ChildrenLike": "/apps/@rx-vdom/doc/latest?nav=/api.ChildrenLike"
                        }
                    }
                },
                {
                    "name": "class",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The class associated with the element, equivalent to the  `className`  property of  `HTMLElement` .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "AttributeView.class",
                    "navPath": "@nav/api/CodeApi.AttributeView.class",
                    "code": {
                        "filePath": "src/lib/code-api/attribute.view.ts",
                        "declaration": "public readonly class = `${AttributeView.CssSelector} mkapi-attr`",
                        "implementation": "",
                        "startLine": 24,
                        "endLine": 25,
                        "references": {
                            "class": "@nav/api/CodeApi.AttributeView.class"
                        }
                    }
                },
                {
                    "name": "tag",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The tag of the element, equivalent to the  `tagName`  property of  `HTMLElement` .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "AttributeView.tag",
                    "navPath": "@nav/api/CodeApi.AttributeView.tag",
                    "code": {
                        "filePath": "src/lib/code-api/attribute.view.ts",
                        "declaration": "public readonly tag = 'div'",
                        "implementation": "",
                        "startLine": 23,
                        "endLine": 24,
                        "references": {
                            "tag": "@nav/api/CodeApi.AttributeView.tag"
                        }
                    }
                },
                {
                    "name": "CssSelector",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Component's class name for CSS query.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "AttributeView.CssSelector",
                    "navPath": "@nav/api/CodeApi.AttributeView.CssSelector",
                    "code": {
                        "filePath": "src/lib/code-api/attribute.view.ts",
                        "declaration": "static readonly CssSelector = 'mkdocs-AttributeView'",
                        "implementation": "",
                        "startLine": 15,
                        "endLine": 16,
                        "references": {
                            "CssSelector": "@nav/api/CodeApi.AttributeView.CssSelector"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/code-api/attribute.view.ts",
                "declaration": "export class AttributeView implements VirtualDOM<'div'>",
                "implementation": "export class AttributeView implements VirtualDOM<'div'> {\n    /**\n     * Component's class name for CSS query.\n     */\n    static readonly CssSelector = 'mkdocs-AttributeView'\n    public readonly attribute: Attribute\n    public readonly fromModule: Module\n\n    public readonly parent?: Type\n    public readonly router: Router\n    public readonly configuration: Configuration\n    public readonly project: Project\n    public readonly tag = 'div'\n    public readonly class = `${AttributeView.CssSelector} mkapi-attr`\n    public readonly children: ChildrenLike\n    constructor(params: {\n        router: Router\n        attribute: Attribute\n        configuration: Configuration\n        project: Project\n        parent?: Type\n        fromModule: Module\n    }) {\n        Object.assign(this, params)\n        this.class += ` mkapi-role-${this.attribute.semantic.role}`\n\n        this.children = [\n            {\n                tag: 'div',\n                class: 'd-flex align-items-center',\n                children: [\n                    new HeaderView({\n                        tag: params.parent ? 'h4' : 'h3',\n                        withClass: `doc-${this.attribute.semantic.role}-name`,\n                        doc: this.attribute,\n                        relativeToPath: this.fromModule.path,\n                    }),\n                ],\n            },\n            {\n                tag: 'div',\n                children: [\n                    new CodeView({\n                        code: this.attribute.code,\n                        router: this.router,\n                        configuration: this.configuration,\n                        parent: this.attribute,\n                        project: this.project,\n                    }),\n                ],\n            },\n            {\n                tag: 'div',\n                class: 'px-3 py-2',\n                children: [\n                    new DocumentationView({\n                        documentation: this.attribute.documentation,\n                        router: this.router,\n                        configuration: this.configuration,\n                    }),\n                ],\n            },\n        ]\n    }\n}",
                "startLine": 11,
                "endLine": 76,
                "references": {
                    "AttributeView": "@nav/api/CodeApi.AttributeView",
                    "Entity": "@nav/api/CodeApi.Entity",
                    "Configuration": "@nav/api/CodeApi.Configuration",
                    "Module": "@nav/api/CodeApi.Module",
                    "Type": "@nav/api/CodeApi.Type",
                    "Project": "@nav/api/CodeApi.Project",
                    "Router": "@nav/api/MainModule.Router",
                    "ChildrenLike": "/apps/@rx-vdom/doc/latest?nav=/api.ChildrenLike",
                    "VirtualDOM": "/apps/@rx-vdom/doc/latest?nav=/api.VirtualDOM"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "CallableView",
            "documentation": {
                "sections": [
                    {
                        "content": "View for a  <mkapi-api-link nav=\"@nav/api/CodeApi.Callable\" semantic=\"type-alias\">Callable</mkapi-api-link> .",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "CallableView",
            "navPath": "@nav/api/CodeApi.CallableView",
            "attributes": [
                {
                    "name": "children",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Children of the element.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "CallableView.children",
                    "navPath": "@nav/api/CodeApi.CallableView.children",
                    "code": {
                        "filePath": "src/lib/code-api/callable.view.ts",
                        "declaration": "public readonly children: ChildrenLike",
                        "implementation": "",
                        "startLine": 25,
                        "endLine": 26,
                        "references": {
                            "children": "@nav/api/CodeApi.CallableView.children",
                            "ChildrenLike": "/apps/@rx-vdom/doc/latest?nav=/api.ChildrenLike"
                        }
                    }
                },
                {
                    "name": "class",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The class associated with the element, equivalent to the  `className`  property of  `HTMLElement` .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "CallableView.class",
                    "navPath": "@nav/api/CodeApi.CallableView.class",
                    "code": {
                        "filePath": "src/lib/code-api/callable.view.ts",
                        "declaration": "public readonly class = `${CallableView.CssSelector} mkapi-callable`",
                        "implementation": "",
                        "startLine": 24,
                        "endLine": 25,
                        "references": {
                            "class": "@nav/api/CodeApi.CallableView.class"
                        }
                    }
                },
                {
                    "name": "tag",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The tag of the element, equivalent to the  `tagName`  property of  `HTMLElement` .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "CallableView.tag",
                    "navPath": "@nav/api/CodeApi.CallableView.tag",
                    "code": {
                        "filePath": "src/lib/code-api/callable.view.ts",
                        "declaration": "public readonly tag = 'div'",
                        "implementation": "",
                        "startLine": 23,
                        "endLine": 24,
                        "references": {
                            "tag": "@nav/api/CodeApi.CallableView.tag"
                        }
                    }
                },
                {
                    "name": "CssSelector",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Component's class name for CSS query.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "CallableView.CssSelector",
                    "navPath": "@nav/api/CodeApi.CallableView.CssSelector",
                    "code": {
                        "filePath": "src/lib/code-api/callable.view.ts",
                        "declaration": "static readonly CssSelector = 'mkdocs-CallableView'",
                        "implementation": "",
                        "startLine": 16,
                        "endLine": 17,
                        "references": {
                            "CssSelector": "@nav/api/CodeApi.CallableView.CssSelector"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/code-api/callable.view.ts",
                "declaration": "export class CallableView implements VirtualDOM<'div'>",
                "implementation": "export class CallableView implements VirtualDOM<'div'> {\n    /**\n     * Component's class name for CSS query.\n     */\n    static readonly CssSelector = 'mkdocs-CallableView'\n    public readonly callable: Callable\n    public readonly fromModule: Module\n\n    public readonly router: Router\n    public readonly configuration: Configuration\n    public readonly project: Project\n    public readonly tag = 'div'\n    public readonly class = `${CallableView.CssSelector} mkapi-callable`\n    public readonly children: ChildrenLike\n\n    constructor(params: {\n        callable: Callable\n        router: Router\n        configuration: Configuration\n        project: Project\n        parent?: Type\n        fromModule: Module\n    }) {\n        Object.assign(this, params)\n        this.class += ` mkapi-role-${this.callable.semantic.role}`\n        this.children = [\n            new HeaderView({\n                tag: params.parent ? 'h4' : 'h3',\n                withClass: `doc-${this.callable.semantic.role}-name`,\n                doc: this.callable,\n                relativeToPath: this.fromModule.path,\n            }),\n            separatorView,\n            new CodeView({\n                code: this.callable.code,\n                router: this.router,\n                configuration: this.configuration,\n                parent: this.callable,\n                project: this.project,\n            }),\n            { tag: 'div', class: 'mt-3' },\n            new DocumentationView({\n                documentation: this.callable.documentation,\n                router: this.router,\n                configuration: this.configuration,\n            }),\n        ]\n    }\n}",
                "startLine": 12,
                "endLine": 61,
                "references": {
                    "CallableView": "@nav/api/CodeApi.CallableView",
                    "Entity": "@nav/api/CodeApi.Entity",
                    "Configuration": "@nav/api/CodeApi.Configuration",
                    "Module": "@nav/api/CodeApi.Module",
                    "Type": "@nav/api/CodeApi.Type",
                    "Project": "@nav/api/CodeApi.Project",
                    "Router": "@nav/api/MainModule.Router",
                    "ChildrenLike": "/apps/@rx-vdom/doc/latest?nav=/api.ChildrenLike",
                    "VirtualDOM": "/apps/@rx-vdom/doc/latest?nav=/api.VirtualDOM"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "CodeView",
            "documentation": {
                "sections": [
                    {
                        "content": "View for a  <mkapi-api-link nav=\"@nav/api/CodeApi.Code\" semantic=\"interface\">Code</mkapi-api-link> .",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "CodeView",
            "navPath": "@nav/api/CodeApi.CodeView",
            "attributes": [
                {
                    "name": "children",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Children of the element.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "CodeView.children",
                    "navPath": "@nav/api/CodeApi.CodeView.children",
                    "code": {
                        "filePath": "src/lib/code-api/code.view.ts",
                        "declaration": "public readonly children: ChildrenLike",
                        "implementation": "",
                        "startLine": 94,
                        "endLine": 95,
                        "references": {
                            "children": "@nav/api/CodeApi.CodeView.children",
                            "ChildrenLike": "/apps/@rx-vdom/doc/latest?nav=/api.ChildrenLike"
                        }
                    }
                },
                {
                    "name": "class",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The class associated with the element, equivalent to the  `className`  property of  `HTMLElement` .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "CodeView.class",
                    "navPath": "@nav/api/CodeApi.CodeView.class",
                    "code": {
                        "filePath": "src/lib/code-api/code.view.ts",
                        "declaration": "public readonly class = `${CodeView.CssSelector} fv-border-primary rounded`",
                        "implementation": "",
                        "startLine": 90,
                        "endLine": 91,
                        "references": {
                            "class": "@nav/api/CodeApi.CodeView.class"
                        }
                    }
                },
                {
                    "name": "style",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The style associated with the element. Typically, for a static value:\n ```typescript\n{\n     tag: 'div',\n     style: {\n         backgroundColor: 'blue'\n     }\n}\n``` \nFor more details on hyphenated properties, see  <mkapi-ext-link href=\"/apps/@rx-vdom/doc/latest?nav=/api.CSSAttribute\">CSSAttribute</mkapi-ext-link> .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "CodeView.style",
                    "navPath": "@nav/api/CodeApi.CodeView.style",
                    "code": {
                        "filePath": "src/lib/code-api/code.view.ts",
                        "declaration": "public readonly style = {\n        fontSize: '0.9em',\n    }",
                        "implementation": "",
                        "startLine": 91,
                        "endLine": 92,
                        "references": {
                            "style": "@nav/api/CodeApi.CodeView.style"
                        }
                    }
                },
                {
                    "name": "tag",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The tag of the element, equivalent to the  `tagName`  property of  `HTMLElement` .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "CodeView.tag",
                    "navPath": "@nav/api/CodeApi.CodeView.tag",
                    "code": {
                        "filePath": "src/lib/code-api/code.view.ts",
                        "declaration": "public readonly tag = 'div'",
                        "implementation": "",
                        "startLine": 89,
                        "endLine": 90,
                        "references": {
                            "tag": "@nav/api/CodeApi.CodeView.tag"
                        }
                    }
                },
                {
                    "name": "CssSelector",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Component's class name for CSS query.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "CodeView.CssSelector",
                    "navPath": "@nav/api/CodeApi.CodeView.CssSelector",
                    "code": {
                        "filePath": "src/lib/code-api/code.view.ts",
                        "declaration": "static readonly CssSelector = 'mkdocs-CodeView'",
                        "implementation": "",
                        "startLine": 83,
                        "endLine": 84,
                        "references": {
                            "CssSelector": "@nav/api/CodeApi.CodeView.CssSelector"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/code-api/code.view.ts",
                "declaration": "export class CodeView implements VirtualDOM<'div'>",
                "implementation": "export class CodeView implements VirtualDOM<'div'> {\n    /**\n     * Component's class name for CSS query.\n     */\n    static readonly CssSelector = 'mkdocs-CodeView'\n    public readonly router: Router\n    public readonly code: Code\n    public readonly configuration: Configuration\n    public readonly project: Project\n\n    public readonly tag = 'div'\n    public readonly class = `${CodeView.CssSelector} fv-border-primary rounded`\n    public readonly style = {\n        fontSize: '0.9em',\n    }\n    public readonly children: ChildrenLike\n    public readonly expanded$ = new BehaviorSubject(false)\n    constructor(params: {\n        code: Code\n        parent: Entity\n        router: Router\n        configuration: Configuration\n        project: Project\n    }) {\n        Object.assign(this, params)\n        const declarationView = new DeclarationView({\n            code: this.code,\n            parent: params.parent,\n        })\n        if (this.code.implementation === undefined) {\n            this.children = [declarationView]\n            return\n        }\n        const implementation = this.code.implementation\n        this.children = [\n            declarationView,\n            { tag: 'div', class: 'my-1' },\n            new CodeHeaderView({\n                code: this.code,\n                parent: params.parent,\n                expanded$: this.expanded$,\n                configuration: this.configuration,\n                project: this.project,\n            }),\n            child$({\n                source$: this.expanded$,\n                vdomMap: (expanded) => {\n                    if (!expanded) {\n                        return { tag: 'div' }\n                    }\n                    return {\n                        tag: 'div',\n                        class: 'ms-1 me-1 mt-1 code-api-snippet ',\n                        style: {\n                            fontSize: '0.8em',\n                        },\n                        children: [\n                            Dependencies.parseMd({\n                                src: `\n<code-snippet language=\"javascript\">\n${implementation}\n</code-snippet>`,\n                                router: this.router,\n                            }),\n                        ],\n                    }\n                },\n            }),\n        ]\n    }\n}",
                "startLine": 79,
                "endLine": 150,
                "references": {
                    "CodeView": "@nav/api/CodeApi.CodeView",
                    "Code": "@nav/api/CodeApi.Code",
                    "Configuration": "@nav/api/CodeApi.Configuration",
                    "Entity": "@nav/api/CodeApi.Entity",
                    "Project": "@nav/api/CodeApi.Project",
                    "Router": "@nav/api/MainModule.Router",
                    "ChildrenLike": "/apps/@rx-vdom/doc/latest?nav=/api.ChildrenLike",
                    "BehaviorSubject": "https://www.learnrxjs.io/learn-rxjs/subjects/subject",
                    "VirtualDOM": "/apps/@rx-vdom/doc/latest?nav=/api.VirtualDOM"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "DeclarationView",
            "documentation": {
                "sections": [
                    {
                        "content": "View for a declaration.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "DeclarationView",
            "navPath": "@nav/api/CodeApi.DeclarationView",
            "attributes": [
                {
                    "name": "children",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Children of the element.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "DeclarationView.children",
                    "navPath": "@nav/api/CodeApi.DeclarationView.children",
                    "code": {
                        "filePath": "src/lib/code-api/declaration.view.ts",
                        "declaration": "public readonly children: ChildrenLike",
                        "implementation": "",
                        "startLine": 96,
                        "endLine": 97,
                        "references": {
                            "children": "@nav/api/CodeApi.DeclarationView.children",
                            "ChildrenLike": "/apps/@rx-vdom/doc/latest?nav=/api.ChildrenLike"
                        }
                    }
                },
                {
                    "name": "class",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The class associated with the element, equivalent to the  `className`  property of  `HTMLElement` .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "DeclarationView.class",
                    "navPath": "@nav/api/CodeApi.DeclarationView.class",
                    "code": {
                        "filePath": "src/lib/code-api/declaration.view.ts",
                        "declaration": "public readonly class = `${DeclarationView.CssSelector} mkapi-declaration mkapi-semantic-color p-2 rounded`",
                        "implementation": "",
                        "startLine": 97,
                        "endLine": 98,
                        "references": {
                            "class": "@nav/api/CodeApi.DeclarationView.class"
                        }
                    }
                },
                {
                    "name": "tag",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The tag of the element, equivalent to the  `tagName`  property of  `HTMLElement` .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "DeclarationView.tag",
                    "navPath": "@nav/api/CodeApi.DeclarationView.tag",
                    "code": {
                        "filePath": "src/lib/code-api/declaration.view.ts",
                        "declaration": "public readonly tag = 'div'",
                        "implementation": "",
                        "startLine": 95,
                        "endLine": 96,
                        "references": {
                            "tag": "@nav/api/CodeApi.DeclarationView.tag"
                        }
                    }
                },
                {
                    "name": "CssSelector",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Component's class name for CSS query.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "DeclarationView.CssSelector",
                    "navPath": "@nav/api/CodeApi.DeclarationView.CssSelector",
                    "code": {
                        "filePath": "src/lib/code-api/declaration.view.ts",
                        "declaration": "static readonly CssSelector = 'mkdocs-DeclarationView'",
                        "implementation": "",
                        "startLine": 94,
                        "endLine": 95,
                        "references": {
                            "CssSelector": "@nav/api/CodeApi.DeclarationView.CssSelector"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/code-api/declaration.view.ts",
                "declaration": "export class DeclarationView implements VirtualDOM<'div'>",
                "implementation": "export class DeclarationView implements VirtualDOM<'div'> {\n    /**\n     * Component's class name for CSS query.\n     */\n    static readonly CssSelector = 'mkdocs-DeclarationView'\n    public readonly tag = 'div'\n    public readonly children: ChildrenLike\n    public readonly class = `${DeclarationView.CssSelector} mkapi-declaration mkapi-semantic-color p-2 rounded`\n    constructor({\n        code,\n        parent,\n    }: {\n        code: Pick<Code, 'references' | 'declaration'>\n        parent: Pick<Entity, 'semantic'>\n    }) {\n        this.class += ` mkapi-role-${parent.semantic.role}`\n        const nonNullReferences = Object.entries(code.references).reduce(\n            (acc, [k, v]) => {\n                if (!v) {\n                    return acc\n                }\n                return { ...acc, [k]: v }\n            },\n            {},\n        )\n        const declaration = processDeclaration(\n            code.declaration,\n            nonNullReferences,\n            (k: string, v: string) => `<a target='_blank' href='${v}'>${k}</a>`,\n        )\n\n        this.children = [\n            {\n                tag: 'pre',\n                class: 'py-0 my-0',\n                innerHTML: declaration,\n            },\n        ]\n    }\n}",
                "startLine": 90,
                "endLine": 130,
                "references": {
                    "DeclarationView": "@nav/api/CodeApi.DeclarationView",
                    "Code": "@nav/api/CodeApi.Code",
                    "Entity": "@nav/api/CodeApi.Entity",
                    "Pick": "https://www.typescriptlang.org/docs/handbook/utility-types.html#picktype-keys",
                    "ChildrenLike": "/apps/@rx-vdom/doc/latest?nav=/api.ChildrenLike",
                    "VirtualDOM": "/apps/@rx-vdom/doc/latest?nav=/api.VirtualDOM"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "DocumentationView",
            "documentation": {
                "sections": [
                    {
                        "content": "View for a  <mkapi-api-link nav=\"@nav/api/CodeApi.Documentation\" semantic=\"interface\">Documentation</mkapi-api-link> .",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "DocumentationView",
            "navPath": "@nav/api/CodeApi.DocumentationView",
            "attributes": [
                {
                    "name": "children",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Children of the element.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "DocumentationView.children",
                    "navPath": "@nav/api/CodeApi.DocumentationView.children",
                    "code": {
                        "filePath": "src/lib/code-api/documentation.view.ts",
                        "declaration": "public readonly children: ChildrenLike",
                        "implementation": "",
                        "startLine": 24,
                        "endLine": 25,
                        "references": {
                            "children": "@nav/api/CodeApi.DocumentationView.children",
                            "ChildrenLike": "/apps/@rx-vdom/doc/latest?nav=/api.ChildrenLike"
                        }
                    }
                },
                {
                    "name": "class",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The class associated with the element, equivalent to the  `className`  property of  `HTMLElement` .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "DocumentationView.class",
                    "navPath": "@nav/api/CodeApi.DocumentationView.class",
                    "code": {
                        "filePath": "src/lib/code-api/documentation.view.ts",
                        "declaration": "public readonly class = `${DocumentationView.CssSelector} mkapi-doc`",
                        "implementation": "",
                        "startLine": 23,
                        "endLine": 24,
                        "references": {
                            "class": "@nav/api/CodeApi.DocumentationView.class"
                        }
                    }
                },
                {
                    "name": "tag",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The tag of the element, equivalent to the  `tagName`  property of  `HTMLElement` .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "DocumentationView.tag",
                    "navPath": "@nav/api/CodeApi.DocumentationView.tag",
                    "code": {
                        "filePath": "src/lib/code-api/documentation.view.ts",
                        "declaration": "public readonly tag = 'div'",
                        "implementation": "",
                        "startLine": 22,
                        "endLine": 23,
                        "references": {
                            "tag": "@nav/api/CodeApi.DocumentationView.tag"
                        }
                    }
                },
                {
                    "name": "CssSelector",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Component's class name for CSS query.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "DocumentationView.CssSelector",
                    "navPath": "@nav/api/CodeApi.DocumentationView.CssSelector",
                    "code": {
                        "filePath": "src/lib/code-api/documentation.view.ts",
                        "declaration": "static readonly CssSelector = 'mkdocs-DocumentationView'",
                        "implementation": "",
                        "startLine": 18,
                        "endLine": 19,
                        "references": {
                            "CssSelector": "@nav/api/CodeApi.DocumentationView.CssSelector"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/code-api/documentation.view.ts",
                "declaration": "export class DocumentationView implements VirtualDOM<'div'>",
                "implementation": "export class DocumentationView implements VirtualDOM<'div'> {\n    /**\n     * Component's class name for CSS query.\n     */\n    static readonly CssSelector = 'mkdocs-DocumentationView'\n    public readonly documentation: Documentation\n    public readonly router: Router\n    public readonly configuration: Configuration\n    public readonly tag = 'div'\n    public readonly class = `${DocumentationView.CssSelector} mkapi-doc`\n    public readonly children: ChildrenLike\n    constructor(params: {\n        documentation: Documentation\n        router: Router\n        configuration: Configuration\n    }) {\n        Object.assign(this, params)\n\n        this.children = this.documentation.sections.map((section) => {\n            return new SectionView({\n                section,\n                router: this.router,\n                configuration: this.configuration,\n            })\n        })\n    }\n}",
                "startLine": 14,
                "endLine": 41,
                "references": {
                    "DocumentationView": "@nav/api/CodeApi.DocumentationView",
                    "Configuration": "@nav/api/CodeApi.Configuration",
                    "Documentation": "@nav/api/CodeApi.Documentation",
                    "Router": "@nav/api/MainModule.Router",
                    "ChildrenLike": "/apps/@rx-vdom/doc/latest?nav=/api.ChildrenLike",
                    "VirtualDOM": "/apps/@rx-vdom/doc/latest?nav=/api.VirtualDOM"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "HttpClient",
            "documentation": {
                "sections": [
                    {
                        "content": "Default HTTP client used in  <mkapi-api-link nav=\"@nav/api/CodeApi.codeApiEntryNode\" semantic=\"function\">codeApiEntryNode</mkapi-api-link> .",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "HttpClient",
            "navPath": "@nav/api/CodeApi.HttpClient",
            "attributes": [
                {
                    "name": "configuration",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The configuration, usually forwarded from  <mkapi-api-link nav=\"@nav/api/CodeApi.codeApiEntryNode\" semantic=\"function\">codeApiEntryNode</mkapi-api-link> .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "HttpClient.configuration",
                    "navPath": "@nav/api/CodeApi.HttpClient.configuration",
                    "code": {
                        "filePath": "src/lib/code-api/index.ts",
                        "declaration": "public readonly configuration: Configuration<unknown, unknown>",
                        "implementation": "",
                        "startLine": 81,
                        "endLine": 82,
                        "references": {
                            "configuration": "@nav/api/CodeApi.HttpClient.configuration",
                            "Configuration": "@nav/api/CodeApi.Configuration"
                        }
                    }
                },
                {
                    "name": "project",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The project, usually forwarded from  <mkapi-api-link nav=\"@nav/api/CodeApi.codeApiEntryNode\" semantic=\"function\">codeApiEntryNode</mkapi-api-link> .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "HttpClient.project",
                    "navPath": "@nav/api/CodeApi.HttpClient.project",
                    "code": {
                        "filePath": "src/lib/code-api/index.ts",
                        "declaration": "public readonly project: Project",
                        "implementation": "",
                        "startLine": 85,
                        "endLine": 86,
                        "references": {
                            "project": "@nav/api/CodeApi.HttpClient.project",
                            "Project": "@nav/api/CodeApi.Project"
                        }
                    }
                }
            ],
            "callables": [
                {
                    "name": "constructor",
                    "documentation": {
                        "sections": [
                            {
                                "content": "Initialize a new instance.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            },
                            {
                                "title": "Arguments",
                                "content": "\n*  **configuration**: See  <mkapi-api-link nav=\"@nav/api/CodeApi.HttpClient.configuration\" semantic=\"attribute\">HttpClient.configuration</mkapi-api-link> .\n*  **project**: See  <mkapi-api-link nav=\"@nav/api/CodeApi.HttpClient.project\" semantic=\"attribute\">HttpClient.project</mkapi-api-link> .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "arguments",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "HttpClient.constructor",
                    "navPath": "@nav/api/CodeApi.HttpClient.constructor",
                    "code": {
                        "filePath": "src/lib/code-api/index.ts",
                        "declaration": "constructor(params: {\n    configuration: Configuration<unknown, unknown>\n    project: Project\n})",
                        "implementation": "constructor(params: {\n    configuration: Configuration<unknown, unknown>\n    project: Project\n}) {\n    Object.assign(this, params)\n}",
                        "startLine": 94,
                        "endLine": 100,
                        "references": {
                            "HttpClient": "@nav/api/CodeApi.HttpClient",
                            "Configuration": "@nav/api/CodeApi.Configuration",
                            "Project": "@nav/api/CodeApi.Project"
                        }
                    },
                    "semantic": {
                        "role": "constructor",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    }
                },
                {
                    "name": "fetchModule",
                    "documentation": {
                        "sections": [
                            {
                                "content": "Fetch  <mkapi-api-link nav=\"@nav/api/CodeApi.Module\" semantic=\"type-alias\">Module</mkapi-api-link>  data.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            },
                            {
                                "title": "Arguments",
                                "content": "\n*  **modulePath**: path of the module relative to project's  `docBasePath` .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "arguments",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "HttpClient.fetchModule",
                    "navPath": "@nav/api/CodeApi.HttpClient.fetchModule",
                    "code": {
                        "filePath": "src/lib/code-api/index.ts",
                        "declaration": "fetchModule(modulePath: string): Observable<Module>",
                        "implementation": "fetchModule(modulePath: string): Observable<Module> {\n    const assetPath = `${this.project.docBasePath}/${modulePath}.json`\n    if (assetPath in this.cache) {\n        return of(this.cache[assetPath])\n    }\n    return request$<Module>(new Request(assetPath)).pipe(\n        raiseHTTPErrors(),\n        tap((m) => (this.cache[assetPath] = m)),\n    )\n}",
                        "startLine": 101,
                        "endLine": 111,
                        "references": {
                            "fetchModule": "@nav/api/CodeApi.HttpClient.fetchModule",
                            "Module": "@nav/api/CodeApi.Module",
                            "Observable": "https://rxjs.dev/guide/observable"
                        }
                    },
                    "semantic": {
                        "role": "method",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    }
                },
                {
                    "name": "installCss",
                    "documentation": {
                        "sections": [
                            {
                                "content": "Install required style sheets.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "HttpClient.installCss",
                    "navPath": "@nav/api/CodeApi.HttpClient.installCss",
                    "code": {
                        "filePath": "src/lib/code-api/index.ts",
                        "declaration": "installCss(): Promise<unknown>",
                        "implementation": "installCss(): Promise<unknown> {\n    return install({\n        css: [this.configuration.css(this.project)],\n    })\n}",
                        "startLine": 112,
                        "endLine": 117,
                        "references": {
                            "installCss": "@nav/api/CodeApi.HttpClient.installCss",
                            "Promise": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise"
                        }
                    },
                    "semantic": {
                        "role": "method",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    }
                }
            ],
            "code": {
                "filePath": "src/lib/code-api/index.ts",
                "declaration": "export class HttpClient implements HttpClientTrait",
                "implementation": "export class HttpClient implements HttpClientTrait {\n    public readonly cache: Record<string, Module> = {}\n    /**\n     * The configuration, usually forwarded from {@link codeApiEntryNode}.\n     */\n    public readonly configuration: Configuration<unknown, unknown>\n    /**\n     * The project, usually forwarded from {@link codeApiEntryNode}.\n     */\n    public readonly project: Project\n\n    /**\n     * Initialize a new instance.\n     *\n     * @param params\n     * @param params.configuration See {@link HttpClient.configuration}.\n     * @param params.project See {@link HttpClient.project}.\n     */\n    constructor(params: {\n        configuration: Configuration<unknown, unknown>\n        project: Project\n    }) {\n        Object.assign(this, params)\n    }\n\n    fetchModule(modulePath: string): Observable<Module> {\n        const assetPath = `${this.project.docBasePath}/${modulePath}.json`\n        if (assetPath in this.cache) {\n            return of(this.cache[assetPath])\n        }\n        return request$<Module>(new Request(assetPath)).pipe(\n            raiseHTTPErrors(),\n            tap((m) => (this.cache[assetPath] = m)),\n        )\n    }\n\n    installCss(): Promise<unknown> {\n        return install({\n            css: [this.configuration.css(this.project)],\n        })\n    }\n}",
                "startLine": 76,
                "endLine": 118,
                "references": {
                    "HttpClient": "@nav/api/CodeApi.HttpClient",
                    "Configuration": "@nav/api/CodeApi.Configuration",
                    "Project": "@nav/api/CodeApi.Project",
                    "Module": "@nav/api/CodeApi.Module",
                    "HttpClientTrait.fetchModule": "@nav/api/CodeApi.HttpClientTrait.fetchModule",
                    "HttpClientTrait.installCss": "@nav/api/CodeApi.HttpClientTrait.installCss",
                    "HttpClientTrait": "@nav/api/CodeApi.HttpClientTrait",
                    "Record": "https://www.typescriptlang.org/docs/handbook/utility-types.html#recordkeys-type",
                    "Observable": "https://rxjs.dev/guide/observable",
                    "Promise": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "ModuleView",
            "documentation": {
                "sections": [
                    {
                        "content": "View for a  <mkapi-api-link nav=\"@nav/api/CodeApi.Module\" semantic=\"type-alias\">Module</mkapi-api-link> .\n\nIt includes:\n\n*   <mkapi-api-link nav=\"@nav/api/CodeApi.SummaryView\" semantic=\"class\">SummaryView</mkapi-api-link> ,\n*   <mkapi-api-link nav=\"@nav/api/CodeApi.DocumentationView\" semantic=\"class\">DocumentationView</mkapi-api-link>  for module's documentation,\n*   <mkapi-api-link nav=\"@nav/api/CodeApi.CallableView\" semantic=\"class\">CallableView</mkapi-api-link>  for each module's callables,\n*   <mkapi-api-link nav=\"@nav/api/CodeApi.AttributeView\" semantic=\"class\">AttributeView</mkapi-api-link>  for each module's attributes,\n*   <mkapi-api-link nav=\"@nav/api/CodeApi.TypeView\" semantic=\"class\">TypeView</mkapi-api-link>  for each module's types.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "ModuleView",
            "navPath": "@nav/api/CodeApi.ModuleView",
            "attributes": [
                {
                    "name": "children",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Children of the element.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "ModuleView.children",
                    "navPath": "@nav/api/CodeApi.ModuleView.children",
                    "code": {
                        "filePath": "src/lib/code-api/module.view.ts",
                        "declaration": "public readonly children: ChildrenLike",
                        "implementation": "",
                        "startLine": 36,
                        "endLine": 37,
                        "references": {
                            "children": "@nav/api/CodeApi.ModuleView.children",
                            "ChildrenLike": "/apps/@rx-vdom/doc/latest?nav=/api.ChildrenLike"
                        }
                    }
                },
                {
                    "name": "class",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The class associated with the element, equivalent to the  `className`  property of  `HTMLElement` .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "ModuleView.class",
                    "navPath": "@nav/api/CodeApi.ModuleView.class",
                    "code": {
                        "filePath": "src/lib/code-api/module.view.ts",
                        "declaration": "public readonly class = `${ModuleView.CssSelector} mkapi-module`",
                        "implementation": "",
                        "startLine": 35,
                        "endLine": 36,
                        "references": {
                            "class": "@nav/api/CodeApi.ModuleView.class"
                        }
                    }
                },
                {
                    "name": "tag",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The tag of the element, equivalent to the  `tagName`  property of  `HTMLElement` .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "ModuleView.tag",
                    "navPath": "@nav/api/CodeApi.ModuleView.tag",
                    "code": {
                        "filePath": "src/lib/code-api/module.view.ts",
                        "declaration": "public readonly tag = 'div'",
                        "implementation": "",
                        "startLine": 34,
                        "endLine": 35,
                        "references": {
                            "tag": "@nav/api/CodeApi.ModuleView.tag"
                        }
                    }
                },
                {
                    "name": "CssSelector",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Component's class name for CSS query.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "ModuleView.CssSelector",
                    "navPath": "@nav/api/CodeApi.ModuleView.CssSelector",
                    "code": {
                        "filePath": "src/lib/code-api/module.view.ts",
                        "declaration": "static readonly CssSelector = 'mkdocs-ModuleView'",
                        "implementation": "",
                        "startLine": 29,
                        "endLine": 30,
                        "references": {
                            "CssSelector": "@nav/api/CodeApi.ModuleView.CssSelector"
                        }
                    }
                }
            ],
            "callables": [
                {
                    "name": "constructor",
                    "documentation": {
                        "sections": [
                            {
                                "content": "Create the VirtualDOM.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            },
                            {
                                "title": "Arguments",
                                "content": "\n*  **params**: Arguments\n*  **configuration**: Rendering configuration.\n*  **module**: Model of the module.\n*  **router**: Router of the application.\n*  **ctx**: Execution context used for logging and tracing.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "arguments",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "ModuleView.constructor",
                    "navPath": "@nav/api/CodeApi.ModuleView.constructor",
                    "code": {
                        "filePath": "src/lib/code-api/module.view.ts",
                        "declaration": "constructor(\n    params: {\n        module: Module\n        router: Router\n        project: Project\n        configuration: Configuration<unknown, unknown>\n    },\n    ctx?: ContextTrait,\n)",
                        "implementation": "constructor(\n    params: {\n        module: Module\n        router: Router\n        project: Project\n        configuration: Configuration<unknown, unknown>\n    },\n    ctx?: ContextTrait,\n) {\n    Object.assign(this, params)\n    this.context = ctx\n    const context = this.ctx().start('new ModuleView', ['View', 'CodeApi'])\n    context.info('Display module', this.module)\n    this.class += ` mkapi-role-${this.module.semantic.role}`\n    const getFile = (entity: Entity) => {\n        return entity.code.filePath\n    }\n    const files = [\n        ...new Set(\n            [\n                ...this.module.attributes,\n                ...this.module.callables,\n                ...this.module.types,\n            ].map(getFile),\n        ),\n    ].sort((a: string, b: string) => a.localeCompare(b))\n\n    this.children = [\n        new HeaderView({\n            tag: 'h1',\n            withClass: `doc-module-name doc-${this.module.semantic.role}-name`,\n            doc: this.module,\n            relativeToPath: '',\n        }),\n        separatorView,\n        new SummaryView({\n            target: this.module,\n            router: this.router,\n        }),\n        separatorView,\n        {\n            tag: 'div',\n            children: [\n                new DocumentationView({\n                    documentation: this.module.documentation,\n                    router: this.router,\n                    configuration: this.configuration,\n                }),\n            ],\n        },\n        { tag: 'div', class: 'my-3' },\n        separatorView,\n        ...[...files].map((file): AnyVirtualDOM => {\n            const attributes = this.module.attributes.filter(\n                (a) => getFile(a) === file,\n            )\n            const types = this.module.types.filter(\n                (a) => getFile(a) === file,\n            )\n            const callables = this.module.callables.filter(\n                (a) => getFile(a) === file,\n            )\n            const fileDoc = this.module.files.find((f) => {\n                return f.path === file\n            })\n            return {\n                tag: 'div' as const,\n                children: [\n                    { tag: 'div', class: 'my-2' },\n                    new HeaderView({\n                        tag: 'h2',\n                        withClass: 'doc-file-name fas fa-file mt-3 mb-2',\n                        doc: {\n                            name: file.split('/').slice(-1)[0],\n                            semantic: undefined,\n                            path: file.split('/').slice(-1)[0],\n                        },\n                        relativeToPath: module.path,\n                    }),\n                    fileDoc?.documentation\n                        ? new DocumentationView({\n                              documentation: fileDoc.documentation,\n                              router: this.router,\n                              configuration: this.configuration,\n                          })\n                        : undefined,\n                    {\n                        tag: 'div',\n                        children: attributes\n                            .map((attribute) => [\n                                new AttributeView({\n                                    fromModule: this.module,\n                                    attribute,\n                                    router: this.router,\n                                    configuration: this.configuration,\n                                    project: this.project,\n                                }),\n                                ySeparatorView5,\n                            ])\n                            .flat(),\n                    },\n                    {\n                        tag: 'div',\n                        children: callables\n                            .map((callable) => [\n                                new CallableView({\n                                    callable,\n                                    router: this.router,\n                                    configuration: this.configuration,\n                                    project: this.project,\n                                    fromModule: this.module,\n                                }),\n                                ySeparatorView5,\n                            ])\n                            .flat(),\n                    },\n                    {\n                        tag: 'div',\n                        children: types\n                            .map((type) => [\n                                new TypeView({\n                                    fromModule: this.module,\n                                    type,\n                                    router: this.router,\n                                    configuration: this.configuration,\n                                    project: this.project,\n                                }),\n                                ySeparatorView5,\n                            ])\n                            .flat(),\n                    },\n                ],\n            }\n        }),\n    ]\n    context.exit()\n}",
                        "startLine": 48,
                        "endLine": 185,
                        "references": {
                            "ModuleView": "@nav/api/CodeApi.ModuleView",
                            "Configuration": "@nav/api/CodeApi.Configuration",
                            "Module": "@nav/api/CodeApi.Module",
                            "Project": "@nav/api/CodeApi.Project",
                            "Router": "@nav/api/MainModule.Router",
                            "ContextTrait": "@nav/api/MainModule.ContextTrait"
                        }
                    },
                    "semantic": {
                        "role": "constructor",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    }
                }
            ],
            "code": {
                "filePath": "src/lib/code-api/module.view.ts",
                "declaration": "export class ModuleView implements VirtualDOM<'div'>",
                "implementation": "export class ModuleView implements VirtualDOM<'div'> {\n    /**\n     * Component's class name for CSS query.\n     */\n    static readonly CssSelector = 'mkdocs-ModuleView'\n    public readonly module: Module\n    public readonly router: Router\n    public readonly configuration: Configuration\n    public readonly project: Project\n    public readonly tag = 'div'\n    public readonly class = `${ModuleView.CssSelector} mkapi-module`\n    public readonly children: ChildrenLike\n    public readonly context?: ContextTrait\n\n    /**\n     * Create the VirtualDOM.\n     *\n     * @param params Arguments\n     * @param params.module Model of the module.\n     * @param params.router Router of the application.\n     * @param params.configuration Rendering configuration.\n     * @param ctx Execution context used for logging and tracing.\n     */\n    constructor(\n        params: {\n            module: Module\n            router: Router\n            project: Project\n            configuration: Configuration<unknown, unknown>\n        },\n        ctx?: ContextTrait,\n    ) {\n        Object.assign(this, params)\n        this.context = ctx\n        const context = this.ctx().start('new ModuleView', ['View', 'CodeApi'])\n        context.info('Display module', this.module)\n        this.class += ` mkapi-role-${this.module.semantic.role}`\n        const getFile = (entity: Entity) => {\n            return entity.code.filePath\n        }\n        const files = [\n            ...new Set(\n                [\n                    ...this.module.attributes,\n                    ...this.module.callables,\n                    ...this.module.types,\n                ].map(getFile),\n            ),\n        ].sort((a: string, b: string) => a.localeCompare(b))\n\n        this.children = [\n            new HeaderView({\n                tag: 'h1',\n                withClass: `doc-module-name doc-${this.module.semantic.role}-name`,\n                doc: this.module,\n                relativeToPath: '',\n            }),\n            separatorView,\n            new SummaryView({\n                target: this.module,\n                router: this.router,\n            }),\n            separatorView,\n            {\n                tag: 'div',\n                children: [\n                    new DocumentationView({\n                        documentation: this.module.documentation,\n                        router: this.router,\n                        configuration: this.configuration,\n                    }),\n                ],\n            },\n            { tag: 'div', class: 'my-3' },\n            separatorView,\n            ...[...files].map((file): AnyVirtualDOM => {\n                const attributes = this.module.attributes.filter(\n                    (a) => getFile(a) === file,\n                )\n                const types = this.module.types.filter(\n                    (a) => getFile(a) === file,\n                )\n                const callables = this.module.callables.filter(\n                    (a) => getFile(a) === file,\n                )\n                const fileDoc = this.module.files.find((f) => {\n                    return f.path === file\n                })\n                return {\n                    tag: 'div' as const,\n                    children: [\n                        { tag: 'div', class: 'my-2' },\n                        new HeaderView({\n                            tag: 'h2',\n                            withClass: 'doc-file-name fas fa-file mt-3 mb-2',\n                            doc: {\n                                name: file.split('/').slice(-1)[0],\n                                semantic: undefined,\n                                path: file.split('/').slice(-1)[0],\n                            },\n                            relativeToPath: module.path,\n                        }),\n                        fileDoc?.documentation\n                            ? new DocumentationView({\n                                  documentation: fileDoc.documentation,\n                                  router: this.router,\n                                  configuration: this.configuration,\n                              })\n                            : undefined,\n                        {\n                            tag: 'div',\n                            children: attributes\n                                .map((attribute) => [\n                                    new AttributeView({\n                                        fromModule: this.module,\n                                        attribute,\n                                        router: this.router,\n                                        configuration: this.configuration,\n                                        project: this.project,\n                                    }),\n                                    ySeparatorView5,\n                                ])\n                                .flat(),\n                        },\n                        {\n                            tag: 'div',\n                            children: callables\n                                .map((callable) => [\n                                    new CallableView({\n                                        callable,\n                                        router: this.router,\n                                        configuration: this.configuration,\n                                        project: this.project,\n                                        fromModule: this.module,\n                                    }),\n                                    ySeparatorView5,\n                                ])\n                                .flat(),\n                        },\n                        {\n                            tag: 'div',\n                            children: types\n                                .map((type) => [\n                                    new TypeView({\n                                        fromModule: this.module,\n                                        type,\n                                        router: this.router,\n                                        configuration: this.configuration,\n                                        project: this.project,\n                                    }),\n                                    ySeparatorView5,\n                                ])\n                                .flat(),\n                        },\n                    ],\n                }\n            }),\n        ]\n        context.exit()\n    }\n\n    ctx(ctx?: ContextTrait) {\n        if (ctx) {\n            return ctx\n        }\n        return this.context ?? new NoContext()\n    }\n}",
                "startLine": 25,
                "endLine": 193,
                "references": {
                    "ModuleView": "@nav/api/CodeApi.ModuleView",
                    "Configuration": "@nav/api/CodeApi.Configuration",
                    "Module": "@nav/api/CodeApi.Module",
                    "Project": "@nav/api/CodeApi.Project",
                    "Router": "@nav/api/MainModule.Router",
                    "ContextTrait": "@nav/api/MainModule.ContextTrait",
                    "ChildrenLike": "/apps/@rx-vdom/doc/latest?nav=/api.ChildrenLike",
                    "VirtualDOM": "/apps/@rx-vdom/doc/latest?nav=/api.VirtualDOM"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "SummaryHeader",
            "documentation": {
                "sections": [
                    {
                        "content": "Header view of  <mkapi-api-link nav=\"@nav/api/CodeApi.SummaryView\" semantic=\"class\">SummaryView</mkapi-api-link> .",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "SummaryHeader",
            "navPath": "@nav/api/CodeApi.SummaryHeader",
            "attributes": [
                {
                    "name": "children",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Children of the element.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "SummaryHeader.children",
                    "navPath": "@nav/api/CodeApi.SummaryHeader.children",
                    "code": {
                        "filePath": "src/lib/code-api/summary.view.ts",
                        "declaration": "public readonly children: ChildrenLike",
                        "implementation": "",
                        "startLine": 98,
                        "endLine": 99,
                        "references": {
                            "children": "@nav/api/CodeApi.SummaryHeader.children",
                            "ChildrenLike": "/apps/@rx-vdom/doc/latest?nav=/api.ChildrenLike"
                        }
                    }
                },
                {
                    "name": "class",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The class associated with the element, equivalent to the  `className`  property of  `HTMLElement` .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "SummaryHeader.class",
                    "navPath": "@nav/api/CodeApi.SummaryHeader.class",
                    "code": {
                        "filePath": "src/lib/code-api/summary.view.ts",
                        "declaration": "public readonly class = `${SummaryHeader.CssSelector} mkdocs-bg-info border d-flex align-items-center p-1`",
                        "implementation": "",
                        "startLine": 94,
                        "endLine": 95,
                        "references": {
                            "class": "@nav/api/CodeApi.SummaryHeader.class"
                        }
                    }
                },
                {
                    "name": "style",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The style associated with the element. Typically, for a static value:\n ```typescript\n{\n     tag: 'div',\n     style: {\n         backgroundColor: 'blue'\n     }\n}\n``` \nFor more details on hyphenated properties, see  <mkapi-ext-link href=\"/apps/@rx-vdom/doc/latest?nav=/api.CSSAttribute\">CSSAttribute</mkapi-ext-link> .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "SummaryHeader.style",
                    "navPath": "@nav/api/CodeApi.SummaryHeader.style",
                    "code": {
                        "filePath": "src/lib/code-api/summary.view.ts",
                        "declaration": "public readonly style = {\n        fontWeight: 'bolder' as const,\n    }",
                        "implementation": "",
                        "startLine": 95,
                        "endLine": 96,
                        "references": {
                            "style": "@nav/api/CodeApi.SummaryHeader.style"
                        }
                    }
                },
                {
                    "name": "tag",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The tag of the element, equivalent to the  `tagName`  property of  `HTMLElement` .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "SummaryHeader.tag",
                    "navPath": "@nav/api/CodeApi.SummaryHeader.tag",
                    "code": {
                        "filePath": "src/lib/code-api/summary.view.ts",
                        "declaration": "public readonly tag = 'div'",
                        "implementation": "",
                        "startLine": 93,
                        "endLine": 94,
                        "references": {
                            "tag": "@nav/api/CodeApi.SummaryHeader.tag"
                        }
                    }
                },
                {
                    "name": "CssSelector",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Component's class name for CSS query.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "SummaryHeader.CssSelector",
                    "navPath": "@nav/api/CodeApi.SummaryHeader.CssSelector",
                    "code": {
                        "filePath": "src/lib/code-api/summary.view.ts",
                        "declaration": "static readonly CssSelector = 'SummaryHeader'",
                        "implementation": "",
                        "startLine": 91,
                        "endLine": 92,
                        "references": {
                            "CssSelector": "@nav/api/CodeApi.SummaryHeader.CssSelector"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/code-api/summary.view.ts",
                "declaration": "export class SummaryHeader implements VirtualDOM<'div'>",
                "implementation": "export class SummaryHeader implements VirtualDOM<'div'> {\n    /**\n     * Component's class name for CSS query.\n     */\n    static readonly CssSelector = 'SummaryHeader'\n\n    public readonly tag = 'div'\n    public readonly class = `${SummaryHeader.CssSelector} mkdocs-bg-info border d-flex align-items-center p-1`\n    public readonly style = {\n        fontWeight: 'bolder' as const,\n    }\n    public readonly children: ChildrenLike\n\n    constructor({ expanded$ }: { expanded$: BehaviorSubject<boolean> }) {\n        this.children = [\n            {\n                tag: 'i',\n                class: 'fas fa-eye',\n            },\n            { tag: 'div', class: 'mx-2' },\n            { tag: 'div', innerText: 'Symbols' },\n            { tag: 'div', class: 'flex-grow-1' },\n            {\n                tag: 'button',\n                class: {\n                    source$: expanded$,\n                    vdomMap: (expanded) =>\n                        expanded ? 'fa-chevron-down' : 'fa-chevron-right',\n                    wrapper: (d) => `btn btn-sm btn-light fas ${d}`,\n                },\n                onclick: () => {\n                    expanded$.next(!expanded$.value)\n                },\n            },\n        ]\n    }\n}",
                "startLine": 87,
                "endLine": 124,
                "references": {
                    "SummaryHeader": "@nav/api/CodeApi.SummaryHeader",
                    "BehaviorSubject": "https://www.learnrxjs.io/learn-rxjs/subjects/subject",
                    "ChildrenLike": "/apps/@rx-vdom/doc/latest?nav=/api.ChildrenLike",
                    "VirtualDOM": "/apps/@rx-vdom/doc/latest?nav=/api.VirtualDOM"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "SummaryLink",
            "documentation": {
                "sections": [
                    {
                        "content": "A link (to a  <mkapi-api-link nav=\"@nav/api/CodeApi.ChildModule\" semantic=\"type-alias\">ChildModule</mkapi-api-link> ,  <mkapi-api-link nav=\"@nav/api/CodeApi.Type\" semantic=\"interface\">Type</mkapi-api-link> ,  <mkapi-api-link nav=\"@nav/api/CodeApi.Attribute\" semantic=\"type-alias\">Attribute</mkapi-api-link>  or  <mkapi-api-link nav=\"@nav/api/CodeApi.Callable\" semantic=\"type-alias\">Callable</mkapi-api-link> ) in  <mkapi-api-link nav=\"@nav/api/CodeApi.SummaryView\" semantic=\"class\">SummaryView</mkapi-api-link> .",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "SummaryLink",
            "navPath": "@nav/api/CodeApi.SummaryLink",
            "attributes": [
                {
                    "name": "children",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Children of the element.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "SummaryLink.children",
                    "navPath": "@nav/api/CodeApi.SummaryLink.children",
                    "code": {
                        "filePath": "src/lib/code-api/summary.view.ts",
                        "declaration": "public readonly children: ChildrenLike",
                        "implementation": "",
                        "startLine": 182,
                        "endLine": 183,
                        "references": {
                            "children": "@nav/api/CodeApi.SummaryLink.children",
                            "ChildrenLike": "/apps/@rx-vdom/doc/latest?nav=/api.ChildrenLike"
                        }
                    }
                },
                {
                    "name": "class",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The class associated with the element, equivalent to the  `className`  property of  `HTMLElement` .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "SummaryLink.class",
                    "navPath": "@nav/api/CodeApi.SummaryLink.class",
                    "code": {
                        "filePath": "src/lib/code-api/summary.view.ts",
                        "declaration": "public readonly class = `${SummaryLink.CssSelector} m-1`",
                        "implementation": "",
                        "startLine": 177,
                        "endLine": 178,
                        "references": {
                            "class": "@nav/api/CodeApi.SummaryLink.class"
                        }
                    }
                },
                {
                    "name": "href",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Returns the hyperlink's URL.\n\nCan be set, to change the URL.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/href)",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "SummaryLink.href",
                    "navPath": "@nav/api/CodeApi.SummaryLink.href",
                    "code": {
                        "filePath": "src/lib/code-api/summary.view.ts",
                        "declaration": "public readonly href: string",
                        "implementation": "",
                        "startLine": 183,
                        "endLine": 184,
                        "references": {
                            "href": "@nav/api/CodeApi.SummaryLink.href"
                        }
                    }
                },
                {
                    "name": "innerText",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/innerText)",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "SummaryLink.innerText",
                    "navPath": "@nav/api/CodeApi.SummaryLink.innerText",
                    "code": {
                        "filePath": "src/lib/code-api/summary.view.ts",
                        "declaration": "public readonly innerText: string",
                        "implementation": "",
                        "startLine": 181,
                        "endLine": 182,
                        "references": {
                            "innerText": "@nav/api/CodeApi.SummaryLink.innerText"
                        }
                    }
                },
                {
                    "name": "onclick",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Fires when the user clicks the left mouse button on the object",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "SummaryLink.onclick",
                    "navPath": "@nav/api/CodeApi.SummaryLink.onclick",
                    "code": {
                        "filePath": "src/lib/code-api/summary.view.ts",
                        "declaration": "public readonly onclick: (ev: MouseEvent) => void",
                        "implementation": "",
                        "startLine": 184,
                        "endLine": 185,
                        "references": {
                            "onclick": "@nav/api/CodeApi.SummaryLink.onclick",
                            "MouseEvent": "https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent"
                        }
                    }
                },
                {
                    "name": "style",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The style associated with the element. Typically, for a static value:\n ```typescript\n{\n     tag: 'div',\n     style: {\n         backgroundColor: 'blue'\n     }\n}\n``` \nFor more details on hyphenated properties, see  <mkapi-ext-link href=\"/apps/@rx-vdom/doc/latest?nav=/api.CSSAttribute\">CSSAttribute</mkapi-ext-link> .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "SummaryLink.style",
                    "navPath": "@nav/api/CodeApi.SummaryLink.style",
                    "code": {
                        "filePath": "src/lib/code-api/summary.view.ts",
                        "declaration": "public readonly style = {\n        width: 'fit-content',\n    }",
                        "implementation": "",
                        "startLine": 178,
                        "endLine": 179,
                        "references": {
                            "style": "@nav/api/CodeApi.SummaryLink.style"
                        }
                    }
                },
                {
                    "name": "tag",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The tag of the element, equivalent to the  `tagName`  property of  `HTMLElement` .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "SummaryLink.tag",
                    "navPath": "@nav/api/CodeApi.SummaryLink.tag",
                    "code": {
                        "filePath": "src/lib/code-api/summary.view.ts",
                        "declaration": "public readonly tag = 'a'",
                        "implementation": "",
                        "startLine": 176,
                        "endLine": 177,
                        "references": {
                            "tag": "@nav/api/CodeApi.SummaryLink.tag"
                        }
                    }
                },
                {
                    "name": "CssSelector",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Component's class name for CSS query.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "SummaryLink.CssSelector",
                    "navPath": "@nav/api/CodeApi.SummaryLink.CssSelector",
                    "code": {
                        "filePath": "src/lib/code-api/summary.view.ts",
                        "declaration": "static readonly CssSelector = 'SummaryLink'",
                        "implementation": "",
                        "startLine": 175,
                        "endLine": 176,
                        "references": {
                            "CssSelector": "@nav/api/CodeApi.SummaryLink.CssSelector"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/code-api/summary.view.ts",
                "declaration": "export class SummaryLink implements VirtualDOM<'a'>",
                "implementation": "export class SummaryLink implements VirtualDOM<'a'> {\n    /**\n     * Component's class name for CSS query.\n     */\n    static readonly CssSelector = 'SummaryLink'\n    public readonly tag = 'a'\n    public readonly class = `${SummaryLink.CssSelector} m-1`\n    public readonly style = {\n        width: 'fit-content',\n    }\n    public readonly innerText: string\n    public readonly children: ChildrenLike\n    public readonly href: string\n    public readonly onclick: (ev: MouseEvent) => void\n\n    constructor(params: { target: EntityForSummary; router: Router }) {\n        this.href = params.target.navPath.replace('@nav', '')\n        const path = this.href.split('.')[0]\n        const sectionId = this.href.split('.').slice(1).join('.')\n        this.innerText = params.target.name\n        this.onclick = (ev: MouseEvent) => {\n            ev.preventDefault()\n            params.router.fireNavigateTo({\n                path,\n                sectionId,\n                issuer: 'link',\n            })\n        }\n    }\n}",
                "startLine": 171,
                "endLine": 201,
                "references": {
                    "SummaryLink": "@nav/api/CodeApi.SummaryLink",
                    "Router": "@nav/api/MainModule.Router",
                    "EntityForSummary": "@nav/api/CodeApi.EntityForSummary",
                    "ChildrenLike": "/apps/@rx-vdom/doc/latest?nav=/api.ChildrenLike",
                    "MouseEvent": "https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent",
                    "VirtualDOM": "/apps/@rx-vdom/doc/latest?nav=/api.VirtualDOM"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "SummaryLinksSection",
            "documentation": {
                "sections": [
                    {
                        "content": "A cards' section of  <mkapi-api-link nav=\"@nav/api/CodeApi.SummaryView\" semantic=\"class\">SummaryView</mkapi-api-link>  regrouping items with same semantic.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "SummaryLinksSection",
            "navPath": "@nav/api/CodeApi.SummaryLinksSection",
            "attributes": [
                {
                    "name": "children",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Children of the element.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "SummaryLinksSection.children",
                    "navPath": "@nav/api/CodeApi.SummaryLinksSection.children",
                    "code": {
                        "filePath": "src/lib/code-api/summary.view.ts",
                        "declaration": "public readonly children: ChildrenLike",
                        "implementation": "",
                        "startLine": 134,
                        "endLine": 135,
                        "references": {
                            "children": "@nav/api/CodeApi.SummaryLinksSection.children",
                            "ChildrenLike": "/apps/@rx-vdom/doc/latest?nav=/api.ChildrenLike"
                        }
                    }
                },
                {
                    "name": "class",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The class associated with the element, equivalent to the  `className`  property of  `HTMLElement` .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "SummaryLinksSection.class",
                    "navPath": "@nav/api/CodeApi.SummaryLinksSection.class",
                    "code": {
                        "filePath": "src/lib/code-api/summary.view.ts",
                        "declaration": "public readonly class = `${SummaryLinksSection.CssSelector} my-2`",
                        "implementation": "",
                        "startLine": 133,
                        "endLine": 134,
                        "references": {
                            "class": "@nav/api/CodeApi.SummaryLinksSection.class"
                        }
                    }
                },
                {
                    "name": "tag",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The tag of the element, equivalent to the  `tagName`  property of  `HTMLElement` .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "SummaryLinksSection.tag",
                    "navPath": "@nav/api/CodeApi.SummaryLinksSection.tag",
                    "code": {
                        "filePath": "src/lib/code-api/summary.view.ts",
                        "declaration": "public readonly tag = 'div'",
                        "implementation": "",
                        "startLine": 132,
                        "endLine": 133,
                        "references": {
                            "tag": "@nav/api/CodeApi.SummaryLinksSection.tag"
                        }
                    }
                },
                {
                    "name": "CssSelector",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Component's class name for CSS query.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "SummaryLinksSection.CssSelector",
                    "navPath": "@nav/api/CodeApi.SummaryLinksSection.CssSelector",
                    "code": {
                        "filePath": "src/lib/code-api/summary.view.ts",
                        "declaration": "static readonly CssSelector = 'SummaryLinksSection'",
                        "implementation": "",
                        "startLine": 131,
                        "endLine": 132,
                        "references": {
                            "CssSelector": "@nav/api/CodeApi.SummaryLinksSection.CssSelector"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/code-api/summary.view.ts",
                "declaration": "export class SummaryLinksSection implements VirtualDOM<'div'>",
                "implementation": "export class SummaryLinksSection implements VirtualDOM<'div'> {\n    /**\n     * Component's class name for CSS query.\n     */\n    static readonly CssSelector = 'SummaryLinksSection'\n    public readonly tag = 'div'\n    public readonly class = `${SummaryLinksSection.CssSelector} my-2`\n    public readonly children: ChildrenLike\n\n    constructor(params: {\n        title: string\n        targets: EntityForSummary[]\n        router: Router\n    }) {\n        if (params.targets.length === 0) {\n            return\n        }\n        this.children = [\n            {\n                tag: 'div',\n                class: `mkapi-semantic-flag mkapi-role-${params.targets[0].semantic.role} mt-2`,\n                innerText: params.title,\n                style: {\n                    fontWeight: 'bolder',\n                },\n            },\n            {\n                tag: 'div',\n                class: 'd-flex flex-wrap ps-2',\n                children: params.targets.map(\n                    (target) =>\n                        new SummaryLink({\n                            target,\n                            router: params.router,\n                        }),\n                ),\n            },\n        ]\n    }\n}",
                "startLine": 127,
                "endLine": 167,
                "references": {
                    "SummaryLinksSection": "@nav/api/CodeApi.SummaryLinksSection",
                    "Router": "@nav/api/MainModule.Router",
                    "EntityForSummary": "@nav/api/CodeApi.EntityForSummary",
                    "ChildrenLike": "/apps/@rx-vdom/doc/latest?nav=/api.ChildrenLike",
                    "VirtualDOM": "/apps/@rx-vdom/doc/latest?nav=/api.VirtualDOM"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "SummaryView",
            "documentation": {
                "sections": [
                    {
                        "content": "Summary view for  <mkapi-api-link nav=\"@nav/api/CodeApi.Module\" semantic=\"type-alias\">Module</mkapi-api-link>  and  <mkapi-api-link nav=\"@nav/api/CodeApi.Type\" semantic=\"interface\">Type</mkapi-api-link> .",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "SummaryView",
            "navPath": "@nav/api/CodeApi.SummaryView",
            "attributes": [
                {
                    "name": "children",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Children of the element.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "SummaryView.children",
                    "navPath": "@nav/api/CodeApi.SummaryView.children",
                    "code": {
                        "filePath": "src/lib/code-api/summary.view.ts",
                        "declaration": "public readonly children: ChildrenLike",
                        "implementation": "",
                        "startLine": 29,
                        "endLine": 30,
                        "references": {
                            "children": "@nav/api/CodeApi.SummaryView.children",
                            "ChildrenLike": "/apps/@rx-vdom/doc/latest?nav=/api.ChildrenLike"
                        }
                    }
                },
                {
                    "name": "class",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The class associated with the element, equivalent to the  `className`  property of  `HTMLElement` .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "SummaryView.class",
                    "navPath": "@nav/api/CodeApi.SummaryView.class",
                    "code": {
                        "filePath": "src/lib/code-api/summary.view.ts",
                        "declaration": "public readonly class: string = `${SummaryView.CssSelector} border rounded mkdocs-border-info`",
                        "implementation": "",
                        "startLine": 28,
                        "endLine": 29,
                        "references": {
                            "class": "@nav/api/CodeApi.SummaryView.class"
                        }
                    }
                },
                {
                    "name": "tag",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The tag of the element, equivalent to the  `tagName`  property of  `HTMLElement` .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "SummaryView.tag",
                    "navPath": "@nav/api/CodeApi.SummaryView.tag",
                    "code": {
                        "filePath": "src/lib/code-api/summary.view.ts",
                        "declaration": "public readonly tag = 'div'",
                        "implementation": "",
                        "startLine": 27,
                        "endLine": 28,
                        "references": {
                            "tag": "@nav/api/CodeApi.SummaryView.tag"
                        }
                    }
                },
                {
                    "name": "CssSelector",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Component's class name for CSS query.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "SummaryView.CssSelector",
                    "navPath": "@nav/api/CodeApi.SummaryView.CssSelector",
                    "code": {
                        "filePath": "src/lib/code-api/summary.view.ts",
                        "declaration": "static readonly CssSelector = 'mkdocs-SummaryView'",
                        "implementation": "",
                        "startLine": 26,
                        "endLine": 27,
                        "references": {
                            "CssSelector": "@nav/api/CodeApi.SummaryView.CssSelector"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/code-api/summary.view.ts",
                "declaration": "export class SummaryView implements VirtualDOM<'div'>",
                "implementation": "export class SummaryView implements VirtualDOM<'div'> {\n    /**\n     * Component's class name for CSS query.\n     */\n    static readonly CssSelector = 'mkdocs-SummaryView'\n    public readonly tag = 'div'\n    public readonly class: string = `${SummaryView.CssSelector} border rounded mkdocs-border-info`\n    public readonly children: ChildrenLike\n    public readonly expanded$ = new BehaviorSubject(false)\n\n    /**\n     *\n     * @param params\n     * @param params.target The target {@link Module} or {@link Type}.\n     * @param params.router The router instance.\n     */\n    constructor(params: { target: Module | Type; router: Router }) {\n        const attributes = params.target.attributes\n        const callables = params.target.callables\n        const modules = 'types' in params.target ? params.target.children : []\n        const types = 'types' in params.target ? params.target.types : []\n        const targets = [...modules, ...attributes, ...callables, ...types]\n        if (targets.length === 0) {\n            this.class = ''\n            return\n        }\n        const sections = targets.reduce(\n            (acc: Record<string, EntityForSummary[]>, e) => {\n                const sem = e.semantic.role\n                if (!(sem in acc) || !('push' in acc[sem])) {\n                    acc[sem] = []\n                }\n                acc[sem].push(e)\n                return acc\n            },\n            {},\n        )\n\n        this.children = [\n            new SummaryHeader({ expanded$: this.expanded$ }),\n            {\n                tag: 'div',\n                class: 'border-start ps-2',\n                children: {\n                    policy: 'replace',\n                    source$: this.expanded$,\n                    vdomMap: (expanded) =>\n                        expanded\n                            ? Object.entries(sections).map(([k, v]) => {\n                                  return new SummaryLinksSection({\n                                      title: k,\n                                      targets: v,\n                                      router: params.router,\n                                  })\n                              })\n                            : [],\n                },\n            },\n        ]\n    }\n}",
                "startLine": 22,
                "endLine": 83,
                "references": {
                    "SummaryView": "@nav/api/CodeApi.SummaryView",
                    "Router": "@nav/api/MainModule.Router",
                    "Type": "@nav/api/CodeApi.Type",
                    "Module": "@nav/api/CodeApi.Module",
                    "ChildrenLike": "/apps/@rx-vdom/doc/latest?nav=/api.ChildrenLike",
                    "BehaviorSubject": "https://www.learnrxjs.io/learn-rxjs/subjects/subject",
                    "VirtualDOM": "/apps/@rx-vdom/doc/latest?nav=/api.VirtualDOM"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "TypeView",
            "documentation": {
                "sections": [
                    {
                        "content": "View for a  <mkapi-api-link nav=\"@nav/api/CodeApi.Type\" semantic=\"interface\">Type</mkapi-api-link> .",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "TypeView",
            "navPath": "@nav/api/CodeApi.TypeView",
            "attributes": [
                {
                    "name": "children",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Children of the element.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "TypeView.children",
                    "navPath": "@nav/api/CodeApi.TypeView.children",
                    "code": {
                        "filePath": "src/lib/code-api/type.view.ts",
                        "declaration": "public readonly children: ChildrenLike",
                        "implementation": "",
                        "startLine": 27,
                        "endLine": 28,
                        "references": {
                            "children": "@nav/api/CodeApi.TypeView.children",
                            "ChildrenLike": "/apps/@rx-vdom/doc/latest?nav=/api.ChildrenLike"
                        }
                    }
                },
                {
                    "name": "class",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The class associated with the element, equivalent to the  `className`  property of  `HTMLElement` .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "TypeView.class",
                    "navPath": "@nav/api/CodeApi.TypeView.class",
                    "code": {
                        "filePath": "src/lib/code-api/type.view.ts",
                        "declaration": "public readonly class = `${TypeView.CssSelector} mkapi-type border-start border-bottom ps-2 mkapi-semantic-border-color`",
                        "implementation": "",
                        "startLine": 26,
                        "endLine": 27,
                        "references": {
                            "class": "@nav/api/CodeApi.TypeView.class"
                        }
                    }
                },
                {
                    "name": "tag",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The tag of the element, equivalent to the  `tagName`  property of  `HTMLElement` .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "TypeView.tag",
                    "navPath": "@nav/api/CodeApi.TypeView.tag",
                    "code": {
                        "filePath": "src/lib/code-api/type.view.ts",
                        "declaration": "public readonly tag = 'div'",
                        "implementation": "",
                        "startLine": 25,
                        "endLine": 26,
                        "references": {
                            "tag": "@nav/api/CodeApi.TypeView.tag"
                        }
                    }
                },
                {
                    "name": "CssSelector",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Component's class name for CSS query.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "TypeView.CssSelector",
                    "navPath": "@nav/api/CodeApi.TypeView.CssSelector",
                    "code": {
                        "filePath": "src/lib/code-api/type.view.ts",
                        "declaration": "static readonly CssSelector = 'mkdocs-TypeView'",
                        "implementation": "",
                        "startLine": 19,
                        "endLine": 20,
                        "references": {
                            "CssSelector": "@nav/api/CodeApi.TypeView.CssSelector"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/code-api/type.view.ts",
                "declaration": "export class TypeView implements VirtualDOM<'div'>",
                "implementation": "export class TypeView implements VirtualDOM<'div'> {\n    /**\n     * Component's class name for CSS query.\n     */\n    static readonly CssSelector = 'mkdocs-TypeView'\n    public readonly fromModule: Module\n    public readonly type: Type\n    public readonly router: Router\n    public readonly configuration: Configuration\n    public readonly project: Project\n    public readonly tag = 'div'\n    public readonly class = `${TypeView.CssSelector} mkapi-type border-start border-bottom ps-2 mkapi-semantic-border-color`\n    public readonly children: ChildrenLike\n    constructor(params: {\n        fromModule: Module\n        type: Type\n        router: Router\n        configuration: Configuration\n        project: Project\n    }) {\n        Object.assign(this, params)\n        this.class += ` mkapi-role-${this.type.semantic.role}`\n        this.children = [\n            new HeaderView({\n                tag: 'h3',\n                withClass: `doc-${this.type.semantic.role}-name`,\n                doc: this.type,\n                relativeToPath: this.fromModule.path,\n            }),\n            separatorView,\n            new CodeView({\n                code: this.type.code,\n                router: this.router,\n                configuration: this.configuration,\n                parent: this.type,\n                project: this.project,\n            }),\n            separatorView,\n            new SummaryView({\n                target: this.type,\n                router: this.router,\n            }),\n            { tag: 'div', class: 'mt-3' },\n            new DocumentationView({\n                documentation: this.type.documentation,\n                router: this.router,\n                configuration: this.configuration,\n            }),\n            ...this.type.attributes.map((attr) => {\n                return {\n                    tag: 'div' as const,\n                    class: 'my-3',\n                    children: [\n                        new AttributeView({\n                            attribute: attr,\n                            router: this.router,\n                            configuration: this.configuration,\n                            parent: this.type,\n                            fromModule: this.fromModule,\n                            project: this.project,\n                        }),\n                    ],\n                }\n            }),\n            ...this.type.callables.map((callable) => {\n                return {\n                    tag: 'div' as const,\n                    class: 'my-3',\n                    children: [\n                        new CallableView({\n                            callable,\n                            router: this.router,\n                            configuration: this.configuration,\n                            parent: this.type,\n                            project: this.project,\n                            fromModule: this.fromModule,\n                        }),\n                    ],\n                }\n            }),\n        ]\n    }\n}",
                "startLine": 15,
                "endLine": 98,
                "references": {
                    "TypeView": "@nav/api/CodeApi.TypeView",
                    "Configuration": "@nav/api/CodeApi.Configuration",
                    "Module": "@nav/api/CodeApi.Module",
                    "Project": "@nav/api/CodeApi.Project",
                    "Router": "@nav/api/MainModule.Router",
                    "Type": "@nav/api/CodeApi.Type",
                    "ChildrenLike": "/apps/@rx-vdom/doc/latest?nav=/api.ChildrenLike",
                    "VirtualDOM": "/apps/@rx-vdom/doc/latest?nav=/api.VirtualDOM"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "Code",
            "documentation": {
                "sections": [
                    {
                        "content": "Entity code's description.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "Code",
            "navPath": "@nav/api/CodeApi.Code",
            "attributes": [
                {
                    "name": "declaration",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Entity's declaration.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "Code.declaration",
                    "navPath": "@nav/api/CodeApi.Code.declaration",
                    "code": {
                        "filePath": "src/lib/code-api/models.ts",
                        "declaration": "declaration: string",
                        "implementation": "",
                        "startLine": 75,
                        "endLine": 76,
                        "references": {
                            "declaration": "@nav/api/CodeApi.Code.declaration"
                        }
                    }
                },
                {
                    "name": "endLine",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Ending line of the declaration.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "Code.endLine",
                    "navPath": "@nav/api/CodeApi.Code.endLine",
                    "code": {
                        "filePath": "src/lib/code-api/models.ts",
                        "declaration": "endLine: number",
                        "implementation": "",
                        "startLine": 91,
                        "endLine": 92,
                        "references": {
                            "endLine": "@nav/api/CodeApi.Code.endLine"
                        }
                    }
                },
                {
                    "name": "filePath",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "File path in which the declaration is included.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "Code.filePath",
                    "navPath": "@nav/api/CodeApi.Code.filePath",
                    "code": {
                        "filePath": "src/lib/code-api/models.ts",
                        "declaration": "filePath: string",
                        "implementation": "",
                        "startLine": 83,
                        "endLine": 84,
                        "references": {
                            "filePath": "@nav/api/CodeApi.Code.filePath"
                        }
                    }
                },
                {
                    "name": "implementation",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Optional associated implementation.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "Code.implementation",
                    "navPath": "@nav/api/CodeApi.Code.implementation",
                    "code": {
                        "filePath": "src/lib/code-api/models.ts",
                        "declaration": "implementation?: string",
                        "implementation": "",
                        "startLine": 79,
                        "endLine": 80,
                        "references": {
                            "implementation": "@nav/api/CodeApi.Code.implementation"
                        }
                    }
                },
                {
                    "name": "references",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "References to other entities in the declaration.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "Code.references",
                    "navPath": "@nav/api/CodeApi.Code.references",
                    "code": {
                        "filePath": "src/lib/code-api/models.ts",
                        "declaration": "references: Record<string, EntityPath>",
                        "implementation": "",
                        "startLine": 96,
                        "endLine": 97,
                        "references": {
                            "references": "@nav/api/CodeApi.Code.references",
                            "Record": "https://www.typescriptlang.org/docs/handbook/utility-types.html#recordkeys-type"
                        }
                    }
                },
                {
                    "name": "startLine",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Starting line of the declaration.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "Code.startLine",
                    "navPath": "@nav/api/CodeApi.Code.startLine",
                    "code": {
                        "filePath": "src/lib/code-api/models.ts",
                        "declaration": "startLine: number",
                        "implementation": "",
                        "startLine": 87,
                        "endLine": 88,
                        "references": {
                            "startLine": "@nav/api/CodeApi.Code.startLine"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/code-api/models.ts",
                "declaration": "export interface Code",
                "implementation": "export interface Code {\n    /**\n     * Entity's declaration.\n     */\n    declaration: string\n    /**\n     * Optional associated implementation.\n     */\n    implementation?: string\n    /**\n     * File path in which the declaration is included.\n     */\n    filePath: string\n    /**\n     * Starting line of the declaration.\n     */\n    startLine: number\n    /**\n     * Ending line of the declaration.\n     */\n    endLine: number\n\n    /**\n     * References to other entities in the declaration.\n     */\n    references: Record<string, EntityPath>\n}",
                "startLine": 71,
                "endLine": 98,
                "references": {
                    "Code": "@nav/api/CodeApi.Code",
                    "Record": "https://www.typescriptlang.org/docs/handbook/utility-types.html#recordkeys-type"
                }
            },
            "semantic": {
                "role": "interface",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "Configuration",
            "documentation": {
                "sections": [
                    {
                        "content": "Specification of the configuration interface.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "Configuration",
            "navPath": "@nav/api/CodeApi.Configuration",
            "attributes": [
                {
                    "name": "codeUrl",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Define the code url from repo for a file in the project (located at  `path` ) and a starting line ( `startLine` ).",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "Configuration.codeUrl",
                    "navPath": "@nav/api/CodeApi.Configuration.codeUrl",
                    "code": {
                        "filePath": "src/lib/code-api/configurations.ts",
                        "declaration": "codeUrl: ({\n        project,\n        path,\n        startLine,\n    }: {\n        project: Project\n        path: string\n        startLine: number\n    }) => string",
                        "implementation": "",
                        "startLine": 62,
                        "endLine": 63,
                        "references": {
                            "codeUrl": "@nav/api/CodeApi.Configuration.codeUrl",
                            "Project": "@nav/api/CodeApi.Project"
                        }
                    }
                },
                {
                    "name": "css",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Defines the stylesheet to install.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "Configuration.css",
                    "navPath": "@nav/api/CodeApi.Configuration.css",
                    "code": {
                        "filePath": "src/lib/code-api/configurations.ts",
                        "declaration": "css: (project: Project) => string",
                        "implementation": "",
                        "startLine": 54,
                        "endLine": 55,
                        "references": {
                            "css": "@nav/api/CodeApi.Configuration.css",
                            "Project": "@nav/api/CodeApi.Project"
                        }
                    }
                },
                {
                    "name": "externalTypes",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "External types to link in the documentation, where keys are symbol path and values associated URL.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "Configuration.externalTypes",
                    "navPath": "@nav/api/CodeApi.Configuration.externalTypes",
                    "code": {
                        "filePath": "src/lib/code-api/configurations.ts",
                        "declaration": "externalTypes: Record<string, string>",
                        "implementation": "",
                        "startLine": 58,
                        "endLine": 59,
                        "references": {
                            "externalTypes": "@nav/api/CodeApi.Configuration.externalTypes",
                            "Record": "https://www.typescriptlang.org/docs/handbook/utility-types.html#recordkeys-type"
                        }
                    }
                },
                {
                    "name": "mdParsingOptions",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Parsing options for Markdown.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "Configuration.mdParsingOptions",
                    "navPath": "@nav/api/CodeApi.Configuration.mdParsingOptions",
                    "code": {
                        "filePath": "src/lib/code-api/configurations.ts",
                        "declaration": "mdParsingOptions?: MdParsingOptions",
                        "implementation": "",
                        "startLine": 46,
                        "endLine": 47,
                        "references": {
                            "mdParsingOptions": "@nav/api/CodeApi.Configuration.mdParsingOptions",
                            "MdParsingOptions": "@nav/api/MainModule.MdParsingOptions"
                        }
                    }
                },
                {
                    "name": "notebook",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "If  `true`  or an object, use the  <mkapi-api-link nav=\"@nav/api/Notebook\" semantic=\"module\">Notebook</mkapi-api-link>  module to parse the code documentation included in the API\nfiles, eventually forwarding the parameters provided to the  <mkapi-api-link nav=\"@nav/api/Notebook.NotebookPage\" semantic=\"class\">NotebookPage</mkapi-api-link>  constructor.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "Configuration.notebook",
                    "navPath": "@nav/api/CodeApi.Configuration.notebook",
                    "code": {
                        "filePath": "src/lib/code-api/configurations.ts",
                        "declaration": "notebook?:\n        | boolean\n        | {\n              initialScope?: Partial<Scope>\n              displayFactory?: DisplayFactory\n              options?: NotebookOptions\n          }",
                        "implementation": "",
                        "startLine": 76,
                        "endLine": 77,
                        "references": {
                            "notebook": "@nav/api/CodeApi.Configuration.notebook",
                            "DisplayFactory": "@nav/api/Notebook.DisplayFactory",
                            "Scope": "@nav/api/Notebook.Scope",
                            "NotebookOptions": "@nav/api/Notebook.NotebookOptions",
                            "Partial": "https://www.typescriptlang.org/docs/handbook/utility-types.html#partialtype"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/code-api/configurations.ts",
                "declaration": "export interface Configuration<\n    TLayout = DefaultLayout.NavLayout,\n    THeader = DefaultLayout.NavHeader,\n>",
                "implementation": "export interface Configuration<\n    TLayout = DefaultLayout.NavLayout,\n    THeader = DefaultLayout.NavHeader,\n> {\n    /**\n     * Parsing options for Markdown.\n     */\n    mdParsingOptions?: MdParsingOptions\n\n    /**\n     * Defines the stylesheet to install.\n     *\n     * @param project\n     * @returns Stylesheet full URL.\n     */\n    css: (project: Project) => string\n    /**\n     * External types to link in the documentation, where keys are symbol path and values associated URL.\n     */\n    externalTypes: Record<string, string>\n    /**\n     * Define the code url from repo for a file in the project (located at `path`) and a starting line (`startLine`).\n     */\n    codeUrl: ({\n        project,\n        path,\n        startLine,\n    }: {\n        project: Project\n        path: string\n        startLine: number\n    }) => string\n\n    /**\n     * If `true` or an object, use the {@link Notebook} module to parse the code documentation included in the API\n     * files, eventually forwarding the parameters provided to the {@link NotebookPage} constructor.\n     */\n    notebook?:\n        | boolean\n        | {\n              initialScope?: Partial<Scope>\n              displayFactory?: DisplayFactory\n              options?: NotebookOptions\n          }\n\n    navNode: ({\n        name,\n        header,\n        layout,\n    }: {\n        name: string\n        header: DefaultLayout.NavHeader\n        layout: NavLayout\n    }) => NavNodeData<TLayout, THeader>\n}",
                "startLine": 39,
                "endLine": 94,
                "references": {
                    "Configuration": "@nav/api/CodeApi.Configuration",
                    "Project": "@nav/api/CodeApi.Project",
                    "MdParsingOptions": "@nav/api/MainModule.MdParsingOptions",
                    "NavHeader": "@nav/api/MainModule/DefaultLayout.NavHeader",
                    "NavLayout": "@nav/api/CodeApi.NavLayout",
                    "NavNodeData": "@nav/api/MainModule.NavNodeData",
                    "DisplayFactory": "@nav/api/Notebook.DisplayFactory",
                    "Scope": "@nav/api/Notebook.Scope",
                    "NotebookOptions": "@nav/api/Notebook.NotebookOptions",
                    "DefaultLayout.NavLayout": "@nav/api/MainModule/DefaultLayout.NavLayout",
                    "DefaultLayout.NavHeader": "@nav/api/MainModule/DefaultLayout.NavHeader",
                    "Record": "https://www.typescriptlang.org/docs/handbook/utility-types.html#recordkeys-type",
                    "Partial": "https://www.typescriptlang.org/docs/handbook/utility-types.html#partialtype"
                }
            },
            "semantic": {
                "role": "interface",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "Documentation",
            "documentation": {
                "sections": [
                    {
                        "content": "An entity documentation.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "Documentation",
            "navPath": "@nav/api/CodeApi.Documentation",
            "attributes": [
                {
                    "name": "sections",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "List of the sections.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "Documentation.sections",
                    "navPath": "@nav/api/CodeApi.Documentation.sections",
                    "code": {
                        "filePath": "src/lib/code-api/models.ts",
                        "declaration": "sections: DocumentationSection[]",
                        "implementation": "",
                        "startLine": 65,
                        "endLine": 66,
                        "references": {
                            "sections": "@nav/api/CodeApi.Documentation.sections",
                            "DocumentationSection": "@nav/api/CodeApi.DocumentationSection"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/code-api/models.ts",
                "declaration": "export interface Documentation",
                "implementation": "export interface Documentation {\n    /**\n     * List of the sections.\n     */\n    sections: DocumentationSection[]\n}",
                "startLine": 61,
                "endLine": 67,
                "references": {
                    "Documentation": "@nav/api/CodeApi.Documentation",
                    "DocumentationSection": "@nav/api/CodeApi.DocumentationSection"
                }
            },
            "semantic": {
                "role": "interface",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "DocumentationSection",
            "documentation": {
                "sections": [
                    {
                        "content": "Documentation section.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "DocumentationSection",
            "navPath": "@nav/api/CodeApi.DocumentationSection",
            "attributes": [
                {
                    "name": "content",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Section's content.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "DocumentationSection.content",
                    "navPath": "@nav/api/CodeApi.DocumentationSection.content",
                    "code": {
                        "filePath": "src/lib/code-api/models.ts",
                        "declaration": "content: string",
                        "implementation": "",
                        "startLine": 51,
                        "endLine": 52,
                        "references": {
                            "content": "@nav/api/CodeApi.DocumentationSection.content"
                        }
                    }
                },
                {
                    "name": "contentType",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Content's type.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "DocumentationSection.contentType",
                    "navPath": "@nav/api/CodeApi.DocumentationSection.contentType",
                    "code": {
                        "filePath": "src/lib/code-api/models.ts",
                        "declaration": "contentType: string",
                        "implementation": "",
                        "startLine": 55,
                        "endLine": 56,
                        "references": {
                            "contentType": "@nav/api/CodeApi.DocumentationSection.contentType"
                        }
                    }
                },
                {
                    "name": "semantic",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Associated semantic.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "DocumentationSection.semantic",
                    "navPath": "@nav/api/CodeApi.DocumentationSection.semantic",
                    "code": {
                        "filePath": "src/lib/code-api/models.ts",
                        "declaration": "semantic: Semantic",
                        "implementation": "",
                        "startLine": 47,
                        "endLine": 48,
                        "references": {
                            "semantic": "@nav/api/CodeApi.DocumentationSection.semantic",
                            "Semantic": "@nav/api/CodeApi.Semantic"
                        }
                    }
                },
                {
                    "name": "title",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Section's title.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "DocumentationSection.title",
                    "navPath": "@nav/api/CodeApi.DocumentationSection.title",
                    "code": {
                        "filePath": "src/lib/code-api/models.ts",
                        "declaration": "title?: string",
                        "implementation": "",
                        "startLine": 43,
                        "endLine": 44,
                        "references": {
                            "title": "@nav/api/CodeApi.DocumentationSection.title"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/code-api/models.ts",
                "declaration": "export interface DocumentationSection",
                "implementation": "export interface DocumentationSection {\n    /**\n     * Section's title.\n     */\n    title?: string\n    /**\n     * Associated semantic.\n     */\n    semantic: Semantic\n    /**\n     * Section's content.\n     */\n    content: string\n    /**\n     * Content's type.\n     */\n    contentType: string\n}",
                "startLine": 39,
                "endLine": 57,
                "references": {
                    "DocumentationSection": "@nav/api/CodeApi.DocumentationSection",
                    "Semantic": "@nav/api/CodeApi.Semantic"
                }
            },
            "semantic": {
                "role": "interface",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "Entity",
            "documentation": {
                "sections": [
                    {
                        "content": "Base structure to represent an entity within the code, e.g. class, structure, function, variable,\n*etc.*.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "Entity",
            "navPath": "@nav/api/CodeApi.Entity",
            "attributes": [
                {
                    "name": "code",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Code information.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "Entity.code",
                    "navPath": "@nav/api/CodeApi.Entity.code",
                    "code": {
                        "filePath": "src/lib/code-api/models.ts",
                        "declaration": "code: Code",
                        "implementation": "",
                        "startLine": 138,
                        "endLine": 139,
                        "references": {
                            "code": "@nav/api/CodeApi.Entity.code",
                            "Code": "@nav/api/CodeApi.Code"
                        }
                    }
                },
                {
                    "name": "documentation",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Documentation.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "Entity.documentation",
                    "navPath": "@nav/api/CodeApi.Entity.documentation",
                    "code": {
                        "filePath": "src/lib/code-api/models.ts",
                        "declaration": "documentation: Documentation",
                        "implementation": "",
                        "startLine": 134,
                        "endLine": 135,
                        "references": {
                            "documentation": "@nav/api/CodeApi.Entity.documentation",
                            "Documentation": "@nav/api/CodeApi.Documentation"
                        }
                    }
                },
                {
                    "name": "name",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Name.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "Entity.name",
                    "navPath": "@nav/api/CodeApi.Entity.name",
                    "code": {
                        "filePath": "src/lib/code-api/models.ts",
                        "declaration": "name: string",
                        "implementation": "",
                        "startLine": 130,
                        "endLine": 131,
                        "references": {
                            "name": "@nav/api/CodeApi.Entity.name"
                        }
                    }
                },
                {
                    "name": "navPath",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The navigation path, *e.g.*  `@nav/api/submoduleA/Foo.bar` .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "Entity.navPath",
                    "navPath": "@nav/api/CodeApi.Entity.navPath",
                    "code": {
                        "filePath": "src/lib/code-api/models.ts",
                        "declaration": "navPath: string",
                        "implementation": "",
                        "startLine": 152,
                        "endLine": 153,
                        "references": {
                            "navPath": "@nav/api/CodeApi.Entity.navPath"
                        }
                    }
                },
                {
                    "name": "path",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The path (e.g.  `ModuleFoo.TypeBar.attrBaz` ).\n\nIt starts with the library name, each segment separated by  `.` .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "Entity.path",
                    "navPath": "@nav/api/CodeApi.Entity.path",
                    "code": {
                        "filePath": "src/lib/code-api/models.ts",
                        "declaration": "path: EntityPath",
                        "implementation": "",
                        "startLine": 148,
                        "endLine": 149,
                        "references": {
                            "path": "@nav/api/CodeApi.Entity.path"
                        }
                    }
                },
                {
                    "name": "semantic",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Semantic associated.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "Entity.semantic",
                    "navPath": "@nav/api/CodeApi.Entity.semantic",
                    "code": {
                        "filePath": "src/lib/code-api/models.ts",
                        "declaration": "semantic: Semantic",
                        "implementation": "",
                        "startLine": 142,
                        "endLine": 143,
                        "references": {
                            "semantic": "@nav/api/CodeApi.Entity.semantic",
                            "Semantic": "@nav/api/CodeApi.Semantic"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/code-api/models.ts",
                "declaration": "export interface Entity",
                "implementation": "export interface Entity {\n    /**\n     * Name.\n     */\n    name: string\n    /**\n     * Documentation.\n     */\n    documentation: Documentation\n    /**\n     * Code information.\n     */\n    code: Code\n    /**\n     * Semantic associated.\n     */\n    semantic: Semantic\n    /**\n     * The path (e.g. `ModuleFoo.TypeBar.attrBaz`).\n     *\n     * It starts with the library name, each segment separated by `.`.\n     */\n    path: EntityPath\n    /**\n     * The navigation path, *e.g.* `@nav/api/submoduleA/Foo.bar`.\n     */\n    navPath: string\n}",
                "startLine": 126,
                "endLine": 154,
                "references": {
                    "Entity": "@nav/api/CodeApi.Entity",
                    "Code": "@nav/api/CodeApi.Code",
                    "Documentation": "@nav/api/CodeApi.Documentation",
                    "Semantic": "@nav/api/CodeApi.Semantic",
                    "Type": "@nav/api/CodeApi.Type"
                }
            },
            "semantic": {
                "role": "interface",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "File",
            "documentation": {
                "sections": [
                    {
                        "content": "File representation.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "File",
            "navPath": "@nav/api/CodeApi.File",
            "attributes": [
                {
                    "name": "documentation",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Documentation.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "File.documentation",
                    "navPath": "@nav/api/CodeApi.File.documentation",
                    "code": {
                        "filePath": "src/lib/code-api/models.ts",
                        "declaration": "documentation: Documentation",
                        "implementation": "",
                        "startLine": 193,
                        "endLine": 194,
                        "references": {
                            "documentation": "@nav/api/CodeApi.File.documentation",
                            "Documentation": "@nav/api/CodeApi.Documentation"
                        }
                    }
                },
                {
                    "name": "name",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Name.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "File.name",
                    "navPath": "@nav/api/CodeApi.File.name",
                    "code": {
                        "filePath": "src/lib/code-api/models.ts",
                        "declaration": "name: string",
                        "implementation": "",
                        "startLine": 185,
                        "endLine": 186,
                        "references": {
                            "name": "@nav/api/CodeApi.File.name"
                        }
                    }
                },
                {
                    "name": "path",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Path.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "File.path",
                    "navPath": "@nav/api/CodeApi.File.path",
                    "code": {
                        "filePath": "src/lib/code-api/models.ts",
                        "declaration": "path: string",
                        "implementation": "",
                        "startLine": 189,
                        "endLine": 190,
                        "references": {
                            "path": "@nav/api/CodeApi.File.path"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/code-api/models.ts",
                "declaration": "export interface File",
                "implementation": "export interface File {\n    /**\n     * Name.\n     */\n    name: string\n    /**\n     * Path.\n     */\n    path: string\n    /**\n     * Documentation.\n     */\n    documentation: Documentation\n}",
                "startLine": 181,
                "endLine": 195,
                "references": {
                    "File": "@nav/api/CodeApi.File",
                    "Documentation": "@nav/api/CodeApi.Documentation"
                }
            },
            "semantic": {
                "role": "interface",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "HttpClientTrait",
            "documentation": {
                "sections": [
                    {
                        "content": "Interface for the HTTP client fetching API data used in  <mkapi-api-link nav=\"@nav/api/CodeApi.codeApiEntryNode\" semantic=\"function\">codeApiEntryNode</mkapi-api-link> .",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "HttpClientTrait",
            "navPath": "@nav/api/CodeApi.HttpClientTrait",
            "attributes": [],
            "callables": [
                {
                    "name": "fetchModule",
                    "documentation": {
                        "sections": [
                            {
                                "content": "Fetch  <mkapi-api-link nav=\"@nav/api/CodeApi.Module\" semantic=\"type-alias\">Module</mkapi-api-link>  data.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            },
                            {
                                "title": "Arguments",
                                "content": "\n*  **modulePath**: path of the module relative to project's  `docBasePath` .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "arguments",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "HttpClientTrait.fetchModule",
                    "navPath": "@nav/api/CodeApi.HttpClientTrait.fetchModule",
                    "code": {
                        "filePath": "src/lib/code-api/index.ts",
                        "declaration": "fetchModule(modulePath: string): Observable<Module>",
                        "implementation": "",
                        "startLine": 65,
                        "endLine": 66,
                        "references": {
                            "fetchModule": "@nav/api/CodeApi.HttpClientTrait.fetchModule",
                            "Module": "@nav/api/CodeApi.Module",
                            "Observable": "https://rxjs.dev/guide/observable"
                        }
                    },
                    "semantic": {
                        "role": "method",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    }
                },
                {
                    "name": "installCss",
                    "documentation": {
                        "sections": [
                            {
                                "content": "Install required style sheets.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "HttpClientTrait.installCss",
                    "navPath": "@nav/api/CodeApi.HttpClientTrait.installCss",
                    "code": {
                        "filePath": "src/lib/code-api/index.ts",
                        "declaration": "installCss(): Promise<unknown>",
                        "implementation": "",
                        "startLine": 70,
                        "endLine": 71,
                        "references": {
                            "installCss": "@nav/api/CodeApi.HttpClientTrait.installCss",
                            "Promise": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise"
                        }
                    },
                    "semantic": {
                        "role": "method",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    }
                }
            ],
            "code": {
                "filePath": "src/lib/code-api/index.ts",
                "declaration": "export interface HttpClientTrait",
                "implementation": "export interface HttpClientTrait {\n    /**\n     * Fetch {@link Module} data.\n     *\n     * @param modulePath path of the module relative to project's `docBasePath`.\n     */\n    fetchModule(modulePath: string): Observable<Module>\n\n    /**\n     * Install required style sheets.\n     */\n    installCss(): Promise<unknown>\n}",
                "startLine": 59,
                "endLine": 72,
                "references": {
                    "HttpClientTrait": "@nav/api/CodeApi.HttpClientTrait",
                    "Module": "@nav/api/CodeApi.Module",
                    "HttpClient": "@nav/api/CodeApi.HttpClient",
                    "Observable": "https://rxjs.dev/guide/observable",
                    "Promise": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise"
                }
            },
            "semantic": {
                "role": "interface",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "NavLayout",
            "documentation": {
                "sections": [
                    {
                        "content": "The navigation layout data-structure produced by the module.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "NavLayout",
            "navPath": "@nav/api/CodeApi.NavLayout",
            "attributes": [
                {
                    "name": "content",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Defines the main content view of the page.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "NavLayout.content",
                    "navPath": "@nav/api/CodeApi.NavLayout.content",
                    "code": {
                        "filePath": "src/lib/code-api/configurations.ts",
                        "declaration": "content: (params: { router: Router<NavLayout> }) => NavLayoutView",
                        "implementation": "",
                        "startLine": 33,
                        "endLine": 34,
                        "references": {
                            "content": "@nav/api/CodeApi.NavLayout.content",
                            "Router": "@nav/api/MainModule.Router",
                            "NavLayout": "@nav/api/CodeApi.NavLayout",
                            "NavLayoutView": "@nav/api/MainModule/DefaultLayout.NavLayoutView"
                        }
                    }
                },
                {
                    "name": "toc",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Defines the view for the table of contents (TOC) within the page.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "NavLayout.toc",
                    "navPath": "@nav/api/CodeApi.NavLayout.toc",
                    "code": {
                        "filePath": "src/lib/code-api/configurations.ts",
                        "declaration": "toc?: ClientTocView",
                        "implementation": "",
                        "startLine": 28,
                        "endLine": 29,
                        "references": {
                            "toc": "@nav/api/CodeApi.NavLayout.toc",
                            "ClientTocView": "@nav/api/MainModule/DefaultLayout.ClientTocView"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/code-api/configurations.ts",
                "declaration": "export interface NavLayout",
                "implementation": "export interface NavLayout {\n    /**\n     * Defines the view for the table of contents (TOC) within the page.\n     */\n    toc?: ClientTocView\n\n    /**\n     * Defines the main content view of the page.\n     */\n    content: (params: { router: Router<NavLayout> }) => NavLayoutView\n}",
                "startLine": 24,
                "endLine": 35,
                "references": {
                    "NavLayout": "@nav/api/CodeApi.NavLayout",
                    "Router": "@nav/api/MainModule.Router",
                    "NavLayoutView": "@nav/api/MainModule/DefaultLayout.NavLayoutView",
                    "ClientTocView": "@nav/api/MainModule/DefaultLayout.ClientTocView"
                }
            },
            "semantic": {
                "role": "interface",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "Project",
            "documentation": {
                "sections": [
                    {
                        "content": "Representation of the project to document",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "Project",
            "navPath": "@nav/api/CodeApi.Project",
            "attributes": [
                {
                    "name": "docBasePath",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The base path of the corresponding node in the documentation.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "Project.docBasePath",
                    "navPath": "@nav/api/CodeApi.Project.docBasePath",
                    "code": {
                        "filePath": "src/lib/code-api/models.ts",
                        "declaration": "docBasePath: string",
                        "implementation": "",
                        "startLine": 243,
                        "endLine": 244,
                        "references": {
                            "docBasePath": "@nav/api/CodeApi.Project.docBasePath"
                        }
                    }
                },
                {
                    "name": "name",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Its name.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "Project.name",
                    "navPath": "@nav/api/CodeApi.Project.name",
                    "code": {
                        "filePath": "src/lib/code-api/models.ts",
                        "declaration": "name: string",
                        "implementation": "",
                        "startLine": 239,
                        "endLine": 240,
                        "references": {
                            "name": "@nav/api/CodeApi.Project.name"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/code-api/models.ts",
                "declaration": "export interface Project",
                "implementation": "export interface Project {\n    /**\n     * Its name.\n     */\n    name: string\n    /**\n     * The base path of the corresponding node in the documentation.\n     */\n    docBasePath: string\n}",
                "startLine": 235,
                "endLine": 245,
                "references": {
                    "Project": "@nav/api/CodeApi.Project"
                }
            },
            "semantic": {
                "role": "interface",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "Semantic",
            "documentation": {
                "sections": [
                    {
                        "content": "Semantic representation.\n\nThey represent metadata transmitted to the frontend renderer to display appropriately the elements.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "Semantic",
            "navPath": "@nav/api/CodeApi.Semantic",
            "attributes": [
                {
                    "name": "attributes",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Some attributes.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "Semantic.attributes",
                    "navPath": "@nav/api/CodeApi.Semantic.attributes",
                    "code": {
                        "filePath": "src/lib/code-api/models.ts",
                        "declaration": "attributes: Record<string, string>",
                        "implementation": "",
                        "startLine": 116,
                        "endLine": 117,
                        "references": {
                            "attributes": "@nav/api/CodeApi.Semantic.attributes",
                            "Record": "https://www.typescriptlang.org/docs/handbook/utility-types.html#recordkeys-type"
                        }
                    }
                },
                {
                    "name": "labels",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Some labels.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "Semantic.labels",
                    "navPath": "@nav/api/CodeApi.Semantic.labels",
                    "code": {
                        "filePath": "src/lib/code-api/models.ts",
                        "declaration": "labels: string[]",
                        "implementation": "",
                        "startLine": 112,
                        "endLine": 113,
                        "references": {
                            "labels": "@nav/api/CodeApi.Semantic.labels"
                        }
                    }
                },
                {
                    "name": "relations",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Some relation with other entities (grouped by a category keyword, *e.g.*  `InheritedBy` ).",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "Semantic.relations",
                    "navPath": "@nav/api/CodeApi.Semantic.relations",
                    "code": {
                        "filePath": "src/lib/code-api/models.ts",
                        "declaration": "relations: Record<string, EntityPath[]>",
                        "implementation": "",
                        "startLine": 120,
                        "endLine": 121,
                        "references": {
                            "relations": "@nav/api/CodeApi.Semantic.relations",
                            "Record": "https://www.typescriptlang.org/docs/handbook/utility-types.html#recordkeys-type"
                        }
                    }
                },
                {
                    "name": "role",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Role, a unique meaning (*e.g.*  `Class` ,  `Interface` ,  `TypeAlias` , *etc.*).",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "Semantic.role",
                    "navPath": "@nav/api/CodeApi.Semantic.role",
                    "code": {
                        "filePath": "src/lib/code-api/models.ts",
                        "declaration": "role: string",
                        "implementation": "",
                        "startLine": 108,
                        "endLine": 109,
                        "references": {
                            "role": "@nav/api/CodeApi.Semantic.role"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/code-api/models.ts",
                "declaration": "export interface Semantic",
                "implementation": "export interface Semantic {\n    /**\n     * Role, a unique meaning (*e.g.* `Class`, `Interface`, `TypeAlias`, *etc.*).\n     */\n    role: string\n    /**\n     * Some labels.\n     */\n    labels: string[]\n    /**\n     * Some attributes.\n     */\n    attributes: Record<string, string>\n    /**\n     * Some relation with other entities (grouped by a category keyword, *e.g.* `InheritedBy`).\n     */\n    relations: Record<string, EntityPath[]>\n}",
                "startLine": 104,
                "endLine": 122,
                "references": {
                    "Semantic": "@nav/api/CodeApi.Semantic",
                    "Record": "https://www.typescriptlang.org/docs/handbook/utility-types.html#recordkeys-type"
                }
            },
            "semantic": {
                "role": "interface",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "Type",
            "documentation": {
                "sections": [
                    {
                        "content": "Type representation.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "Type",
            "navPath": "@nav/api/CodeApi.Type",
            "attributes": [
                {
                    "name": "attributes",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "List of owned attributes.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "Type.attributes",
                    "navPath": "@nav/api/CodeApi.Type.attributes",
                    "code": {
                        "filePath": "src/lib/code-api/models.ts",
                        "declaration": "attributes: Attribute[]",
                        "implementation": "",
                        "startLine": 175,
                        "endLine": 176,
                        "references": {
                            "attributes": "@nav/api/CodeApi.Type.attributes",
                            "Entity": "@nav/api/CodeApi.Entity"
                        }
                    }
                },
                {
                    "name": "callables",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "List of owned callable.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "Type.callables",
                    "navPath": "@nav/api/CodeApi.Type.callables",
                    "code": {
                        "filePath": "src/lib/code-api/models.ts",
                        "declaration": "callables: Callable[]",
                        "implementation": "",
                        "startLine": 171,
                        "endLine": 172,
                        "references": {
                            "callables": "@nav/api/CodeApi.Type.callables",
                            "Entity": "@nav/api/CodeApi.Entity"
                        }
                    }
                },
                {
                    "name": "code",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Code information.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "Entity.code",
                    "navPath": "@nav/api/CodeApi.Entity.code",
                    "code": {
                        "filePath": "src/lib/code-api/models.ts",
                        "declaration": "code: Code",
                        "implementation": "",
                        "startLine": 138,
                        "endLine": 139,
                        "references": {
                            "code": "@nav/api/CodeApi.Entity.code",
                            "Code": "@nav/api/CodeApi.Code"
                        }
                    }
                },
                {
                    "name": "documentation",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Documentation.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "Entity.documentation",
                    "navPath": "@nav/api/CodeApi.Entity.documentation",
                    "code": {
                        "filePath": "src/lib/code-api/models.ts",
                        "declaration": "documentation: Documentation",
                        "implementation": "",
                        "startLine": 134,
                        "endLine": 135,
                        "references": {
                            "documentation": "@nav/api/CodeApi.Entity.documentation",
                            "Documentation": "@nav/api/CodeApi.Documentation"
                        }
                    }
                },
                {
                    "name": "name",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Name.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "Entity.name",
                    "navPath": "@nav/api/CodeApi.Entity.name",
                    "code": {
                        "filePath": "src/lib/code-api/models.ts",
                        "declaration": "name: string",
                        "implementation": "",
                        "startLine": 130,
                        "endLine": 131,
                        "references": {
                            "name": "@nav/api/CodeApi.Entity.name"
                        }
                    }
                },
                {
                    "name": "navPath",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The navigation path, *e.g.*  `@nav/api/submoduleA/Foo.bar` .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "Entity.navPath",
                    "navPath": "@nav/api/CodeApi.Entity.navPath",
                    "code": {
                        "filePath": "src/lib/code-api/models.ts",
                        "declaration": "navPath: string",
                        "implementation": "",
                        "startLine": 152,
                        "endLine": 153,
                        "references": {
                            "navPath": "@nav/api/CodeApi.Entity.navPath"
                        }
                    }
                },
                {
                    "name": "path",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The path (e.g.  `ModuleFoo.TypeBar.attrBaz` ).\n\nIt starts with the library name, each segment separated by  `.` .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "Entity.path",
                    "navPath": "@nav/api/CodeApi.Entity.path",
                    "code": {
                        "filePath": "src/lib/code-api/models.ts",
                        "declaration": "path: EntityPath",
                        "implementation": "",
                        "startLine": 148,
                        "endLine": 149,
                        "references": {
                            "path": "@nav/api/CodeApi.Entity.path"
                        }
                    }
                },
                {
                    "name": "semantic",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Semantic associated.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "Entity.semantic",
                    "navPath": "@nav/api/CodeApi.Entity.semantic",
                    "code": {
                        "filePath": "src/lib/code-api/models.ts",
                        "declaration": "semantic: Semantic",
                        "implementation": "",
                        "startLine": 142,
                        "endLine": 143,
                        "references": {
                            "semantic": "@nav/api/CodeApi.Entity.semantic",
                            "Semantic": "@nav/api/CodeApi.Semantic"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/code-api/models.ts",
                "declaration": "export interface Type extends Entity",
                "implementation": "export interface Type extends Entity {\n    /**\n     * List of owned callable.\n     */\n    callables: Callable[]\n    /**\n     * List of owned attributes.\n     */\n    attributes: Attribute[]\n}",
                "startLine": 167,
                "endLine": 177,
                "references": {
                    "Type": "@nav/api/CodeApi.Type",
                    "Entity": "@nav/api/CodeApi.Entity",
                    "Code": "@nav/api/CodeApi.Code",
                    "Entity.code": "@nav/api/CodeApi.Entity.code",
                    "Documentation": "@nav/api/CodeApi.Documentation",
                    "Entity.documentation": "@nav/api/CodeApi.Entity.documentation",
                    "Entity.name": "@nav/api/CodeApi.Entity.name",
                    "Entity.navPath": "@nav/api/CodeApi.Entity.navPath",
                    "Entity.path": "@nav/api/CodeApi.Entity.path",
                    "Semantic": "@nav/api/CodeApi.Semantic",
                    "Entity.semantic": "@nav/api/CodeApi.Entity.semantic"
                }
            },
            "semantic": {
                "role": "interface",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "Attribute",
            "documentation": {
                "sections": [
                    {
                        "content": "Attribute representation.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "Attribute",
            "navPath": "@nav/api/CodeApi.Attribute",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/code-api/models.ts",
                "declaration": "export type Attribute = Entity",
                "implementation": "",
                "startLine": 162,
                "endLine": 163,
                "references": {
                    "Attribute": "@nav/api/CodeApi.Attribute",
                    "Entity": "@nav/api/CodeApi.Entity"
                }
            },
            "semantic": {
                "role": "type-alias",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "Callable",
            "documentation": {
                "sections": [
                    {
                        "content": "Callable representation.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "Callable",
            "navPath": "@nav/api/CodeApi.Callable",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/code-api/models.ts",
                "declaration": "export type Callable = Entity",
                "implementation": "",
                "startLine": 157,
                "endLine": 158,
                "references": {
                    "Callable": "@nav/api/CodeApi.Callable",
                    "Entity": "@nav/api/CodeApi.Entity"
                }
            },
            "semantic": {
                "role": "type-alias",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "ChildModule",
            "documentation": {
                "sections": [
                    {
                        "content": "Child module representation.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "ChildModule",
            "navPath": "@nav/api/CodeApi.ChildModule",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/code-api/models.ts",
                "declaration": "export type ChildModule = Omit<Entity, 'code' | 'documentation'> & {\n    /**\n     * Whether it includes children modules.\n     */\n    isLeaf: boolean\n}",
                "implementation": "",
                "startLine": 199,
                "endLine": 200,
                "references": {
                    "ChildModule": "@nav/api/CodeApi.ChildModule",
                    "Entity": "@nav/api/CodeApi.Entity",
                    "Omit": "https://www.typescriptlang.org/docs/handbook/utility-types.html#omittype-keys"
                }
            },
            "semantic": {
                "role": "type-alias",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "EntityForSummary",
            "documentation": {
                "sections": [
                    {
                        "content": "Interface for entities included in  <mkapi-api-link nav=\"@nav/api/CodeApi.SummaryView\" semantic=\"class\">SummaryView</mkapi-api-link> .",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "EntityForSummary",
            "navPath": "@nav/api/CodeApi.EntityForSummary",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/code-api/summary.view.ts",
                "declaration": "export type EntityForSummary = Entity | ChildModule",
                "implementation": "",
                "startLine": 17,
                "endLine": 18,
                "references": {
                    "EntityForSummary": "@nav/api/CodeApi.EntityForSummary",
                    "Entity": "@nav/api/CodeApi.Entity",
                    "ChildModule": "@nav/api/CodeApi.ChildModule"
                }
            },
            "semantic": {
                "role": "type-alias",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "EntityPath",
            "documentation": {
                "sections": [
                    {
                        "content": "EntityPath defines ownership between symbols (separated by a dot) and referenced from the actual owning module.\n\n*E.g*, for a particular module the attribute  `foo`  of class  `Bar`  is  `Foo.bar` .",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "EntityPath",
            "navPath": "@nav/api/CodeApi.EntityPath",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/code-api/models.ts",
                "declaration": "export type EntityPath = string",
                "implementation": "",
                "startLine": 34,
                "endLine": 35,
                "references": {
                    "EntityPath": "@nav/api/CodeApi.EntityPath"
                }
            },
            "semantic": {
                "role": "type-alias",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "Module",
            "documentation": {
                "sections": [
                    {
                        "content": "Module representation.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "Module",
            "navPath": "@nav/api/CodeApi.Module",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/code-api/models.ts",
                "declaration": "export type Module = Omit<Entity, 'code'> & {\n    /**\n     * Children modules.\n     */\n    children: ChildModule[]\n    /**\n     * Callable components.\n     */\n    callables: Callable[]\n    /**\n     * Types components.\n     */\n    types: Type[]\n    /**\n     * Attributes components.\n     */\n    attributes: Attribute[]\n    /**\n     * Files components.\n     */\n    files: File[]\n}",
                "implementation": "",
                "startLine": 209,
                "endLine": 210,
                "references": {
                    "Module": "@nav/api/CodeApi.Module",
                    "Entity": "@nav/api/CodeApi.Entity",
                    "Attribute": "@nav/api/CodeApi.Attribute",
                    "Callable": "@nav/api/CodeApi.Callable",
                    "ChildModule": "@nav/api/CodeApi.ChildModule",
                    "File": "@nav/api/CodeApi.File",
                    "Type": "@nav/api/CodeApi.Type",
                    "Omit": "https://www.typescriptlang.org/docs/handbook/utility-types.html#omittype-keys"
                }
            },
            "semantic": {
                "role": "type-alias",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        }
    ],
    "callables": [
        {
            "name": "codeApiEntryNode",
            "documentation": {
                "sections": [
                    {
                        "content": "Generates the root node for a project's API documentation, to be integrated within the  <mkapi-api-link nav=\"@nav/api/MainModule.Navigation\" semantic=\"type-alias\">Navigation</mkapi-api-link> .",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    },
                    {
                        "title": "Arguments",
                        "content": "\n*  **params**: Configuration options for the API documentation root node.\n*  **configuration**: Configuration settings for the navigation and layout.\n*  **docBasePath**: The base URL or root directory containing the API data models ( `.json`  files).\n  These models are generated using the  <mkapi-api-link nav=\"@nav/api/MkApiBackends\" semantic=\"module\">MkApiBackends</mkapi-api-link> .\n*  **entryModule**: The root module from which the documentation hierarchy starts. Its associated  `json`  data\nshould be located at  `${docBasePath}/${docBasePath}.json` .\n*  **header**: The navigation header associated with the root node.\n*  **httpClient**: A custom HTTP client for retrieving API documentation resources.\n  If not provided, a default  <mkapi-api-link nav=\"@nav/api/CodeApi.HttpClient\" semantic=\"class\">HttpClient</mkapi-api-link>  instance is used.\n*  **name**: The name of the project (displayed in the navigation).\n*  **ctx**: Execution context used for logging and tracing.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "arguments",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    },
                    {
                        "title": "Generics",
                        "content": "\n*  **TLayout**: The type defining the navigation layout (*e.g.*,  <mkapi-api-link nav=\"@nav/api/MainModule/DefaultLayout.NavLayout\" semantic=\"type-alias\">DefaultLayout.NavLayout</mkapi-api-link> ).\n*  **THeader**: The type defining the navigation header (*e.g.*,  <mkapi-api-link nav=\"@nav/api/MainModule/DefaultLayout.NavHeader\" semantic=\"type-alias\">DefaultLayout.NavHeader</mkapi-api-link> ).",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "arguments",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    },
                    {
                        "title": "Returns",
                        "content": "A navigation node representing the entry point for the API documentation.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "returns",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "codeApiEntryNode",
            "navPath": "@nav/api/CodeApi.codeApiEntryNode",
            "code": {
                "filePath": "src/lib/code-api/index.ts",
                "declaration": "export function codeApiEntryNode<TLayout, THeader>(\n    params: {\n        name: string\n        header: DefaultLayout.NavHeader\n        docBasePath: string\n        entryModule: string\n        configuration: Configuration<TLayout, THeader>\n        httpClient?: ({\n            project,\n            configuration,\n        }: {\n            project: Project\n            configuration: Configuration<TLayout, THeader>\n        }) => HttpClientTrait\n    },\n    ctx?: ContextTrait,\n): Navigation<TLayout, THeader>",
                "implementation": "export function codeApiEntryNode<TLayout, THeader>(\n    params: {\n        name: string\n        header: DefaultLayout.NavHeader\n        docBasePath: string\n        entryModule: string\n        configuration: Configuration<TLayout, THeader>\n        httpClient?: ({\n            project,\n            configuration,\n        }: {\n            project: Project\n            configuration: Configuration<TLayout, THeader>\n        }) => HttpClientTrait\n    },\n    ctx?: ContextTrait,\n): Navigation<TLayout, THeader> {\n    const project = {\n        name: params.entryModule,\n        docBasePath: params.docBasePath,\n    }\n    const configuration = params.configuration\n    const httpClient =\n        params.httpClient?.({ configuration, project }) ??\n        new HttpClient({\n            project,\n            configuration,\n        })\n    return {\n        ...configuration.navNode({\n            name: params.name,\n            header: params.header,\n            layout: {\n                toc,\n                content: ({ router }: { router: Router }) => {\n                    return moduleView(\n                        {\n                            path: project.name,\n                            router,\n                            configuration,\n                            project,\n                            httpClient,\n                        },\n                        ctx,\n                    )\n                },\n            },\n        }),\n        routes: ({ router, path }: { router: Router; path: string }) =>\n            docNavigation(\n                {\n                    modulePath: path,\n                    router,\n                    project,\n                    configuration,\n                    httpClient,\n                },\n                ctx,\n            ),\n    }\n}",
                "startLine": 258,
                "endLine": 319,
                "references": {
                    "codeApiEntryNode": "@nav/api/CodeApi.codeApiEntryNode",
                    "Configuration": "@nav/api/CodeApi.Configuration",
                    "NavHeader": "@nav/api/MainModule/DefaultLayout.NavHeader",
                    "Project": "@nav/api/CodeApi.Project",
                    "HttpClientTrait": "@nav/api/CodeApi.HttpClientTrait",
                    "ContextTrait": "@nav/api/MainModule.ContextTrait",
                    "Navigation": "@nav/api/MainModule.Navigation"
                }
            },
            "semantic": {
                "role": "function",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        }
    ],
    "files": [
        {
            "name": "attribute.view.ts",
            "path": "src/lib/code-api/attribute.view.ts",
            "documentation": {
                "sections": [
                    {
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "content": "",
                        "contentType": "markdown"
                    }
                ]
            }
        },
        {
            "name": "callable.view.ts",
            "path": "src/lib/code-api/callable.view.ts",
            "documentation": {
                "sections": [
                    {
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "content": "",
                        "contentType": "markdown"
                    }
                ]
            }
        },
        {
            "name": "code.view.ts",
            "path": "src/lib/code-api/code.view.ts",
            "documentation": {
                "sections": [
                    {
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "content": "",
                        "contentType": "markdown"
                    }
                ]
            }
        },
        {
            "name": "declaration.view.ts",
            "path": "src/lib/code-api/declaration.view.ts",
            "documentation": {
                "sections": [
                    {
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "content": "",
                        "contentType": "markdown"
                    }
                ]
            }
        },
        {
            "name": "index.ts",
            "path": "src/lib/code-api/index.ts",
            "documentation": {
                "sections": [
                    {
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "content": "The Code API Plugin integrates API documentation into your application.\n\nAPI documentation is structured based on the module hierarchy, where each page corresponds to a specific module.\n\nThe root node of the API documentation is generated using .\nBy default, it utilizes a  to fetch module data from .json files,\nwith each file representing a . The module is then displayed on the page using\n.\n\n<note level=\"warning\">\nThis module does **not** handle the generation of `.json` files. For details on generating these files,\nrefer to .\n</note>",
                        "contentType": "markdown"
                    }
                ]
            }
        },
        {
            "name": "documentation.view.ts",
            "path": "src/lib/code-api/documentation.view.ts",
            "documentation": {
                "sections": [
                    {
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "content": "",
                        "contentType": "markdown"
                    }
                ]
            }
        },
        {
            "name": "module.view.ts",
            "path": "src/lib/code-api/module.view.ts",
            "documentation": {
                "sections": [
                    {
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "content": "",
                        "contentType": "markdown"
                    }
                ]
            }
        },
        {
            "name": "summary.view.ts",
            "path": "src/lib/code-api/summary.view.ts",
            "documentation": {
                "sections": [
                    {
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "content": "",
                        "contentType": "markdown"
                    }
                ]
            }
        },
        {
            "name": "type.view.ts",
            "path": "src/lib/code-api/type.view.ts",
            "documentation": {
                "sections": [
                    {
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "content": "",
                        "contentType": "markdown"
                    }
                ]
            }
        },
        {
            "name": "models.ts",
            "path": "src/lib/code-api/models.ts",
            "documentation": {
                "sections": [
                    {
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "content": "This file defines the models used to describe an API.\n\nTo ensure broad compatibility across different programming languages, the schema is designed with minimal constraints.\nThe goal is to support a wide range of source languages while maintaining a structured and lightweight representation.\n\nThe API structure follows a hierarchical organization based on **modules**.\n\n- Each **module** can contain various , categorized as:\n  -  (data structures, classes, interfaces, *etc.*).\n  -  (functions, methods, constructors, *etc.*).\n  -  (properties, fields, *etc.*).\n\n- For each entity, a corresponding  attribute should be generated, capturing:\n  - Extracted **documentation** from the source code.\n  - Extracted **declaration** and, if available, **implementation** details.\n  - A list of **referenced types** inferred from the declaration (if applicable).\n\n- **Types** () should also include their associated:\n  -  list (properties, fields, etc.).\n  -  list (methods, functions, etc.).\n\n- All  include a ** property**, providing language-specific metadata and context.\n\n- Every entity is associated with a ** object**.EntityPath defines ownership between symbols (separated by a dot) and referenced from the actual owning module.\n\n*E.g*, for a particular module the attribute `foo` of class `Bar` is `Foo.bar`.",
                        "contentType": "markdown"
                    }
                ]
            }
        },
        {
            "name": "configurations.ts",
            "path": "src/lib/code-api/configurations.ts",
            "documentation": {
                "sections": [
                    {
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "content": "This file gathers configuration related implementations.\nIn particular, it defines the  interface and provide a default configuration for ts-typedoc\nproject.",
                        "contentType": "markdown"
                    }
                ]
            }
        },
        {
            "name": "utils.ts",
            "path": "src/lib/code-api/utils.ts",
            "documentation": {
                "sections": [
                    {
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "content": "",
                        "contentType": "markdown"
                    }
                ]
            }
        }
    ],
    "children": [],
    "semantic": {
        "role": "module",
        "labels": [],
        "attributes": {},
        "relations": {}
    }
}
