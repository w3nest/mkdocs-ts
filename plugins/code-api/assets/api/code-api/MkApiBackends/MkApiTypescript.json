{
    "name": "MkApiTypescript",
    "documentation": {
        "sections": [
            {
                "content": "The backend for generating API files for TypeScript projects uses the\n<a href=\"https://typedoc.org/\" target=\"_blank\">TypeDoc</a> &\n<a href=\"https://www.npmjs.com/package/typescript\" target=\"_blank\">TypeScript</a> package as the primary\nAST (Abstract Syntax Tree) generators.\n\nThe entry point is the function  <mkapi-api-link nav=\"@nav[code-api]/MkApiBackends/MkApiTypescript.generateApiFiles\" semantic=\"function\">generateApiFiles</mkapi-api-link> , inputs are provided using  <mkapi-api-link nav=\"@nav[code-api]/MkApiBackends/MkApiTypescript.ApiInputs\" semantic=\"interface\">ApiInputs</mkapi-api-link> .\n\n**Usage Example**\n\n<note level=\"warning\">\nFor the backend to function correctly, the following prerequisites must be met in the project being documented:\n\n*   `typedoc`  must be available in the node_modules folder.\n*  A  `typedoc.js`  configuration file must be present.\n\nThe backend will not proceed if TypeDoc encounters errors while generating API documentation.\nEnsure TypeDoc runs successfully before using this backend.\n</note>\n\nThe following example demonstrates how to generate API files for a TypeScript project using a TypeScript script\n(for instance named  `gen-doc.ts` , assuming  `@mkdocs-ts/code-api`  has been installed in  `node_modules` ):\n\n<code-snippet language=\"javascript\">\nimport { generateApiFiles } from './node_modules/@mkdocs-ts/code-api/src/mkapi-backends/mkapi-typescript'\n\n// appFolder is the folder of the documentation application\nconst appFolder =  `${__dirname}` \n\ngenerateApiFiles({\n    // The project to document (expected here as the parent of the application folder).\n    projectFolder:  `${appFolder}/../` ,\n    // Output's folder, where to include the generated JSON files\n    outputFolder:  `${appFolder}/assets/api` ,\n    externals: {\n        // For instance\n        rxjs: ({ name }: { name: string }) => {\n            const urls = {\n                Subject: 'https://www.learnrxjs.io/learn-rxjs/subjects/subject',\n                BehaviorSubject:\n                    'https://www.learnrxjs.io/learn-rxjs/subjects/subject',\n                ReplaySubject:\n                    'https://www.learnrxjs.io/learn-rxjs/subjects/replaysubject',\n                Observable: 'https://rxjs.dev/guide/observable',\n            }\n            if (!(name in urls)) {\n                console.warn( `Can not find URL for rxjs ${name} symbol` )\n            }\n            return urls[name]\n        },\n    },\n})\n</code-snippet>\n\nTo execute the script:\n\n `npx tsx gen-doc.ts` ;  `tsx`  can be installed from <a href=\"https://www.npmjs.com/package/tsx\" target=\"_blank\">\nnpm</a>.\n\nA simple example in action can be found\n[here](https://github.com/w3nest/mkdocs-ts/blob/main/examples/ts-npm/.w3nest/doc.ts).\n\nSee also <a href=\"https://typedoc.org/\" target=\"_blank\">TypeDoc documentation</a> for available options.\n\n**Notes**\n\nThis parser supports a subset of the tags available in TypeDoc. Many tags are omitted because their meaning is\nimplied by the entity's declaration, *e.g.*  `@interface` ,  `@public` ,  `@private` ,\n `@property` ,  `@readonly` ,  `@virtual` .\n\nSome tags are related to grouping, such as  `@group` ,  `@category` ,  `@categoryDescription` , and\n `@groupDescription` . Currently, entities are grouped based on the files they belong to, with the possibility of\nincluding documentation sections at the beginning of each file. Additional semantic grouping is not yet supported.\n\nIn practical terms, the essentials tags used are:\n[ `@param` ](https://typedoc.org/tags/param/), [ `@returns` ](https://typedoc.org/tags/returns/),\n[ `@typeParams` ](https://typedoc.org/tags/typeParam/), [ `@module` ](https://typedoc.org/tags/module/),\n[ `@link` ](https://typedoc.org/tags/link/).\n\n<note level=\"warning\" title=\"Important\">\n- The parser does not handle namespaces. This functionality needs to be implemented separately\n(namespaces can be treated as modules in all practical terms concerning documentation purposes).\n- Only documented and exported symbols are included in the API documentation.\n</note>\n\n**Externals links**\n\nURL to externals links can be provided using   <mkapi-api-link nav=\"@nav[code-api]/MkApiBackends/MkApiTypescript.ApiInputs.externals\" semantic=\"attribute\">ApiInputs.externals</mkapi-api-link>  if they are part of the project's\n `node_modules` .\n\nWhen external symbols are referenced:\n\n*  **In signatures**: The parser uses the   <mkapi-api-link nav=\"@nav[code-api]/MkApiBackends/MkApiTypescript.ExternalsUrl\" semantic=\"type-alias\">ExternalsUrl</mkapi-api-link>  provider. The keys referenced the package name as\nincluded in the  `node_modules` .\n*  **In documentation strings**: If  `{@link ...}`  have not been resolved by TypeDoc, the parser tries to interpret\nthem as externals using  <mkapi-api-link nav=\"@nav[code-api]/MkApiBackends/MkApiTypescript.ExternalsUrl\" semantic=\"type-alias\">ExternalsUrl</mkapi-api-link> . In this case the package name is provided explicitly using\n*e.g.*  `{@link rxjs.Subject}`  where  `rxjs`  is the package name.\n\n**Unnamed parameters**\n\nRegarding unnamed parameters:\n\n ```javascript\n\n/** Foo documentation\n@params _args0 Not relevant: parameters starting with `_` are not displayed\n@params _args0.bar A bar property\n@params _args1 Not relevant: parameters starting with `_` are not displayed\n@params _args1.baz A baz property\n**/\nexport function foo({bar}: { bar: number }, {baz}: { baz: string }) {}\n\n```",
                "contentType": "markdown",
                "semantic": {
                    "role": "",
                    "labels": [],
                    "attributes": {},
                    "relations": {}
                }
            }
        ]
    },
    "path": "code-api/MkApiBackends/MkApiTypescript",
    "navPath": "@nav[code-api]",
    "attributes": [
        {
            "name": "DOC_KINDS",
            "semantic": {
                "role": "global",
                "labels": [],
                "attributes": {},
                "relations": {}
            },
            "documentation": {
                "sections": [
                    {
                        "content": "Comment can have contribution from various kind.\nThose are the one handled by the backend.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "DOC_KINDS",
            "navPath": "@nav[code-api]/MkApiBackends/MkApiTypescript.DOC_KINDS",
            "code": {
                "filePath": "src/mkapi-backends/mkapi-typescript/typedoc-models.ts",
                "declaration": "DOC_KINDS = {\n    /**\n     * Simple text.\n     */\n    TEXT: 'text',\n    /**\n     * An anchor.\n     */\n    INLINE_TAG: 'inline-tag',\n    /**\n     * A code snippet.\n     */\n    CODE: 'code',\n}",
                "implementation": "",
                "startLine": 35,
                "endLine": 36,
                "references": {
                    "DOC_KINDS": "@nav[code-api]/MkApiBackends/MkApiTypescript.DOC_KINDS"
                }
            }
        },
        {
            "name": "TYPEDOC_KINDS",
            "semantic": {
                "role": "global",
                "labels": [],
                "attributes": {},
                "relations": {}
            },
            "documentation": {
                "sections": [
                    {
                        "content": "The kind handles by the backend.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "TYPEDOC_KINDS",
            "navPath": "@nav[code-api]/MkApiBackends/MkApiTypescript.TYPEDOC_KINDS",
            "code": {
                "filePath": "src/mkapi-backends/mkapi-typescript/typedoc-models.ts",
                "declaration": "TYPEDOC_KINDS = {\n    PROJECT: 1,\n    ENTRY_MODULE: 2,\n    MODULE: 4,\n    VARIABLE: 32,\n    FUNCTION: 64,\n    CLASS: 128,\n    INTERFACE: 256,\n    CONSTRUCTOR: 512,\n    ATTRIBUTE: 1024,\n    METHOD: 2048,\n    SIGNATURE: 4096,\n    ALIAS: 2097152,\n}",
                "implementation": "",
                "startLine": 11,
                "endLine": 12,
                "references": {
                    "TYPEDOC_KINDS": "@nav[code-api]/MkApiBackends/MkApiTypescript.TYPEDOC_KINDS"
                }
            }
        }
    ],
    "types": [
        {
            "name": "ApiInputs",
            "documentation": {
                "sections": [
                    {
                        "content": "Inputs for  <mkapi-api-link nav=\"@nav[code-api]/MkApiBackends/MkApiTypescript.generateApiFiles\" semantic=\"function\">generateApiFiles</mkapi-api-link> .",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "ApiInputs",
            "navPath": "@nav[code-api]/MkApiBackends/MkApiTypescript.ApiInputs",
            "attributes": [
                {
                    "name": "externals",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "URL to documentation for symbols referenced in external libraries (*i.e.* within  `node_modules` ).",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "ApiInputs.externals",
                    "navPath": "@nav[code-api]/MkApiBackends/MkApiTypescript.ApiInputs.externals",
                    "code": {
                        "filePath": "src/mkapi-backends/mkapi-typescript/typedoc-parser.ts",
                        "declaration": "externals?: ExternalsUrl",
                        "implementation": "",
                        "startLine": 198,
                        "endLine": 199,
                        "references": {
                            "externals": "@nav[code-api]/MkApiBackends/MkApiTypescript.ApiInputs.externals",
                            "ExternalsUrl": "@nav[code-api]/MkApiBackends/MkApiTypescript.ExternalsUrl"
                        }
                    }
                },
                {
                    "name": "extraDeclarationReferences",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "This allows to manually provide missing references in symbols' declaration.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "ApiInputs.extraDeclarationReferences",
                    "navPath": "@nav[code-api]/MkApiBackends/MkApiTypescript.ApiInputs.extraDeclarationReferences",
                    "code": {
                        "filePath": "src/mkapi-backends/mkapi-typescript/typedoc-parser.ts",
                        "declaration": "extraDeclarationReferences?: ExtraDeclarationReferences",
                        "implementation": "",
                        "startLine": 202,
                        "endLine": 203,
                        "references": {
                            "extraDeclarationReferences": "@nav[code-api]/MkApiBackends/MkApiTypescript.ApiInputs.extraDeclarationReferences",
                            "ExtraDeclarationReferences": "@nav[code-api]/MkApiBackends/MkApiTypescript.ExtraDeclarationReferences"
                        }
                    }
                },
                {
                    "name": "outputFolder",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The output folder where API files are generated.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "ApiInputs.outputFolder",
                    "navPath": "@nav[code-api]/MkApiBackends/MkApiTypescript.ApiInputs.outputFolder",
                    "code": {
                        "filePath": "src/mkapi-backends/mkapi-typescript/typedoc-parser.ts",
                        "declaration": "outputFolder: string",
                        "implementation": "",
                        "startLine": 194,
                        "endLine": 195,
                        "references": {
                            "outputFolder": "@nav[code-api]/MkApiBackends/MkApiTypescript.ApiInputs.outputFolder"
                        }
                    }
                },
                {
                    "name": "projectFolder",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Path of the project's folder, it should include a  `typedoc.js`  config, and  `typedoc`  should be available in the\n `node_modules` .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "ApiInputs.projectFolder",
                    "navPath": "@nav[code-api]/MkApiBackends/MkApiTypescript.ApiInputs.projectFolder",
                    "code": {
                        "filePath": "src/mkapi-backends/mkapi-typescript/typedoc-parser.ts",
                        "declaration": "projectFolder: string",
                        "implementation": "",
                        "startLine": 190,
                        "endLine": 191,
                        "references": {
                            "projectFolder": "@nav[code-api]/MkApiBackends/MkApiTypescript.ApiInputs.projectFolder"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/mkapi-backends/mkapi-typescript/typedoc-parser.ts",
                "declaration": "export interface ApiInputs",
                "implementation": "export interface ApiInputs {\n    /**\n     * Path of the project's folder, it should include a `typedoc.js` config, and `typedoc` should be available in the\n     * `node_modules`.\n     */\n    projectFolder: string\n    /**\n     * The output folder where API files are generated.\n     */\n    outputFolder: string\n    /**\n     * URL to documentation for symbols referenced in external libraries (*i.e.* within `node_modules`).\n     */\n    externals?: ExternalsUrl\n    /**\n     * This allows to manually provide missing references in symbols' declaration.\n     */\n    extraDeclarationReferences?: ExtraDeclarationReferences\n}",
                "startLine": 185,
                "endLine": 204,
                "references": {
                    "ApiInputs": "@nav[code-api]/MkApiBackends/MkApiTypescript.ApiInputs",
                    "ExternalsUrl": "@nav[code-api]/MkApiBackends/MkApiTypescript.ExternalsUrl",
                    "ExtraDeclarationReferences": "@nav[code-api]/MkApiBackends/MkApiTypescript.ExtraDeclarationReferences"
                }
            },
            "semantic": {
                "role": "interface",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "BlockTagsTrait",
            "documentation": {
                "sections": [
                    {
                        "content": "Trait for comment having block tags.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "BlockTagsTrait",
            "navPath": "@nav[code-api]/MkApiBackends/MkApiTypescript.BlockTagsTrait",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/mkapi-backends/mkapi-typescript/typedoc-models.ts",
                "declaration": "export interface BlockTagsTrait",
                "implementation": "export interface BlockTagsTrait {\n    blockTags: { tag: string; content: (DocText | DocInlineTag | DocCode)[] }[]\n}",
                "startLine": 157,
                "endLine": 160,
                "references": {
                    "BlockTagsTrait": "@nav[code-api]/MkApiBackends/MkApiTypescript.BlockTagsTrait",
                    "DocText": "@nav[code-api]/MkApiBackends/MkApiTypescript.DocText",
                    "DocInlineTag": "@nav[code-api]/MkApiBackends/MkApiTypescript.DocInlineTag",
                    "DocCode": "@nav[code-api]/MkApiBackends/MkApiTypescript.DocCode"
                }
            },
            "semantic": {
                "role": "interface",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "Comment",
            "documentation": {
                "sections": [
                    {
                        "content": "A comment.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "Comment",
            "navPath": "@nav[code-api]/MkApiBackends/MkApiTypescript.Comment",
            "attributes": [
                {
                    "name": "summary",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The summary.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "Comment.summary",
                    "navPath": "@nav[code-api]/MkApiBackends/MkApiTypescript.Comment.summary",
                    "code": {
                        "filePath": "src/mkapi-backends/mkapi-typescript/typedoc-models.ts",
                        "declaration": "summary: CommentSection",
                        "implementation": "",
                        "startLine": 88,
                        "endLine": 89,
                        "references": {
                            "summary": "@nav[code-api]/MkApiBackends/MkApiTypescript.Comment.summary",
                            "CommentSection": "@nav[code-api]/MkApiBackends/MkApiTypescript.CommentSection"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/mkapi-backends/mkapi-typescript/typedoc-models.ts",
                "declaration": "export interface Comment",
                "implementation": "export interface Comment {\n    /**\n     * The summary.\n     */\n    summary: CommentSection\n}",
                "startLine": 84,
                "endLine": 90,
                "references": {
                    "Comment": "@nav[code-api]/MkApiBackends/MkApiTypescript.Comment",
                    "CommentSection": "@nav[code-api]/MkApiBackends/MkApiTypescript.CommentSection"
                }
            },
            "semantic": {
                "role": "interface",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "DocCode",
            "documentation": {
                "sections": [
                    {
                        "content": "Code element in documentation.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "DocCode",
            "navPath": "@nav[code-api]/MkApiBackends/MkApiTypescript.DocCode",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/mkapi-backends/mkapi-typescript/typedoc-models.ts",
                "declaration": "export interface DocCode",
                "implementation": "export interface DocCode {\n    kind: 'code'\n    text: string\n}",
                "startLine": 71,
                "endLine": 75,
                "references": {
                    "DocCode": "@nav[code-api]/MkApiBackends/MkApiTypescript.DocCode"
                }
            },
            "semantic": {
                "role": "interface",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "DocInlineTag",
            "documentation": {
                "sections": [
                    {
                        "content": "Anchor element in documentation.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "DocInlineTag",
            "navPath": "@nav[code-api]/MkApiBackends/MkApiTypescript.DocInlineTag",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/mkapi-backends/mkapi-typescript/typedoc-models.ts",
                "declaration": "export interface DocInlineTag",
                "implementation": "export interface DocInlineTag {\n    kind: 'inline-tag'\n    tag: '@link'\n    text: string\n    target: string | number | { qualifiedName: string; sourceFileName: string }\n}",
                "startLine": 61,
                "endLine": 67,
                "references": {
                    "DocInlineTag": "@nav[code-api]/MkApiBackends/MkApiTypescript.DocInlineTag"
                }
            },
            "semantic": {
                "role": "interface",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "DocText",
            "documentation": {
                "sections": [
                    {
                        "content": "Simple text element in documentation.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "DocText",
            "navPath": "@nav[code-api]/MkApiBackends/MkApiTypescript.DocText",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/mkapi-backends/mkapi-typescript/typedoc-models.ts",
                "declaration": "export interface DocText",
                "implementation": "export interface DocText {\n    kind: 'text'\n    text: string\n}",
                "startLine": 53,
                "endLine": 57,
                "references": {
                    "DocText": "@nav[code-api]/MkApiBackends/MkApiTypescript.DocText"
                }
            },
            "semantic": {
                "role": "interface",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "ProjectGlobals",
            "documentation": {
                "sections": [
                    {
                        "content": "Global project information.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "ProjectGlobals",
            "navPath": "@nav[code-api]/MkApiBackends/MkApiTypescript.ProjectGlobals",
            "attributes": [
                {
                    "name": "externals",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "URL getter for external symbols.\n\nTo include links for a given package  `foo` , provide an entry for  `foo` .\nNo link is generated for external packages not referenced here.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "ProjectGlobals.externals",
                    "navPath": "@nav[code-api]/MkApiBackends/MkApiTypescript.ProjectGlobals.externals",
                    "code": {
                        "filePath": "src/mkapi-backends/mkapi-typescript/typedoc-parser.ts",
                        "declaration": "externals?: ExternalsUrl",
                        "implementation": "",
                        "startLine": 97,
                        "endLine": 98,
                        "references": {
                            "externals": "@nav[code-api]/MkApiBackends/MkApiTypescript.ProjectGlobals.externals",
                            "ExternalsUrl": "@nav[code-api]/MkApiBackends/MkApiTypescript.ExternalsUrl"
                        }
                    }
                },
                {
                    "name": "navigations",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Map  `node.id`  => navigation path",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "ProjectGlobals.navigations",
                    "navPath": "@nav[code-api]/MkApiBackends/MkApiTypescript.ProjectGlobals.navigations",
                    "code": {
                        "filePath": "src/mkapi-backends/mkapi-typescript/typedoc-parser.ts",
                        "declaration": "navigations: Record<number, string>",
                        "implementation": "",
                        "startLine": 78,
                        "endLine": 79,
                        "references": {
                            "navigations": "@nav[code-api]/MkApiBackends/MkApiTypescript.ProjectGlobals.navigations",
                            "Record": "https://www.typescriptlang.org/docs/handbook/utility-types.html#recordkeys-type"
                        }
                    }
                },
                {
                    "name": "tsInputs",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Map  `navigation path`  => source information",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "ProjectGlobals.tsInputs",
                    "navPath": "@nav[code-api]/MkApiBackends/MkApiTypescript.ProjectGlobals.tsInputs",
                    "code": {
                        "filePath": "src/mkapi-backends/mkapi-typescript/typedoc-parser.ts",
                        "declaration": "tsInputs: TsSrcElements",
                        "implementation": "",
                        "startLine": 82,
                        "endLine": 83,
                        "references": {
                            "tsInputs": "@nav[code-api]/MkApiBackends/MkApiTypescript.ProjectGlobals.tsInputs",
                            "TsSrcElements": "@nav[code-api]/MkApiBackends/MkApiTypescript.TsSrcElements"
                        }
                    }
                },
                {
                    "name": "typedocIdMap",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Map  `node.id`  =>  `TypedocNode`",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "ProjectGlobals.typedocIdMap",
                    "navPath": "@nav[code-api]/MkApiBackends/MkApiTypescript.ProjectGlobals.typedocIdMap",
                    "code": {
                        "filePath": "src/mkapi-backends/mkapi-typescript/typedoc-parser.ts",
                        "declaration": "typedocIdMap: Record<number, TypedocNode | undefined>",
                        "implementation": "",
                        "startLine": 86,
                        "endLine": 87,
                        "references": {
                            "typedocIdMap": "@nav[code-api]/MkApiBackends/MkApiTypescript.ProjectGlobals.typedocIdMap",
                            "TypedocNode": "@nav[code-api]/MkApiBackends/MkApiTypescript.TypedocNode",
                            "Record": "https://www.typescriptlang.org/docs/handbook/utility-types.html#recordkeys-type"
                        }
                    }
                },
                {
                    "name": "typedocParentIdMap",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Map  `node.id`  => parent's node  `TypedocNode`",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "ProjectGlobals.typedocParentIdMap",
                    "navPath": "@nav[code-api]/MkApiBackends/MkApiTypescript.ProjectGlobals.typedocParentIdMap",
                    "code": {
                        "filePath": "src/mkapi-backends/mkapi-typescript/typedoc-parser.ts",
                        "declaration": "typedocParentIdMap: Record<number, TypedocNode>",
                        "implementation": "",
                        "startLine": 90,
                        "endLine": 91,
                        "references": {
                            "typedocParentIdMap": "@nav[code-api]/MkApiBackends/MkApiTypescript.ProjectGlobals.typedocParentIdMap",
                            "TypedocNode": "@nav[code-api]/MkApiBackends/MkApiTypescript.TypedocNode",
                            "Record": "https://www.typescriptlang.org/docs/handbook/utility-types.html#recordkeys-type"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/mkapi-backends/mkapi-typescript/typedoc-parser.ts",
                "declaration": "export interface ProjectGlobals",
                "implementation": "export interface ProjectGlobals {\n    /**\n     * Map `node.id` => navigation path\n     */\n    navigations: Record<number, string>\n    /**\n     * Map `navigation path` => source information\n     */\n    tsInputs: TsSrcElements\n    /**\n     * Map `node.id` => `TypedocNode`\n     */\n    typedocIdMap: Record<number, TypedocNode | undefined>\n    /**\n     * Map `node.id` => parent's node `TypedocNode`\n     */\n    typedocParentIdMap: Record<number, TypedocNode>\n    /**\n     * URL getter for external symbols.\n     *\n     * To include links for a given package `foo`, provide an entry for `foo`.\n     * No link is generated for external packages not referenced here.\n     */\n    externals?: ExternalsUrl\n\n    extraDeclarationReferences?: ExtraDeclarationReferences\n}",
                "startLine": 74,
                "endLine": 101,
                "references": {
                    "ProjectGlobals": "@nav[code-api]/MkApiBackends/MkApiTypescript.ProjectGlobals",
                    "ExternalsUrl": "@nav[code-api]/MkApiBackends/MkApiTypescript.ExternalsUrl",
                    "ExtraDeclarationReferences": "@nav[code-api]/MkApiBackends/MkApiTypescript.ExtraDeclarationReferences",
                    "TsSrcElements": "@nav[code-api]/MkApiBackends/MkApiTypescript.TsSrcElements",
                    "TypedocNode": "@nav[code-api]/MkApiBackends/MkApiTypescript.TypedocNode",
                    "Record": "https://www.typescriptlang.org/docs/handbook/utility-types.html#recordkeys-type"
                }
            },
            "semantic": {
                "role": "interface",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "Source",
            "documentation": {
                "sections": [
                    {
                        "content": "Source specification",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "Source",
            "navPath": "@nav[code-api]/MkApiBackends/MkApiTypescript.Source",
            "attributes": [
                {
                    "name": "fileName",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Filename including the snippet.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "Source.fileName",
                    "navPath": "@nav[code-api]/MkApiBackends/MkApiTypescript.Source.fileName",
                    "code": {
                        "filePath": "src/mkapi-backends/mkapi-typescript/typedoc-models.ts",
                        "declaration": "fileName: string",
                        "implementation": "",
                        "startLine": 98,
                        "endLine": 99,
                        "references": {
                            "fileName": "@nav[code-api]/MkApiBackends/MkApiTypescript.Source.fileName"
                        }
                    }
                },
                {
                    "name": "line",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Starting line.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "Source.line",
                    "navPath": "@nav[code-api]/MkApiBackends/MkApiTypescript.Source.line",
                    "code": {
                        "filePath": "src/mkapi-backends/mkapi-typescript/typedoc-models.ts",
                        "declaration": "line: number",
                        "implementation": "",
                        "startLine": 102,
                        "endLine": 103,
                        "references": {
                            "line": "@nav[code-api]/MkApiBackends/MkApiTypescript.Source.line"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/mkapi-backends/mkapi-typescript/typedoc-models.ts",
                "declaration": "export interface Source",
                "implementation": "export interface Source {\n    /**\n     * Filename including the snippet.\n     */\n    fileName: string\n    /**\n     * Starting line.\n     */\n    line: number\n}",
                "startLine": 94,
                "endLine": 104,
                "references": {
                    "Source": "@nav[code-api]/MkApiBackends/MkApiTypescript.Source"
                }
            },
            "semantic": {
                "role": "interface",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "SymbolTrait",
            "documentation": {
                "sections": [
                    {
                        "content": "Trait specific of a symbol.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "SymbolTrait",
            "navPath": "@nav[code-api]/MkApiBackends/MkApiTypescript.SymbolTrait",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/mkapi-backends/mkapi-typescript/typedoc-models.ts",
                "declaration": "export interface SymbolTrait",
                "implementation": "export interface SymbolTrait {\n    sources: Source[]\n    typeParameters?: TypedocNode[] | null\n}",
                "startLine": 108,
                "endLine": 112,
                "references": {
                    "SymbolTrait": "@nav[code-api]/MkApiBackends/MkApiTypescript.SymbolTrait",
                    "Source": "@nav[code-api]/MkApiBackends/MkApiTypescript.Source",
                    "TypedocNode": "@nav[code-api]/MkApiBackends/MkApiTypescript.TypedocNode"
                }
            },
            "semantic": {
                "role": "interface",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "TsSrcElement",
            "documentation": {
                "sections": [
                    {
                        "content": "Gather additional source code information w/ typedoc required for parsing",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "TsSrcElement",
            "navPath": "@nav[code-api]/MkApiBackends/MkApiTypescript.TsSrcElement",
            "attributes": [
                {
                    "name": "comment",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The code-comment of the symbol as included in the source file (if any).",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "TsSrcElement.comment",
                    "navPath": "@nav[code-api]/MkApiBackends/MkApiTypescript.TsSrcElement.comment",
                    "code": {
                        "filePath": "src/mkapi-backends/mkapi-typescript/generate-ts-inputs.ts",
                        "declaration": "comment?: string",
                        "implementation": "",
                        "startLine": 288,
                        "endLine": 289,
                        "references": {
                            "comment": "@nav[code-api]/MkApiBackends/MkApiTypescript.TsSrcElement.comment"
                        }
                    }
                },
                {
                    "name": "declaration",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The declaration of the symbol as included in the source file (if any).",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "TsSrcElement.declaration",
                    "navPath": "@nav[code-api]/MkApiBackends/MkApiTypescript.TsSrcElement.declaration",
                    "code": {
                        "filePath": "src/mkapi-backends/mkapi-typescript/generate-ts-inputs.ts",
                        "declaration": "declaration?: string",
                        "implementation": "",
                        "startLine": 280,
                        "endLine": 281,
                        "references": {
                            "declaration": "@nav[code-api]/MkApiBackends/MkApiTypescript.TsSrcElement.declaration"
                        }
                    }
                },
                {
                    "name": "implementation",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The implementation of the symbol as included in the source file (if any).",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "TsSrcElement.implementation",
                    "navPath": "@nav[code-api]/MkApiBackends/MkApiTypescript.TsSrcElement.implementation",
                    "code": {
                        "filePath": "src/mkapi-backends/mkapi-typescript/generate-ts-inputs.ts",
                        "declaration": "implementation?: string",
                        "implementation": "",
                        "startLine": 284,
                        "endLine": 285,
                        "references": {
                            "implementation": "@nav[code-api]/MkApiBackends/MkApiTypescript.TsSrcElement.implementation"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/mkapi-backends/mkapi-typescript/generate-ts-inputs.ts",
                "declaration": "export interface TsSrcElement",
                "implementation": "export interface TsSrcElement {\n    /**\n     * The declaration of the symbol as included in the source file (if any).\n     */\n    declaration?: string\n    /**\n     * The implementation of the symbol as included in the source file (if any).\n     */\n    implementation?: string\n    /**\n     * The code-comment of the symbol as included in the source file (if any).\n     */\n    comment?: string\n}",
                "startLine": 276,
                "endLine": 290,
                "references": {
                    "TsSrcElement": "@nav[code-api]/MkApiBackends/MkApiTypescript.TsSrcElement"
                }
            },
            "semantic": {
                "role": "interface",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "TypedocNode",
            "documentation": {
                "sections": [
                    {
                        "content": "Base type for typedoc node.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "TypedocNode",
            "navPath": "@nav[code-api]/MkApiBackends/MkApiTypescript.TypedocNode",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/mkapi-backends/mkapi-typescript/typedoc-models.ts",
                "declaration": "export interface TypedocNode",
                "implementation": "export interface TypedocNode {\n    id: number\n    name: string\n    kind: Kind\n    flags: Record<string, string>\n    comment?: Comment\n    children?: TypedocNode[]\n}",
                "startLine": 170,
                "endLine": 178,
                "references": {
                    "TypedocNode": "@nav[code-api]/MkApiBackends/MkApiTypescript.TypedocNode",
                    "Comment": "@nav[code-api]/MkApiBackends/MkApiTypescript.Comment",
                    "Record": "https://www.typescriptlang.org/docs/handbook/utility-types.html#recordkeys-type"
                }
            },
            "semantic": {
                "role": "interface",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "ClassTrait",
            "documentation": {
                "sections": [
                    {
                        "content": "Trait specific of a class.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "ClassTrait",
            "navPath": "@nav[code-api]/MkApiBackends/MkApiTypescript.ClassTrait",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/mkapi-backends/mkapi-typescript/typedoc-models.ts",
                "declaration": "export type ClassTrait = SymbolTrait & {\n    extendedTypes: TypedocNode[] | null\n    implementedTypes: TypedocNode[] | null\n}",
                "implementation": "",
                "startLine": 123,
                "endLine": 124,
                "references": {
                    "ClassTrait": "@nav[code-api]/MkApiBackends/MkApiTypescript.ClassTrait",
                    "SymbolTrait": "@nav[code-api]/MkApiBackends/MkApiTypescript.SymbolTrait",
                    "TypedocNode": "@nav[code-api]/MkApiBackends/MkApiTypescript.TypedocNode"
                }
            },
            "semantic": {
                "role": "type-alias",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "CommentSection",
            "documentation": {
                "sections": [
                    {
                        "content": "A typedocNodes in the comment.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "CommentSection",
            "navPath": "@nav[code-api]/MkApiBackends/MkApiTypescript.CommentSection",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/mkapi-backends/mkapi-typescript/typedoc-models.ts",
                "declaration": "export type CommentSection = (DocText | DocInlineTag | DocCode)[]",
                "implementation": "",
                "startLine": 79,
                "endLine": 80,
                "references": {
                    "CommentSection": "@nav[code-api]/MkApiBackends/MkApiTypescript.CommentSection",
                    "DocText": "@nav[code-api]/MkApiBackends/MkApiTypescript.DocText",
                    "DocInlineTag": "@nav[code-api]/MkApiBackends/MkApiTypescript.DocInlineTag",
                    "DocCode": "@nav[code-api]/MkApiBackends/MkApiTypescript.DocCode"
                }
            },
            "semantic": {
                "role": "type-alias",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "ExternalsUrl",
            "documentation": {
                "sections": [
                    {
                        "content": "Mapping  `package name`  =>  `URL getter`  to include links to external symbols within the documentation.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "ExternalsUrl",
            "navPath": "@nav[code-api]/MkApiBackends/MkApiTypescript.ExternalsUrl",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/mkapi-backends/mkapi-typescript/typedoc-parser.ts",
                "declaration": "export type ExternalsUrl = Record<string, ExternalUrlGetter>",
                "implementation": "",
                "startLine": 61,
                "endLine": 62,
                "references": {
                    "ExternalsUrl": "@nav[code-api]/MkApiBackends/MkApiTypescript.ExternalsUrl",
                    "ExternalUrlGetter": "@nav[code-api]/MkApiBackends/MkApiTypescript.ExternalUrlGetter",
                    "Record": "https://www.typescriptlang.org/docs/handbook/utility-types.html#recordkeys-type"
                }
            },
            "semantic": {
                "role": "type-alias",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "ExternalUrlGetter",
            "documentation": {
                "sections": [
                    {
                        "content": "Represents a function that returns the link to documentation of an external symbol given its name and file path\n(within  `node_modules` ).\n\nSee  <mkapi-api-link nav=\"@nav[code-api]/MkApiBackends/MkApiTypescript.ExternalsUrl\" semantic=\"type-alias\">ExternalsUrl</mkapi-api-link> .",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "ExternalUrlGetter",
            "navPath": "@nav[code-api]/MkApiBackends/MkApiTypescript.ExternalUrlGetter",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/mkapi-backends/mkapi-typescript/typedoc-parser.ts",
                "declaration": "export type ExternalUrlGetter = (target: {\n    file?: string\n    name?: string\n}) => string | undefined",
                "implementation": "",
                "startLine": 53,
                "endLine": 54,
                "references": {
                    "ExternalUrlGetter": "@nav[code-api]/MkApiBackends/MkApiTypescript.ExternalUrlGetter"
                }
            },
            "semantic": {
                "role": "type-alias",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "ExtraDeclarationReferences",
            "documentation": {
                "sections": [
                    {
                        "content": "In some (rare) cases, TypeDoc inlined some type alias and declarations referring them not be resolved.\nThis allow to manually provide missing references.\n\nKeys are the path of the documented symbol, value a mapping  `SymbolName`  to its navigation path.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "ExtraDeclarationReferences",
            "navPath": "@nav[code-api]/MkApiBackends/MkApiTypescript.ExtraDeclarationReferences",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/mkapi-backends/mkapi-typescript/typedoc-parser.ts",
                "declaration": "export type ExtraDeclarationReferences = Record<string, Record<string, string>>",
                "implementation": "",
                "startLine": 70,
                "endLine": 71,
                "references": {
                    "ExtraDeclarationReferences": "@nav[code-api]/MkApiBackends/MkApiTypescript.ExtraDeclarationReferences",
                    "Record": "https://www.typescriptlang.org/docs/handbook/utility-types.html#recordkeys-type"
                }
            },
            "semantic": {
                "role": "type-alias",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "Kind",
            "documentation": {
                "sections": [
                    {
                        "content": "Type definition of all managed possible kinds.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "Kind",
            "navPath": "@nav[code-api]/MkApiBackends/MkApiTypescript.Kind",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/mkapi-backends/mkapi-typescript/typedoc-models.ts",
                "declaration": "export type Kind = (typeof TYPEDOC_KINDS)[keyof typeof TYPEDOC_KINDS]",
                "implementation": "",
                "startLine": 29,
                "endLine": 30,
                "references": {
                    "Kind": "@nav[code-api]/MkApiBackends/MkApiTypescript.Kind",
                    "TYPEDOC_KINDS": "@nav[code-api]/MkApiBackends/MkApiTypescript.TYPEDOC_KINDS"
                }
            },
            "semantic": {
                "role": "type-alias",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "MethodTrait",
            "documentation": {
                "sections": [
                    {
                        "content": "Trait specific of a method.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "MethodTrait",
            "navPath": "@nav[code-api]/MkApiBackends/MkApiTypescript.MethodTrait",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/mkapi-backends/mkapi-typescript/typedoc-models.ts",
                "declaration": "export type MethodTrait = SignaturesTrait & {\n    inheritedFrom?: {\n        type: string\n        target: number\n        name: string\n    }\n}",
                "implementation": "",
                "startLine": 181,
                "endLine": 182,
                "references": {
                    "MethodTrait": "@nav[code-api]/MkApiBackends/MkApiTypescript.MethodTrait",
                    "SignaturesTrait": "@nav[code-api]/MkApiBackends/MkApiTypescript.SignaturesTrait"
                }
            },
            "semantic": {
                "role": "type-alias",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "SignaturesTrait",
            "documentation": {
                "sections": [
                    {
                        "content": "Trait specific of a function.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "SignaturesTrait",
            "navPath": "@nav[code-api]/MkApiBackends/MkApiTypescript.SignaturesTrait",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/mkapi-backends/mkapi-typescript/typedoc-models.ts",
                "declaration": "export type SignaturesTrait = SymbolTrait & {\n    signatures: (TypedocNode & SignatureTrait)[]\n}",
                "implementation": "",
                "startLine": 141,
                "endLine": 142,
                "references": {
                    "SignaturesTrait": "@nav[code-api]/MkApiBackends/MkApiTypescript.SignaturesTrait",
                    "SymbolTrait": "@nav[code-api]/MkApiBackends/MkApiTypescript.SymbolTrait",
                    "TypedocNode": "@nav[code-api]/MkApiBackends/MkApiTypescript.TypedocNode",
                    "SignatureTrait": "@nav[code-api]/MkApiBackends/MkApiTypescript.SignatureTrait"
                }
            },
            "semantic": {
                "role": "type-alias",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "SignatureTrait",
            "documentation": {
                "sections": [
                    {
                        "content": "Trait specific of a signature.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "SignatureTrait",
            "navPath": "@nav[code-api]/MkApiBackends/MkApiTypescript.SignatureTrait",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/mkapi-backends/mkapi-typescript/typedoc-models.ts",
                "declaration": "export type SignatureTrait = SymbolTrait & {\n    extendedTypes: TypedocNode[] | null\n    implementedTypes: TypedocNode[] | null\n    parameters: TypedocNode[] | null\n    type: TypedocNode\n    comment: string\n}",
                "implementation": "",
                "startLine": 131,
                "endLine": 132,
                "references": {
                    "SignatureTrait": "@nav[code-api]/MkApiBackends/MkApiTypescript.SignatureTrait",
                    "SymbolTrait": "@nav[code-api]/MkApiBackends/MkApiTypescript.SymbolTrait",
                    "TypedocNode": "@nav[code-api]/MkApiBackends/MkApiTypescript.TypedocNode"
                }
            },
            "semantic": {
                "role": "type-alias",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "TsSrcElements",
            "documentation": {
                "sections": [
                    {
                        "content": "Gather additional  source code information w/ typedoc required for parsing for all files.\nKeys are in the form \"FILE_PATH:ENTITY_PATH\".",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "TsSrcElements",
            "navPath": "@nav[code-api]/MkApiBackends/MkApiTypescript.TsSrcElements",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/mkapi-backends/mkapi-typescript/generate-ts-inputs.ts",
                "declaration": "export type TsSrcElements = Record<string, TsSrcElement>",
                "implementation": "",
                "startLine": 295,
                "endLine": 296,
                "references": {
                    "TsSrcElements": "@nav[code-api]/MkApiBackends/MkApiTypescript.TsSrcElements",
                    "TsSrcElement": "@nav[code-api]/MkApiBackends/MkApiTypescript.TsSrcElement",
                    "Record": "https://www.typescriptlang.org/docs/handbook/utility-types.html#recordkeys-type"
                }
            },
            "semantic": {
                "role": "type-alias",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        }
    ],
    "callables": [
        {
            "name": "generateApiFiles",
            "documentation": {
                "sections": [
                    {
                        "content": "Entry point function to generate API files.\n\nThe general operations of the backend involve:\n\n- Gathering TypeScript information using  <mkapi-api-link nav=\"@nav[code-api]/MkApiBackends/MkApiTypescript.generateTsInputs\" semantic=\"function\">generateTsInputs</mkapi-api-link> .\n\n- Gathering TypeDoc information using  <mkapi-api-link nav=\"@nav[code-api]/MkApiBackends/MkApiTypescript.generateTypedocInputs\" semantic=\"function\">generateTypedocInputs</mkapi-api-link> .\n\n- Creating the output files.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    },
                    {
                        "title": "Arguments",
                        "content": "\n*  **params**: Input parameters.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "arguments",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "generateApiFiles",
            "navPath": "@nav[code-api]/MkApiBackends/MkApiTypescript.generateApiFiles",
            "code": {
                "filePath": "src/mkapi-backends/mkapi-typescript/typedoc-parser.ts",
                "declaration": "export function generateApiFiles(params: ApiInputs)",
                "implementation": "export function generateApiFiles(params: ApiInputs) {\n    const { externals, extraDeclarationReferences } = params\n    const projectFolder = path.resolve(params.projectFolder)\n    const outputFolder = path.resolve(params.outputFolder)\n    const projectPackageJson = fs.readFileSync(\n        pathLib.resolve(projectFolder, 'package.json'),\n        'utf8',\n    )\n    // module name should not include '/', before finding a better solution\n    const pkgJSON = JSON.parse(projectPackageJson) as { name: string }\n    const project = pkgJSON.name.split('/').slice(-1)[0]\n    function generateApiFilesRec(\n        modulePath: string,\n        typedocNode: TypedocNode & ProjectTrait,\n        tsInputs: TsSrcElements,\n        writeFolder: string,\n    ) {\n        const doc = parseModule({\n            typedocNode,\n            project,\n            modulePath,\n            tsInputs: tsInputs,\n            externals,\n            extraDeclarationReferences,\n        })\n\n        const filePath = `${writeFolder}/${modulePath}.json`\n        const directory = Path.dirname(filePath)\n        // Create missing directories if they don't exist\n        mkdirSync(directory, { recursive: true })\n        writeFileSync(filePath, JSON.stringify(doc, null, 4) + '\\n', 'utf8')\n\n        for (const m of doc.children) {\n            generateApiFilesRec(\n                m.path.replace('.', '/'),\n                typedocNode,\n                tsInputs,\n                writeFolder,\n            )\n        }\n    }\n    deleteDirectoryIfExists(outputFolder)\n\n    const typedocData = generateTypedocInputs(projectFolder)\n    const files = gatherTsFiles({ typedocNode: typedocData })\n    const tsData = generateTsInputs(projectFolder, files, {})\n    generateApiFilesRec(project, typedocData, tsData, outputFolder)\n}",
                "startLine": 217,
                "endLine": 265,
                "references": {
                    "generateApiFiles": "@nav[code-api]/MkApiBackends/MkApiTypescript.generateApiFiles",
                    "ApiInputs": "@nav[code-api]/MkApiBackends/MkApiTypescript.ApiInputs"
                }
            },
            "semantic": {
                "role": "function",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "generateTsInputs",
            "documentation": {
                "sections": [
                    {
                        "content": "Generate the global dictionary of typescript inputs required for parsing.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    },
                    {
                        "title": "Arguments",
                        "content": "\n*  **rootPath**: root path of the project to parse.\n*  **files**: set of files to process by typescript compiler.\n*  **elements**: aggregated entities so far.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "arguments",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "generateTsInputs",
            "navPath": "@nav[code-api]/MkApiBackends/MkApiTypescript.generateTsInputs",
            "code": {
                "filePath": "src/mkapi-backends/mkapi-typescript/generate-ts-inputs.ts",
                "declaration": "export function generateTsInputs(\n    rootPath: string,\n    files: Set<string>,\n    elements: TsSrcElements = {},\n): TsSrcElements",
                "implementation": "export function generateTsInputs(\n    rootPath: string,\n    files: Set<string>,\n    elements: TsSrcElements = {},\n): TsSrcElements {\n    rootPath = rootPath.endsWith('/') ? rootPath : `${rootPath}/`\n    files.forEach((file) => {\n        const filePath = path.join(rootPath, file)\n        processFile(rootPath, filePath, elements)\n    })\n    return elements\n}",
                "startLine": 304,
                "endLine": 316,
                "references": {
                    "generateTsInputs": "@nav[code-api]/MkApiBackends/MkApiTypescript.generateTsInputs",
                    "TsSrcElements": "@nav[code-api]/MkApiBackends/MkApiTypescript.TsSrcElements",
                    "Set": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set"
                }
            },
            "semantic": {
                "role": "function",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "generateTypedocInputs",
            "documentation": {
                "sections": [
                    {
                        "content": "Extract typedoc required inputs by running it from the given folder.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    },
                    {
                        "title": "Arguments",
                        "content": "\n*  **projectFolder**: The folder in which  `typedoc`  is run.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "arguments",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    },
                    {
                        "title": "Returns",
                        "content": "The  `typedoc`  node datastructure representing the project.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "returns",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "generateTypedocInputs",
            "navPath": "@nav[code-api]/MkApiBackends/MkApiTypescript.generateTypedocInputs",
            "code": {
                "filePath": "src/mkapi-backends/mkapi-typescript/generate-typedoc-inputs.ts",
                "declaration": "export function generateTypedocInputs(\n    projectFolder: string,\n): TypedocNode & ProjectTrait",
                "implementation": "export function generateTypedocInputs(\n    projectFolder: string,\n): TypedocNode & ProjectTrait {\n    const uid = randomUUID()\n    const folder = path.resolve(projectFolder)\n    console.log('Run typedoc from folder', folder)\n    const output = path.resolve(folder, `typedoc-out-${uid}.json`)\n    const typedoc = path.resolve(\n        folder,\n        'node_modules',\n        'typedoc',\n        'bin',\n        'typedoc',\n    )\n    const result = spawnSync(\n        typedoc,\n        ['--json', output, '--basePath', projectFolder],\n        { cwd: folder },\n    )\n\n    console.log(`stdout: ${result.stdout.toString()}`)\n\n    // Log process exit code\n    if (result.status !== null) {\n        console.log(`typedoc process exited with code ${String(result.status)}`)\n        if (result.status > 0) {\n            console.error(\n                `Error executing typedoc: ${String(result.error)} ${result.stderr.toString()}`,\n            )\n            throw Error(\n                `Typedoc exited with non zero status code (${String(result.status)})`,\n            )\n        }\n    }\n    const fileContent = fs.readFileSync(output, 'utf8')\n    fs.unlinkSync(output)\n    return JSON.parse(fileContent) as TypedocNode & ProjectTrait\n}",
                "startLine": 12,
                "endLine": 50,
                "references": {
                    "generateTypedocInputs": "@nav[code-api]/MkApiBackends/MkApiTypescript.generateTypedocInputs",
                    "TypedocNode": "@nav[code-api]/MkApiBackends/MkApiTypescript.TypedocNode",
                    "ProjectTrait": "@nav[code-api]/MkApiBackends/MkApiTypescript.ProjectTrait"
                }
            },
            "semantic": {
                "role": "function",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "parseAttribute",
            "documentation": {
                "sections": [
                    {
                        "content": "Parse an attribute.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    },
                    {
                        "title": "Arguments",
                        "content": "\n*  **parentElement**: Parent node of the documentation.\n*  **projectGlobals**: Project's global.\n*  **typedocNode**: Input node.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "arguments",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    },
                    {
                        "title": "Returns",
                        "content": "Callable element.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "returns",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "parseAttribute",
            "navPath": "@nav[code-api]/MkApiBackends/MkApiTypescript.parseAttribute",
            "code": {
                "filePath": "src/mkapi-backends/mkapi-typescript/typedoc-parser.ts",
                "declaration": "export function parseAttribute({\n    typedocNode,\n    projectGlobals,\n    parentElement,\n    parentPath,\n}: {\n    typedocNode: TypedocNode & SymbolTrait\n    projectGlobals: ProjectGlobals\n    parentPath: string\n    parentElement: TypedocNode\n}): Attribute | undefined",
                "implementation": "export function parseAttribute({\n    typedocNode,\n    projectGlobals,\n    parentElement,\n    parentPath,\n}: {\n    typedocNode: TypedocNode & SymbolTrait\n    projectGlobals: ProjectGlobals\n    parentPath: string\n    parentElement: TypedocNode\n}): Attribute | undefined {\n    if (\n        hasInheritedTrait(typedocNode) &&\n        !projectGlobals.typedocIdMap[typedocNode.inheritedFrom.target]\n    ) {\n        return undefined\n    }\n    const name = typedocNode.name\n    const path = `${parentPath}.${name}`\n    if (hasInheritedTrait(typedocNode)) {\n        typedocNode = projectGlobals.typedocIdMap[\n            typedocNode.inheritedFrom.target\n        ] as TypedocNode & SymbolTrait\n        parentElement = projectGlobals.typedocParentIdMap[typedocNode.id]\n    }\n    const references = gather_symbol_references(\n        typedocNode,\n        path,\n        projectGlobals,\n    )\n    const documentation = typedocNode.comment\n        ? parseDocumentationElements({\n              typedocNodes: typedocNode.comment.summary,\n              parent: parentElement,\n              projectGlobals,\n          })\n        : ''\n    const semantic = semantics[typedocNode.kind]\n    const isGlobal = [\n        TYPEDOC_KINDS.PROJECT,\n        TYPEDOC_KINDS.MODULE,\n        TYPEDOC_KINDS.ENTRY_MODULE,\n    ].includes(parentElement.kind)\n    return {\n        name: name,\n        semantic: semantic,\n        documentation: getSummaryDoc(documentation),\n        path: isGlobal ? name : `${parentElement.name}.${name}`,\n        navPath: projectGlobals.navigations[typedocNode.id],\n        code: parseCode({\n            typedocNode: typedocNode,\n            projectGlobals,\n            references,\n            parentElement: isGlobal ? undefined : parentElement,\n        }),\n    }\n}",
                "startLine": 1024,
                "endLine": 1081,
                "references": {
                    "parseAttribute": "@nav[code-api]/MkApiBackends/MkApiTypescript.parseAttribute",
                    "TypedocNode": "@nav[code-api]/MkApiBackends/MkApiTypescript.TypedocNode",
                    "ProjectGlobals": "@nav[code-api]/MkApiBackends/MkApiTypescript.ProjectGlobals",
                    "SymbolTrait": "@nav[code-api]/MkApiBackends/MkApiTypescript.SymbolTrait",
                    "Entity": "@nav[code-api].Entity"
                }
            },
            "semantic": {
                "role": "function",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "parseCallable",
            "documentation": {
                "sections": [
                    {
                        "content": "Parse a callable to extract code information.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    },
                    {
                        "title": "Arguments",
                        "content": "\n*  **parentElement**: Parent node of the documentation.\n*  **projectGlobals**: Project's global.\n*  **semantic**: Semantic definition of the callable.\n*  **typedocNode**: Input node.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "arguments",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    },
                    {
                        "title": "Returns",
                        "content": "Callable element.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "returns",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "parseCallable",
            "navPath": "@nav[code-api]/MkApiBackends/MkApiTypescript.parseCallable",
            "code": {
                "filePath": "src/mkapi-backends/mkapi-typescript/typedoc-parser.ts",
                "declaration": "export function parseCallable({\n    typedocNode,\n    semantic,\n    projectGlobals,\n    parentPath,\n    parentElement,\n}: {\n    typedocNode: TypedocNode & SignaturesTrait\n    parentPath: string\n    semantic: Semantic\n    projectGlobals: ProjectGlobals\n    parentElement?: TypedocNode\n}): Callable | undefined",
                "implementation": "export function parseCallable({\n    typedocNode,\n    semantic,\n    projectGlobals,\n    parentPath,\n    parentElement,\n}: {\n    typedocNode: TypedocNode & SignaturesTrait\n    parentPath: string\n    semantic: Semantic\n    projectGlobals: ProjectGlobals\n    parentElement?: TypedocNode\n}): Callable | undefined {\n    if (\n        hasInheritedTrait(typedocNode) &&\n        !projectGlobals.typedocIdMap[typedocNode.inheritedFrom.target]\n    ) {\n        return undefined\n    }\n    const typedocFct = typedocNode.signatures[0]\n\n    const name =\n        semantic.role === 'constructor' ? 'constructor' : typedocFct.name\n\n    const documentation = parseDocumentationElements({\n        typedocNodes: typedocFct.comment.summary,\n        parent: typedocFct,\n        projectGlobals,\n    })\n    const path = `${parentPath}.${name}`\n    const params_ref = typedocFct.parameters\n        ? gather_symbol_references(typedocFct.parameters, path, projectGlobals)\n        : {}\n    const returns_ref = gather_symbol_references(\n        typedocFct.type,\n        path,\n        projectGlobals,\n    )\n    const functionDoc = getSummaryDoc(documentation)\n    const parametersDoc = typedocFct.parameters\n        ? parseArgumentsDoc({\n              fromElement: typedocFct.parameters,\n              title: 'Arguments',\n              parentElement: typedocFct,\n              projectGlobals,\n          })\n        : undefined\n    const tParamDoc = typedocFct.typeParameters\n        ? parseArgumentsDoc({\n              fromElement: typedocFct.typeParameters,\n              title: 'Generics',\n              parentElement: typedocFct,\n              projectGlobals,\n          })\n        : undefined\n    const returnsDoc = parseReturnsDoc({\n        typedocNode: typedocFct,\n        projectGlobals,\n    })\n\n    functionDoc.sections.push(\n        ...[parametersDoc, tParamDoc, returnsDoc].filter(\n            (c) => c !== undefined,\n        ),\n    )\n    return {\n        name,\n        documentation: functionDoc,\n        path: parentElement ? `${parentElement.name}.${name}` : name, //`${typedocFct.sources[0].fileName}:${path}`,\n        navPath: projectGlobals.navigations[typedocNode.id],\n        code: parseCode({\n            typedocNode,\n            projectGlobals,\n            references: {\n                ...params_ref,\n                ...returns_ref,\n            },\n            parentElement,\n        }),\n        semantic,\n    }\n}",
                "startLine": 757,
                "endLine": 839,
                "references": {
                    "parseCallable": "@nav[code-api]/MkApiBackends/MkApiTypescript.parseCallable",
                    "TypedocNode": "@nav[code-api]/MkApiBackends/MkApiTypescript.TypedocNode",
                    "ProjectGlobals": "@nav[code-api]/MkApiBackends/MkApiTypescript.ProjectGlobals",
                    "Semantic": "@nav[code-api].Semantic",
                    "SymbolTrait": "@nav[code-api]/MkApiBackends/MkApiTypescript.SymbolTrait",
                    "Entity": "@nav[code-api].Entity"
                }
            },
            "semantic": {
                "role": "function",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "parseChildModule",
            "documentation": {
                "sections": [
                    {
                        "content": "Parse a child module.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    },
                    {
                        "title": "Arguments",
                        "content": "\n*  **parentPath**: Parent path.\n*  **typedocNode**: Input node.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "arguments",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    },
                    {
                        "title": "Returns",
                        "content": "Ouput structure.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "returns",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "parseChildModule",
            "navPath": "@nav[code-api]/MkApiBackends/MkApiTypescript.parseChildModule",
            "code": {
                "filePath": "src/mkapi-backends/mkapi-typescript/typedoc-parser.ts",
                "declaration": "export function parseChildModule({\n    typedocNode,\n    parentPath,\n    projectGlobals,\n}: {\n    typedocNode: TypedocNode\n    parentPath: string\n    projectGlobals: ProjectGlobals\n}): ChildModule",
                "implementation": "export function parseChildModule({\n    typedocNode,\n    parentPath,\n    projectGlobals,\n}: {\n    typedocNode: TypedocNode\n    parentPath: string\n    projectGlobals: ProjectGlobals\n}): ChildModule {\n    const children = typedocNode.children ?? []\n    return {\n        name: typedocNode.name,\n        semantic: semantics[TYPEDOC_KINDS.MODULE],\n        path: `${parentPath}.${typedocNode.name}`,\n        navPath: projectGlobals.navigations[typedocNode.id],\n        isLeaf: !children.some((c) =>\n            [TYPEDOC_KINDS.MODULE, TYPEDOC_KINDS.ENTRY_MODULE].includes(c.kind),\n        ),\n    }\n}",
                "startLine": 510,
                "endLine": 530,
                "references": {
                    "parseChildModule": "@nav[code-api]/MkApiBackends/MkApiTypescript.parseChildModule",
                    "ProjectGlobals": "@nav[code-api]/MkApiBackends/MkApiTypescript.ProjectGlobals",
                    "TypedocNode": "@nav[code-api]/MkApiBackends/MkApiTypescript.TypedocNode",
                    "ChildModule": "@nav[code-api].ChildModule"
                }
            },
            "semantic": {
                "role": "function",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "parseCode",
            "documentation": {
                "sections": [
                    {
                        "content": "Parse a symbol to extract code information.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    },
                    {
                        "title": "Arguments",
                        "content": "\n*  **parentElement**: Parent node of the documentation.\n*  **projectGlobals**: Project's global.\n*  **references**: Symbol's type references in declaration.\n*  **typedocNode**: Input node.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "arguments",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    },
                    {
                        "title": "Returns",
                        "content": "Code element.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "returns",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "parseCode",
            "navPath": "@nav[code-api]/MkApiBackends/MkApiTypescript.parseCode",
            "code": {
                "filePath": "src/mkapi-backends/mkapi-typescript/typedoc-parser.ts",
                "declaration": "export function parseCode({\n    typedocNode,\n    projectGlobals,\n    references,\n    parentElement,\n}: {\n    typedocNode: TypedocNode & SymbolTrait\n    projectGlobals: ProjectGlobals\n    references: Record<string, string>\n    parentElement?: TypedocNode\n}): Code",
                "implementation": "export function parseCode({\n    typedocNode,\n    projectGlobals,\n    references,\n    parentElement,\n}: {\n    typedocNode: TypedocNode & SymbolTrait\n    projectGlobals: ProjectGlobals\n    references: Record<string, string>\n    parentElement?: TypedocNode\n}): Code {\n    const symbols = projectGlobals.tsInputs\n    const signatureNode = hasSignatureTrait(typedocNode)\n        ? typedocNode.signatures[0]\n        : undefined\n\n    const name = signatureNode?.name ?? typedocNode.name\n\n    const source = typedocNode.sources[0]\n    const file_path = source.fileName\n    const key = parentElement\n        ? `${file_path}:${parentElement.name}.${name}`\n        : `${file_path}:${name}`\n    if (!(key in symbols)) {\n        console.warn(`Can not find reference of ${key}`)\n        return {\n            filePath: '',\n            declaration: '',\n            implementation: '',\n            startLine: 1,\n            endLine: 2,\n            references: {},\n        }\n    }\n    const symbol = symbols[key]\n    const implementation = symbol.implementation ?? ''\n    const nav = projectGlobals.navigations[typedocNode.id]\n    return {\n        filePath: source.fileName,\n        declaration: symbol.declaration ?? '',\n        implementation,\n        startLine: source.line,\n        endLine: source.line + implementation.split('\\n').length,\n        references: { [name]: nav, ...references },\n    }\n}",
                "startLine": 700,
                "endLine": 746,
                "references": {
                    "parseCode": "@nav[code-api]/MkApiBackends/MkApiTypescript.parseCode",
                    "TypedocNode": "@nav[code-api]/MkApiBackends/MkApiTypescript.TypedocNode",
                    "ProjectGlobals": "@nav[code-api]/MkApiBackends/MkApiTypescript.ProjectGlobals",
                    "SymbolTrait": "@nav[code-api]/MkApiBackends/MkApiTypescript.SymbolTrait",
                    "Record": "https://www.typescriptlang.org/docs/handbook/utility-types.html#recordkeys-type",
                    "Code": "@nav[code-api].Code"
                }
            },
            "semantic": {
                "role": "function",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "parseDocumentation",
            "documentation": {
                "sections": [
                    {
                        "content": "Parse documentation section.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    },
                    {
                        "title": "Arguments",
                        "content": "\n*  **parent**: Parent node.\n*  **projectGlobals**: Project's global.\n*  **title**: title of the document section.\n*  **typedocNode**: Input node.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "arguments",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    },
                    {
                        "title": "Returns",
                        "content": "Documentation structure.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "returns",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "parseDocumentation",
            "navPath": "@nav[code-api]/MkApiBackends/MkApiTypescript.parseDocumentation",
            "code": {
                "filePath": "src/mkapi-backends/mkapi-typescript/typedoc-parser.ts",
                "declaration": "export function parseDocumentation({\n    semantic,\n    title,\n    typedocNode,\n    parent,\n    projectGlobals,\n}: {\n    semantic: Semantic\n    title?: string\n    typedocNode: CommentSection\n    parent: TypedocNode\n    projectGlobals: ProjectGlobals\n}): Documentation",
                "implementation": "export function parseDocumentation({\n    semantic,\n    title,\n    typedocNode,\n    parent,\n    projectGlobals,\n}: {\n    semantic: Semantic\n    title?: string\n    typedocNode: CommentSection\n    parent: TypedocNode\n    projectGlobals: ProjectGlobals\n}): Documentation {\n    return {\n        sections: [\n            {\n                title,\n                content: parseDocumentationElements({\n                    typedocNodes: typedocNode,\n                    parent,\n                    projectGlobals,\n                }),\n                contentType: 'markdown',\n                semantic,\n            },\n        ],\n    }\n}",
                "startLine": 573,
                "endLine": 601,
                "references": {
                    "parseDocumentation": "@nav[code-api]/MkApiBackends/MkApiTypescript.parseDocumentation",
                    "TypedocNode": "@nav[code-api]/MkApiBackends/MkApiTypescript.TypedocNode",
                    "ProjectGlobals": "@nav[code-api]/MkApiBackends/MkApiTypescript.ProjectGlobals",
                    "Semantic": "@nav[code-api].Semantic",
                    "CommentSection": "@nav[code-api]/MkApiBackends/MkApiTypescript.CommentSection",
                    "Documentation": "@nav[code-api].Documentation"
                }
            },
            "semantic": {
                "role": "function",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "parseFile",
            "documentation": {
                "sections": [
                    {
                        "content": "Parse a file.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    },
                    {
                        "title": "Arguments",
                        "content": "\n*  **path**: Path of the file.\n*  **projectGlobals**: Global project information.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "arguments",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    },
                    {
                        "title": "Returns",
                        "content": "Ouput structure.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "returns",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "parseFile",
            "navPath": "@nav[code-api]/MkApiBackends/MkApiTypescript.parseFile",
            "code": {
                "filePath": "src/mkapi-backends/mkapi-typescript/typedoc-parser.ts",
                "declaration": "export function parseFile({\n    path,\n    projectGlobals,\n}: {\n    path: string\n    projectGlobals: ProjectGlobals\n}): File",
                "implementation": "export function parseFile({\n    path,\n    projectGlobals,\n}: {\n    path: string\n    projectGlobals: ProjectGlobals\n}): File {\n    const symbols = projectGlobals.tsInputs\n    const comment = symbols[path].comment\n    return {\n        name: Path.basename(path),\n        path: path,\n        documentation: {\n            sections: [\n                {\n                    semantic: noSemantic,\n                    content: comment ?? '',\n                    contentType: 'markdown',\n                },\n            ],\n        },\n    }\n}",
                "startLine": 539,
                "endLine": 562,
                "references": {
                    "parseFile": "@nav[code-api]/MkApiBackends/MkApiTypescript.parseFile",
                    "ProjectGlobals": "@nav[code-api]/MkApiBackends/MkApiTypescript.ProjectGlobals",
                    "File": "@nav[code-api].File"
                }
            },
            "semantic": {
                "role": "function",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "parseModule",
            "documentation": {
                "sections": [
                    {
                        "content": "Parse a module from typedoc & TS inputs.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    },
                    {
                        "title": "Arguments",
                        "content": "\n*  **externals**: URL to documentation for symbols from external libraries (*i.e.* within  `node_modules` ).\n*  **modulePath**: The module path.\n*  **tsInputs**: The (global) typescript inputs.\n*  **typedocNode**: Typedoc's module node.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "arguments",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "parseModule",
            "navPath": "@nav[code-api]/MkApiBackends/MkApiTypescript.parseModule",
            "code": {
                "filePath": "src/mkapi-backends/mkapi-typescript/typedoc-parser.ts",
                "declaration": "export function parseModule({\n    typedocNode,\n    project,\n    modulePath,\n    tsInputs,\n    externals,\n    extraDeclarationReferences,\n}: {\n    typedocNode: TypedocNode\n    modulePath: string\n    tsInputs: TsSrcElements\n    project: string\n    externals?: ExternalsUrl\n    extraDeclarationReferences?: ExtraDeclarationReferences\n}): Module",
                "implementation": "export function parseModule({\n    typedocNode,\n    project,\n    modulePath,\n    tsInputs,\n    externals,\n    extraDeclarationReferences,\n}: {\n    typedocNode: TypedocNode\n    modulePath: string\n    tsInputs: TsSrcElements\n    project: string\n    externals?: ExternalsUrl\n    extraDeclarationReferences?: ExtraDeclarationReferences\n}): Module {\n    const symbolIdMap: Record<number, TypedocNode> = {}\n    const parentSymbolIdMap: Record<number, TypedocNode> = {}\n    const navMap = generateNavigationPathsInModule(project, '', typedocNode)\n    function constructSymbolsMap(elem: TypedocNode, parentId: number | null) {\n        symbolIdMap[elem.id] = elem\n        if (parentId) {\n            parentSymbolIdMap[elem.id] = symbolIdMap[parentId]\n        }\n        if (!elem.children) {\n            return\n        }\n        for (const child of elem.children) {\n            constructSymbolsMap(child, elem.id)\n        }\n    }\n\n    constructSymbolsMap(typedocNode, null)\n    const projectGlobals: ProjectGlobals = {\n        navigations: navMap,\n        tsInputs,\n        typedocIdMap: symbolIdMap,\n        typedocParentIdMap: parentSymbolIdMap,\n        externals,\n        extraDeclarationReferences,\n    }\n\n    function getModuleRec(fromElem: TypedocNode, parts: string[]): TypedocNode {\n        if (parts.length === 0) {\n            return fromElem\n        }\n        if (\n            parts.length === 1 &&\n            fromElem.name === parts[0] &&\n            [TYPEDOC_KINDS.PROJECT, TYPEDOC_KINDS.MODULE].includes(\n                fromElem.kind,\n            )\n        ) {\n            return fromElem\n        }\n        const modules = (fromElem.children ?? []).filter((c) =>\n            [TYPEDOC_KINDS.MODULE, TYPEDOC_KINDS.ENTRY_MODULE].includes(c.kind),\n        )\n        const targetPath = pathLib.join(...parts)\n        const children: [number, TypedocNode][] = modules\n            .filter((c) => targetPath.startsWith(c.name))\n            .map((c) => [1 + c.name.search(/\\//), c])\n        children.sort((a, b) => b[0] - a[0])\n        if (children.length > 0) {\n            // noinspection TailRecursionJS\n            return getModuleRec(children[0][1], parts.slice(1 + children[0][0]))\n        }\n        throw new Error(`Module not found: ${parts.join('.')}`)\n    }\n\n    const module = getModuleRec(typedocNode, modulePath.split('/').slice(1))\n\n    if (\n        ![\n            TYPEDOC_KINDS.MODULE,\n            TYPEDOC_KINDS.PROJECT,\n            TYPEDOC_KINDS.ENTRY_MODULE,\n        ].includes(module.kind)\n    ) {\n        throw new Error(`Kind of module not knows (got ${String(module.kind)})`)\n    }\n\n    const path = modulePath\n    const children = module.children ?? []\n    const subModules = children.filter((child) =>\n        [TYPEDOC_KINDS.MODULE, TYPEDOC_KINDS.ENTRY_MODULE].includes(child.kind),\n    )\n    const types = children\n        .filter((child) =>\n            [\n                TYPEDOC_KINDS.CLASS,\n                TYPEDOC_KINDS.INTERFACE,\n                TYPEDOC_KINDS.ALIAS,\n            ].includes(child.kind),\n        )\n        .filter((cls) => cls.comment)\n        .map((cls) => cls as unknown as TypedocNode & SymbolTrait & ClassTrait)\n        .map((cls) =>\n            parseType({\n                typedocNode: cls,\n                parentPath: path,\n                projectGlobals,\n            }),\n        )\n    const functions = children\n        .filter((child) => child.kind === TYPEDOC_KINDS.FUNCTION)\n        .map((func) => func as unknown as TypedocNode & SignaturesTrait)\n        .filter((func) => func.signatures[0].comment)\n        .map((func) =>\n            parseCallable({\n                typedocNode: func,\n                parentPath: path,\n                projectGlobals,\n                semantic: { ...noSemantic, role: 'function' },\n            }),\n        )\n        .filter((func) => func !== undefined)\n    const globals = children\n        .filter((child) => child.kind === TYPEDOC_KINDS.VARIABLE)\n        .filter((attr) => attr.comment)\n        .map((attr) => attr as unknown as TypedocNode & SymbolTrait)\n        .map((attr) =>\n            parseAttribute({\n                typedocNode: attr,\n                projectGlobals,\n                parentPath: path,\n                parentElement: module,\n            }),\n        )\n        .filter((attr) => attr !== undefined)\n\n    const docSrc = module.comment\n        ? module.comment.summary\n        : hasProjectTrait(module)\n          ? module.readme\n          : undefined\n    const documentation = docSrc\n        ? parseDocumentation({\n              semantic: noSemantic,\n              typedocNode: docSrc,\n              parent: module,\n              projectGlobals,\n          })\n        : noDoc\n\n    const nodeWitSources = children.filter((child) => hasSymbolTrait(child))\n\n    const files = [\n        ...new Set(nodeWitSources.map((child) => child.sources[0].fileName)),\n    ].map((file) => parseFile({ path: file, projectGlobals }))\n\n    return {\n        name: module.name,\n        documentation,\n        path: modulePath,\n        navPath: typedocNode.id in navMap ? navMap[typedocNode.id] : '',\n        attributes: globals,\n        types: types,\n        callables: functions,\n        files,\n        children: subModules.map((child) =>\n            parseChildModule({\n                typedocNode: child,\n                parentPath: path,\n                projectGlobals,\n            }),\n        ),\n        semantic: semantics[TYPEDOC_KINDS.MODULE],\n    }\n}",
                "startLine": 332,
                "endLine": 501,
                "references": {
                    "parseModule": "@nav[code-api]/MkApiBackends/MkApiTypescript.parseModule",
                    "ExternalsUrl": "@nav[code-api]/MkApiBackends/MkApiTypescript.ExternalsUrl",
                    "ExtraDeclarationReferences": "@nav[code-api]/MkApiBackends/MkApiTypescript.ExtraDeclarationReferences",
                    "TsSrcElements": "@nav[code-api]/MkApiBackends/MkApiTypescript.TsSrcElements",
                    "TypedocNode": "@nav[code-api]/MkApiBackends/MkApiTypescript.TypedocNode",
                    "Module": "@nav[code-api].Module"
                }
            },
            "semantic": {
                "role": "function",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "parseType",
            "documentation": {
                "sections": [
                    {
                        "content": "Parse a type to extract code information.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    },
                    {
                        "title": "Arguments",
                        "content": "\n*  **parentPath**: Parent navigation path.\n*  **projectGlobals**: Project's global.\n*  **typedocNode**: Input node.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "arguments",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    },
                    {
                        "title": "Returns",
                        "content": "Type element.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "returns",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "parseType",
            "navPath": "@nav[code-api]/MkApiBackends/MkApiTypescript.parseType",
            "code": {
                "filePath": "src/mkapi-backends/mkapi-typescript/typedoc-parser.ts",
                "declaration": "export function parseType({\n    typedocNode,\n    parentPath,\n    projectGlobals,\n}: {\n    typedocNode: TypedocNode & ClassTrait\n    parentPath: string\n    projectGlobals: ProjectGlobals\n}): Type",
                "implementation": "export function parseType({\n    typedocNode,\n    parentPath,\n    projectGlobals,\n}: {\n    typedocNode: TypedocNode & ClassTrait\n    parentPath: string\n    projectGlobals: ProjectGlobals\n}): Type {\n    const name = typedocNode.name\n    const semantic = semantics[typedocNode.kind]\n    const path = `${parentPath}.${name}`\n    const children = typedocNode.children ?? []\n    const documentation = typedocNode.comment\n        ? parseDocumentationElements({\n              typedocNodes: typedocNode.comment.summary,\n              parent: typedocNode,\n              projectGlobals,\n          })\n        : ''\n    const attributes = children.filter(\n        (child) => child.kind === TYPEDOC_KINDS.ATTRIBUTE,\n    )\n    const methods = children\n        .filter((child) =>\n            [TYPEDOC_KINDS.CONSTRUCTOR, TYPEDOC_KINDS.METHOD].includes(\n                child.kind,\n            ),\n        )\n        // For now inherited methods are only documented in the class they belong.\n        .filter((child: TypedocNode & MethodTrait) => !child.inheritedFrom)\n\n    const references = gather_symbol_references(\n        typedocNode,\n        path,\n        projectGlobals,\n    )\n    const doc = getSummaryDoc(documentation)\n    const tParamDoc =\n        typedocNode.typeParameters &&\n        parseArgumentsDoc({\n            fromElement: typedocNode.typeParameters,\n            title: 'Generics',\n            parentElement: typedocNode,\n            projectGlobals,\n        })\n    if (tParamDoc) {\n        doc.sections.push(tParamDoc)\n    }\n    return {\n        name: typedocNode.name,\n        documentation: doc,\n        path: typedocNode.name,\n        navPath: projectGlobals.navigations[typedocNode.id],\n        attributes: attributes\n            .filter((attr) => attr.comment)\n            .map((attr) => attr as unknown as TypedocNode & SymbolTrait)\n            .map((attr) =>\n                parseAttribute({\n                    typedocNode: attr,\n                    projectGlobals,\n                    parentPath: path,\n                    parentElement: typedocNode,\n                }),\n            )\n            .filter((attr) => attr !== undefined),\n        callables: methods\n            .map((meth) => meth as unknown as TypedocNode & SignaturesTrait)\n            .filter((meth) => meth.signatures[0].comment)\n            .map((meth) =>\n                parseCallable({\n                    typedocNode: meth,\n                    parentPath: path,\n                    projectGlobals,\n                    semantic: semantics[meth.kind],\n                    parentElement: typedocNode,\n                }),\n            )\n            .filter((meth) => meth !== undefined),\n        code: parseCode({\n            typedocNode: typedocNode,\n            projectGlobals,\n            references,\n        }),\n        semantic,\n    }\n}",
                "startLine": 927,
                "endLine": 1014,
                "references": {
                    "parseType": "@nav[code-api]/MkApiBackends/MkApiTypescript.parseType",
                    "ProjectGlobals": "@nav[code-api]/MkApiBackends/MkApiTypescript.ProjectGlobals",
                    "TypedocNode": "@nav[code-api]/MkApiBackends/MkApiTypescript.TypedocNode",
                    "SymbolTrait": "@nav[code-api]/MkApiBackends/MkApiTypescript.SymbolTrait",
                    "Type": "@nav[code-api].Type"
                }
            },
            "semantic": {
                "role": "function",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "processFile",
            "documentation": {
                "sections": [
                    {
                        "content": "Process a typescript file to extract associated  <mkapi-api-link nav=\"@nav[code-api]/MkApiBackends/MkApiTypescript.TsSrcElements\" semantic=\"type-alias\">TsSrcElements</mkapi-api-link> .",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    },
                    {
                        "title": "Arguments",
                        "content": "\n*  **rootPath**: Project's root path.\n*  **filePath**: File to process\n*  **elements**: Dictionary in which new elements are added.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "arguments",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "processFile",
            "navPath": "@nav[code-api]/MkApiBackends/MkApiTypescript.processFile",
            "code": {
                "filePath": "src/mkapi-backends/mkapi-typescript/generate-ts-inputs.ts",
                "declaration": "export function processFile(\n    rootPath: string,\n    filePath: string,\n    elements: TsSrcElements,\n)",
                "implementation": "export function processFile(\n    rootPath: string,\n    filePath: string,\n    elements: TsSrcElements,\n) {\n    const sourceFile = ts.createSourceFile(\n        filePath,\n        fs.readFileSync(filePath, 'utf8'),\n        ts.ScriptTarget.Latest,\n    )\n    const file = filePath\n    function visit(node: ts.Node) {\n        const params = {\n            rootPath,\n            sourceFile,\n        }\n        if (ts.isSourceFile(node)) {\n            elements[getPrefix(params)] = {\n                comment: getFileDoc(node),\n            }\n        }\n        if (ts.isVariableDeclaration(node)) {\n            elements[getPrefix({ ...params, node })] = {\n                declaration: node.getText(sourceFile),\n            }\n        }\n\n        if (ts.isTypeAliasDeclaration(node)) {\n            elements[getPrefix({ ...params, node })] = {\n                declaration: node.getText(sourceFile),\n            }\n        }\n        if (ts.isFunctionDeclaration(node)) {\n            elements[getPrefix({ ...params, node })] = {\n                declaration: getDeclaration(node, sourceFile),\n                implementation: getImplementation(node, sourceFile),\n            }\n        }\n        if (ts.isClassDeclaration(node) || ts.isInterfaceDeclaration(node)) {\n            if (ts.isClassDeclaration(node)) {\n                const constructor = node.members.find((member) =>\n                    ts.isConstructorDeclaration(member),\n                )\n                if (constructor) {\n                    const className = getEscapedName(node, sourceFile)\n                    const prefix = `${file.replace(rootPath, '')}:${className}.${className}`\n                    elements[prefix] = {\n                        declaration: getDeclaration(constructor, sourceFile),\n                        implementation: getImplementation(\n                            constructor,\n                            sourceFile,\n                        ),\n                    }\n                    // for typedoc < 0.27.0 (I believe, at least was required for 0.26.11)\n                    const prefixOld = `${file.replace(rootPath, '')}:${className}.new ${className}`\n                    elements[prefixOld] = elements[prefix]\n                }\n            }\n            elements[getPrefix({ ...params, node })] = {\n                declaration: getDeclaration(node, sourceFile),\n                implementation: getImplementation(node, sourceFile),\n            }\n            node.members.forEach((member: ts.Node) => {\n                if (ts.isMethodDeclaration(member)) {\n                    elements[\n                        `${getPrefix({ ...params, node })}.${getEscapedName(member, sourceFile)}`\n                    ] = {\n                        declaration: getDeclaration(member, sourceFile),\n                        implementation: getImplementation(member, sourceFile),\n                    }\n                }\n                if (ts.isPropertyDeclaration(member)) {\n                    elements[\n                        `${getPrefix({ ...params, node })}.${getEscapedName(member, sourceFile)}`\n                    ] = { declaration: member.getText(sourceFile) }\n                }\n                if (\n                    ts.isPropertySignature(member) ||\n                    ts.isMethodSignature(member)\n                ) {\n                    elements[\n                        `${getPrefix({ ...params, node })}.${getEscapedName(member, sourceFile)}`\n                    ] = { declaration: member.getText(sourceFile) }\n                }\n            })\n        }\n        ts.forEachChild(node, visit)\n    }\n\n    visit(sourceFile)\n}",
                "startLine": 181,
                "endLine": 272,
                "references": {
                    "processFile": "@nav[code-api]/MkApiBackends/MkApiTypescript.processFile",
                    "TsSrcElements": "@nav[code-api]/MkApiBackends/MkApiTypescript.TsSrcElements"
                }
            },
            "semantic": {
                "role": "function",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        }
    ],
    "files": [
        {
            "name": "typedoc-parser.ts",
            "path": "src/mkapi-backends/mkapi-typescript/typedoc-parser.ts",
            "documentation": {
                "sections": [
                    {
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "content": "This file gathers parsing function to convert typedoc + typescript data into mkdocs [CodeApi](@nav:/api/CodeApi)\nmodels.",
                        "contentType": "markdown"
                    }
                ]
            }
        },
        {
            "name": "typedoc-models.ts",
            "path": "src/mkapi-backends/mkapi-typescript/typedoc-models.ts",
            "documentation": {
                "sections": [
                    {
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "content": "This file gathers the models of typedoc's generated outputs.\n\nOnly the subset used in the backend is described.The kind handles by the backend.",
                        "contentType": "markdown"
                    }
                ]
            }
        },
        {
            "name": "generate-ts-inputs.ts",
            "path": "src/mkapi-backends/mkapi-typescript/generate-ts-inputs.ts",
            "documentation": {
                "sections": [
                    {
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "content": "This file gathers implementations that parse project's source code using typescript's AST parser to\nextract additional information required by the backend.",
                        "contentType": "markdown"
                    }
                ]
            }
        },
        {
            "name": "generate-typedoc-inputs.ts",
            "path": "src/mkapi-backends/mkapi-typescript/generate-typedoc-inputs.ts",
            "documentation": {
                "sections": [
                    {
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "content": "",
                        "contentType": "markdown"
                    }
                ]
            }
        }
    ],
    "children": [],
    "semantic": {
        "role": "module",
        "labels": [],
        "attributes": {},
        "relations": {}
    }
}
