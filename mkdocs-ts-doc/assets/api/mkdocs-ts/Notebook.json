{
    "name": "Notebook",
    "documentation": {
        "sections": [
            {
                "content": "This module offers functionalities akin to a notebook page.\n\nThe primary entry point is  [NotebookPage](@nav/api/Notebook.NotebookPage) , which serves as a wrapper for parsing markdown content.\nThe markdown source can contain a series of executable cells, including  [JsCellView](@nav/api/Notebook.JsCellView)  and  [MdCellView](@nav/api/Notebook.MdCellView) .\nThese cells are identified within the markdown source using specific DOM elements ( `js-cell` ,  `md-cell` ),\nand their attributes are passed to the corresponding constructors (refer to  [JsCellAttributes](@nav/api/Notebook.JsCellAttributes)  and\n [MdCellAttributes](@nav/api/Notebook.MdCellAttributes)  for details).\n\nMost of the implementation logic regarding synchronization are included in the  [State](@nav/api/Notebook.State)  class.",
                "contentType": "markdown",
                "semantic": {
                    "role": "",
                    "labels": [],
                    "attributes": {},
                    "relations": {}
                }
            }
        ]
    },
    "path": "",
    "attributes": [
        {
            "name": "defaultCellAttributes",
            "semantic": {
                "role": "global",
                "labels": [],
                "attributes": {},
                "relations": {}
            },
            "documentation": {
                "sections": [
                    {
                        "content": "Default values for  [CellCommonAttributes](@nav/api/Notebook.CellCommonAttributes) .",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "defaultCellAttributes",
            "code": {
                "filePath": "src/lib/notebook/notebook-page.ts",
                "declaration": "defaultCellAttributes: CellCommonAttributes = {\n    lineNumbers: false,\n    readOnly: false,\n}",
                "implementation": "",
                "startLine": 32,
                "endLine": 33,
                "references": {
                    "defaultCellAttributes": "@nav/api/Notebook.defaultCellAttributes",
                    "CellCommonAttributes": "@nav/api/Notebook.CellCommonAttributes"
                }
            }
        }
    ],
    "types": [
        {
            "name": "CellHeaderView",
            "documentation": {
                "sections": [
                    {
                        "content": "Represents the view of a cell's header.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "CellHeaderView",
            "attributes": [
                {
                    "name": "class",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Classes associated to the view.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "CellHeaderView.class",
                    "code": {
                        "filePath": "src/lib/notebook/cell-views.ts",
                        "declaration": "public readonly class = 'mknb-CellHeaderView'",
                        "implementation": "",
                        "startLine": 213,
                        "endLine": 214,
                        "references": {
                            "class": "@nav/api/Notebook.CellHeaderView.class",
                            "VirtualDOM.class": "-1"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/notebook/cell-views.ts",
                "declaration": "export class CellHeaderView implements VirtualDOM<'div'>",
                "implementation": "export class CellHeaderView implements VirtualDOM<'div'> {\n    public readonly tag = 'div'\n    /**\n     * Classes associated to the view.\n     */\n    public readonly class = 'mknb-CellHeaderView'\n    public readonly children: ChildrenLike\n    public readonly cellId: string\n    public readonly state: State\n\n    /**\n     *\n     * @param params\n     * @param params.state Cell's owning state.\n     * @param params.cellId Cell unique ID.\n     */\n    constructor(params: { state: State; cellId: string }) {\n        Object.assign(this, params)\n        this.children = [\n            {\n                source$: this.state.cellsStatus$[this.cellId],\n                vdomMap: (s: CellStatus) => {\n                    if (['success', 'pending', 'executing'].includes(s)) {\n                        return { tag: 'div' }\n                    }\n                    const classList =\n                        s === 'ready' ? 'fa-play' : 'fa-fast-forward'\n                    return {\n                        tag: 'div',\n                        class: `fas  text-success fv-pointer ${classList}`,\n                        onclick: () => this.state.execute(this.cellId),\n                    }\n                },\n            },\n        ]\n    }\n}",
                "startLine": 208,
                "endLine": 245,
                "references": {
                    "CellHeaderView": "@nav/api/Notebook.CellHeaderView",
                    "State": "@nav/api/Notebook.State",
                    "VirtualDOM.children": "-1",
                    "VirtualDOM.class": "-1",
                    "VirtualDOM.tag": "-1"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "CellTagsView",
            "documentation": {
                "sections": [
                    {
                        "content": "Represents the tag of a  [CellView](@nav/api/Notebook.CellView)  (read-only or not, the language, *etc.*).",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "CellTagsView",
            "attributes": [
                {
                    "name": "class",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Classes associated to the view.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "CellTagsView.class",
                    "code": {
                        "filePath": "src/lib/notebook/cell-views.ts",
                        "declaration": "public readonly class =\n        'mknb-CellTagsView px-2 text-secondary d-flex align-items-center'",
                        "implementation": "",
                        "startLine": 254,
                        "endLine": 255,
                        "references": {
                            "class": "@nav/api/Notebook.CellTagsView.class",
                            "VirtualDOM.class": "-1"
                        }
                    }
                },
                {
                    "name": "style",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Style associated to the view.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "CellTagsView.style",
                    "code": {
                        "filePath": "src/lib/notebook/cell-views.ts",
                        "declaration": "public readonly style = {\n        position: 'absolute' as const,\n        top: '0px',\n        right: '0px',\n    }",
                        "implementation": "",
                        "startLine": 261,
                        "endLine": 262,
                        "references": {
                            "style": "@nav/api/Notebook.CellTagsView.style",
                            "VirtualDOM.style": "-1"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/notebook/cell-views.ts",
                "declaration": "export class CellTagsView implements VirtualDOM<'div'>",
                "implementation": "export class CellTagsView implements VirtualDOM<'div'> {\n    public readonly tag = 'div'\n    /**\n     * Classes associated to the view.\n     */\n    public readonly class =\n        'mknb-CellTagsView px-2 text-secondary d-flex align-items-center'\n\n    public readonly children: ChildrenLike\n    /**\n     * Style associated to the view.\n     */\n    public readonly style = {\n        position: 'absolute' as const,\n        top: '0px',\n        right: '0px',\n    }\n\n    /**\n     *\n     * @param params\n     * @param params.language Cell's owning state.\n     * @param params.attributes Cell attributes.\n     */\n    constructor(params: {\n        cellStatus$: Observable<CellStatus>\n        language: string\n        cellAttributes: CellCommonAttributes\n    }) {\n        const lang = {\n            javascript: 'js',\n            markdown: 'md',\n            python: 'py',\n        }\n        this.children = [\n            {\n                tag: 'i',\n                class: {\n                    source$: params.cellStatus$,\n                    vdomMap: (status: CellStatus) => {\n                        switch (status) {\n                            case 'pending':\n                                return 'fas fa-clock mr-1'\n                            case 'executing':\n                                return 'fas fa-cog fa-spin mr-1'\n                            default:\n                                return ''\n                        }\n                    },\n                },\n            },\n            {\n                tag: 'div',\n                class: params.cellAttributes.readOnly\n                    ? 'fas fa-lock mr-1'\n                    : 'fas fa-pen mr-1',\n            },\n            {\n                tag: 'div',\n                class: params.cellAttributes['reactive']\n                    ? 'fas fa-bolt mr-1'\n                    : '',\n            },\n            {\n                tag: 'div',\n                class: 'text-secondary',\n                innerText: lang[params.language],\n            },\n        ]\n    }\n}",
                "startLine": 249,
                "endLine": 320,
                "references": {
                    "CellTagsView": "@nav/api/Notebook.CellTagsView",
                    "CellCommonAttributes": "@nav/api/Notebook.CellCommonAttributes",
                    "CellStatus": "@nav/api/Notebook.CellStatus",
                    "VirtualDOM.children": "-1",
                    "VirtualDOM.class": "-1",
                    "VirtualDOM.style": "-1",
                    "VirtualDOM.tag": "-1"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "CellView",
            "documentation": {
                "sections": [
                    {
                        "content": "Represents the view of a cell.\nIt includes:\n*  An  [header](@nav/api/Notebook.CellHeaderView) .\n*  The  [code editor](@nav/api/Notebook.SnippetEditorView) .\n*  The  [outputs container](@nav/api/Notebook.OutputsView) .",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "CellView",
            "attributes": [
                {
                    "name": "class",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Classes associated to the view.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "CellView.class",
                    "code": {
                        "filePath": "src/lib/notebook/cell-views.ts",
                        "declaration": "public readonly class = 'mknb-CellView border-left pl-1'",
                        "implementation": "",
                        "startLine": 76,
                        "endLine": 77,
                        "references": {
                            "class": "@nav/api/Notebook.CellView.class",
                            "VirtualDOM.class": "-1"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/notebook/cell-views.ts",
                "declaration": "export class CellView implements VirtualDOM<'div'>",
                "implementation": "export class CellView implements VirtualDOM<'div'> {\n    public readonly tag = 'div'\n    public readonly children: ChildrenLike\n    /**\n     * Classes associated to the view.\n     */\n    public readonly class = 'mknb-CellView border-left pl-1'\n\n    public readonly cellId: string\n    public readonly state: State\n    public readonly options: MdCellAttributes | JsCellAttributes\n    /**\n     *\n     * @param params\n     * @param params.editorView The code editor view to encapsulate.\n     * @param params.cellId The cell unique ID.\n     * @param params.language The language of the cell.\n     * @param params.state The state managing the cell.\n     * @param params.attributes The cell's attributes.\n     */\n    constructor(params: {\n        cellId: string\n        language: string\n        editorView: SnippetEditorView\n        cellAttributes: MdCellAttributes | JsCellAttributes\n        state: State\n    }) {\n        Object.assign(this, params)\n        const backgrounds: Record<CellStatus, string> = {\n            ready: 'mkdocs-bg-info',\n            pending: 'mkdocs-bg-info',\n            executing: 'mkdocs-bg-info',\n            success: 'mkdocs-bg-success',\n            error: 'mkdocs-bg-danger',\n            unready: '',\n        }\n\n        const class$ = {\n            source$: this.state.cellsStatus$[this.cellId],\n            vdomMap: (status: CellStatus) => backgrounds[status],\n            wrapper: (d) => `pl-1 ${d}`,\n        }\n        const style$ = {\n            source$: this.state.cellsStatus$[this.cellId],\n            vdomMap: (status: CellStatus) => {\n                return ['unready', 'pending'].includes(status)\n                    ? { opacity: 0.4 }\n                    : { opacity: 1 }\n            },\n            wrapper: (d) => ({\n                ...d,\n                position: 'relative',\n            }),\n        }\n        const editorView = {\n            tag: 'div' as const,\n            style: style$,\n            class: class$,\n            children: [\n                params.editorView,\n                new CellTagsView({\n                    cellStatus$: this.state.cellsStatus$[this.cellId],\n                    language: params.language,\n                    cellAttributes: params.cellAttributes,\n                }),\n            ],\n        }\n        const outputsView = {\n            source$: this.state.executing$[this.cellId].pipe(\n                filter(\n                    (executing) =>\n                        !this.state.deportedOutputsViews.includes(\n                            this.cellId,\n                        ) && executing,\n                ),\n            ),\n            vdomMap: () => {\n                return new OutputsView({\n                    output$: this.state.outputs$[this.cellId],\n                })\n            },\n        }\n        this.children = [\n            new CellHeaderView({\n                state: this.state,\n                cellId: this.cellId,\n            }),\n            editorView,\n            outputsView,\n        ]\n    }\n}",
                "startLine": 70,
                "endLine": 162,
                "references": {
                    "CellView": "@nav/api/Notebook.CellView",
                    "CellCommonAttributes": "@nav/api/Notebook.CellCommonAttributes",
                    "JsCellAttributes": "@nav/api/Notebook.JsCellAttributes",
                    "SnippetEditorView": "@nav/api/Notebook.SnippetEditorView",
                    "State": "@nav/api/Notebook.State",
                    "VirtualDOM.children": "-1",
                    "VirtualDOM.class": "-1",
                    "VirtualDOM.tag": "-1"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "DeportedOutputsView",
            "documentation": {
                "sections": [
                    {
                        "content": "Represents a deported output view (instantiated from  `cell-output`  element).",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "DeportedOutputsView",
            "attributes": [
                {
                    "name": "class",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Classes associated to the view.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "DeportedOutputsView.class",
                    "code": {
                        "filePath": "src/lib/notebook/cell-views.ts",
                        "declaration": "public readonly class: string = 'mknb-DeportedOutputsView'",
                        "implementation": "",
                        "startLine": 374,
                        "endLine": 375,
                        "references": {
                            "class": "@nav/api/Notebook.DeportedOutputsView.class",
                            "VirtualDOM.class": "-1"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/notebook/cell-views.ts",
                "declaration": "export class DeportedOutputsView implements VirtualDOM<'div'>",
                "implementation": "export class DeportedOutputsView implements VirtualDOM<'div'> {\n    public readonly tag = 'div'\n\n    /**\n     * Classes associated to the view.\n     */\n    public readonly class: string = 'mknb-DeportedOutputsView'\n    public readonly children: ChildrenLike\n    public readonly output$: Observable<Output>\n\n    public readonly style: CSSAttribute\n    public readonly fullScreen: boolean\n    public readonly mode$ = new BehaviorSubject<OutputMode>('normal')\n\n    /**\n     *\n     * @param params\n     * @param params.output$ Observable over the outputs to display.\n     * @param params.fullScreen Whether to add a menu to allow expanding the output.\n     * @param params.style Style to apply to this element.\n     * @param params.classList Classes added to this element.\n     */\n    constructor(params: {\n        output$: Observable<Output>\n        fullScreen?: boolean\n        style?: CSSAttribute\n        classList?: string\n        inlined?: boolean\n    }) {\n        this.output$ = params.output$\n        this.fullScreen = params.fullScreen\n        if (params.inlined) {\n            this.style = { display: 'inline-block' }\n        }\n        const outputs$ = new BehaviorSubject([])\n        this.output$.subscribe((out: Output) => {\n            if (out === undefined) {\n                outputs$.next([])\n                return\n            }\n            outputs$.next([...outputs$.value, out])\n        })\n        const content: ChildrenLike = {\n            source$: outputs$,\n            policy: 'sync',\n            vdomMap: (output: AnyVirtualDOM) => output,\n        }\n        this.children = [\n            {\n                source$: outputs$,\n                vdomMap: (outputs: AnyVirtualDOM[]) => {\n                    if (!this.fullScreen || outputs.length === 0) {\n                        return { tag: 'div' }\n                    }\n                    return {\n                        tag: 'div',\n                        class: 'w-100 d-flex pb-1',\n                        children: [\n                            { tag: 'div', class: 'flex-grow-1' },\n                            {\n                                tag: 'div',\n                                class: 'fas fa-expand fv-pointer',\n                                onclick: () => this.mode$.next('fullscreen'),\n                            },\n                        ],\n                    }\n                },\n            },\n            {\n                tag: 'div',\n                class: 'd-flex flex-column justify-content-center mkdocs-bg-info',\n                style: {\n                    source$: this.mode$,\n                    vdomMap: (mode: OutputMode) => {\n                        return mode === 'normal'\n                            ? {\n                                  position: 'initial',\n                                  width: '100%',\n                                  height: 'auto',\n                                  backdropFilter: 'none',\n                              }\n                            : {\n                                  position: 'absolute',\n                                  top: '0vh',\n                                  left: '0vw',\n                                  width: '100vw',\n                                  height: '100vh',\n                                  zIndex: 10,\n                                  backdropFilter: 'blur(2px)',\n                              }\n                    },\n                },\n                children: [\n                    {\n                        tag: 'div' as const,\n                        style: {\n                            backgroundColor: 'rgb(255,255,255)',\n                            ...params.style,\n                        },\n                        class: {\n                            source$: this.mode$,\n                            vdomMap: (mode: OutputMode) =>\n                                mode === 'normal'\n                                    ? params.classList\n                                    : `p-2 border rounded h-75 w-75 mx-auto ${params.classList}`,\n                        },\n                        children: content,\n                        onclick: (ev) => ev.stopPropagation(),\n                    },\n                ],\n                onclick: () => this.mode$.next('normal'),\n            },\n        ]\n    }\n}",
                "startLine": 368,
                "endLine": 483,
                "references": {
                    "DeportedOutputsView": "@nav/api/Notebook.DeportedOutputsView",
                    "Output": "@nav/api/Notebook.Output",
                    "VirtualDOM.children": "-1",
                    "VirtualDOM.class": "-1",
                    "VirtualDOM.style": "-1",
                    "VirtualDOM.tag": "-1"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "FutureCellView",
            "documentation": {
                "sections": [
                    {
                        "content": "Represents the view of a cell that will render once the associated cell is registered in the  [State](@nav/api/Notebook.State) .\nUpon registration, this container includes one child of type  [CellView](@nav/api/Notebook.CellView) .",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "FutureCellView",
            "attributes": [
                {
                    "name": "class",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Classes associated to the view.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "FutureCellView.class",
                    "code": {
                        "filePath": "src/lib/notebook/cell-views.ts",
                        "declaration": "public readonly class = 'mknb-FutureCellView'",
                        "implementation": "",
                        "startLine": 29,
                        "endLine": 30,
                        "references": {
                            "class": "@nav/api/Notebook.FutureCellView.class",
                            "VirtualDOM.class": "-1"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/notebook/cell-views.ts",
                "declaration": "export class FutureCellView implements VirtualDOM<'div'>",
                "implementation": "export class FutureCellView implements VirtualDOM<'div'> {\n    public readonly tag = 'div'\n\n    /**\n     * Classes associated to the view.\n     */\n    public readonly class = 'mknb-FutureCellView'\n\n    public readonly children: ChildrenLike\n\n    /**\n     *\n     * @param params\n     * @param params.editorView The code editor view to encapsulate.\n     * @param params.cellId The cell unique ID.\n     * @param params.language The language of the cell.\n     * @param params.state The state managing the cell.\n     * @param params.attributes The cell's attributes.\n     */\n    constructor(params: {\n        editorView: SnippetEditorView\n        cellId: string\n        language: string\n        state: State\n        cellAttributes: MdCellAttributes | JsCellAttributes\n    }) {\n        this.children = [\n            {\n                source$: params.state.cellIds$.pipe(\n                    filter((cellIds) => cellIds.includes(params.cellId)),\n                    take(1),\n                ),\n                vdomMap: (): AnyVirtualDOM => {\n                    return new CellView(params)\n                },\n            },\n        ]\n    }\n}",
                "startLine": 23,
                "endLine": 62,
                "references": {
                    "FutureCellView": "@nav/api/Notebook.FutureCellView",
                    "CellCommonAttributes": "@nav/api/Notebook.CellCommonAttributes",
                    "JsCellAttributes": "@nav/api/Notebook.JsCellAttributes",
                    "SnippetEditorView": "@nav/api/Notebook.SnippetEditorView",
                    "State": "@nav/api/Notebook.State",
                    "VirtualDOM.children": "-1",
                    "VirtualDOM.class": "-1",
                    "VirtualDOM.tag": "-1"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "JsCellExecutor",
            "documentation": {
                "sections": [
                    {
                        "content": "Represents the execution side of a Javascript cell within a  [NotebookPage](@nav/api/Notebook.NotebookPage) .\n\nThis implementation does not provide the views (editor, outputs), it is used as it is when loading separated notebook\npages to retrieve exported symbols.\nHowever, this implementation is typically inherited from  [JsCellView](@nav/api/Notebook.JsCellView)  to provide the regular views of\na javascript cell.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "JsCellExecutor",
            "attributes": [
                {
                    "name": "cellId",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Cell unique ID.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "JsCellExecutor.cellId",
                    "code": {
                        "filePath": "src/lib/notebook/js-cell-view.ts",
                        "declaration": "public readonly cellId: string",
                        "implementation": "",
                        "startLine": 30,
                        "endLine": 31,
                        "references": {
                            "cellId": "@nav/api/Notebook.JsCellExecutor.cellId",
                            "CellTrait.cellId": "@nav/api/Notebook.CellTrait.cellId"
                        }
                    }
                },
                {
                    "name": "content",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Initial source code.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "JsCellExecutor.content",
                    "code": {
                        "filePath": "src/lib/notebook/js-cell-view.ts",
                        "declaration": "public readonly content: string",
                        "implementation": "",
                        "startLine": 34,
                        "endLine": 35,
                        "references": {
                            "content": "@nav/api/Notebook.JsCellExecutor.content"
                        }
                    }
                },
                {
                    "name": "content$",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Observable over the source content of the cell.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "JsCellExecutor.content$",
                    "code": {
                        "filePath": "src/lib/notebook/js-cell-view.ts",
                        "declaration": "public readonly content$: BehaviorSubject<string>",
                        "implementation": "",
                        "startLine": 50,
                        "endLine": 51,
                        "references": {
                            "content$": "@nav/api/Notebook.JsCellExecutor.content$",
                            "CellTrait.content$": "@nav/api/Notebook.CellTrait.content$"
                        }
                    }
                },
                {
                    "name": "invalidated$",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Emit when the cell is invalidated.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "JsCellExecutor.invalidated$",
                    "code": {
                        "filePath": "src/lib/notebook/js-cell-view.ts",
                        "declaration": "public readonly invalidated$: Observable<unknown>",
                        "implementation": "",
                        "startLine": 39,
                        "endLine": 40,
                        "references": {
                            "invalidated$": "@nav/api/Notebook.JsCellExecutor.invalidated$"
                        }
                    }
                },
                {
                    "name": "state",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "State manager, owned by the parent  [NotebookPage](@nav/api/Notebook.NotebookPage) .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "JsCellExecutor.state",
                    "code": {
                        "filePath": "src/lib/notebook/js-cell-view.ts",
                        "declaration": "public readonly state: State",
                        "implementation": "",
                        "startLine": 43,
                        "endLine": 44,
                        "references": {
                            "state": "@nav/api/Notebook.JsCellExecutor.state",
                            "State": "@nav/api/Notebook.State"
                        }
                    }
                }
            ],
            "callables": [
                {
                    "name": "execute",
                    "documentation": {
                        "sections": [
                            {
                                "content": "Execute the cell. See  [execute](@nav/api/Notebook.JsCellExecutor.execute) .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            },
                            {
                                "title": "Arguments",
                                "content": "\n*  **args**: See  [ExecArgs](@nav/api/Notebook.ExecArgs) .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "arguments",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "JsCellExecutor.execute",
                    "code": {
                        "filePath": "src/lib/notebook/js-cell-view.ts",
                        "declaration": "async execute(args: ExecArgs): Promise<Scope>",
                        "implementation": "async execute(args: ExecArgs): Promise<Scope> {\n        return await executeJs({\n            ...args,\n            reactive: this.cellAttributes.reactive,\n            invalidated$: this.invalidated$,\n        })\n    }",
                        "startLine": 69,
                        "endLine": 76,
                        "references": {
                            "execute": "@nav/api/Notebook.JsCellExecutor.execute",
                            "ExecArgs": "@nav/api/Notebook.ExecArgs",
                            "Scope": "@nav/api/Notebook.Scope"
                        }
                    },
                    "semantic": {
                        "role": "method",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    }
                }
            ],
            "code": {
                "filePath": "src/lib/notebook/js-cell-view.ts",
                "declaration": "export class JsCellExecutor implements CellTrait",
                "implementation": "export class JsCellExecutor implements CellTrait {\n    public readonly cellId: string\n    /**\n     * Initial source code.\n     */\n    public readonly content: string\n\n    /**\n     * Emit when the cell is invalidated.\n     */\n    public readonly invalidated$: Observable<unknown>\n    /**\n     * State manager, owned by the parent {@link NotebookPage}.\n     */\n    public readonly state: State\n\n    public readonly cellAttributes: JsCellAttributes\n\n    /**\n     * Observable over the source content of the cell.\n     */\n    public readonly content$: BehaviorSubject<string>\n\n    constructor(params: {\n        cellId: string\n        content$: BehaviorSubject<string>\n        state: State\n        cellAttributes: JsCellAttributes\n    }) {\n        Object.assign(this, params)\n        this.invalidated$ = this.state.invalidated$.pipe(\n            filter((cellId) => cellId === this.cellId),\n        )\n    }\n\n    /**\n     * Execute the cell. See {@link execute}.\n     *\n     * @param args See {@link ExecArgs}.\n     */\n    async execute(args: ExecArgs): Promise<Scope> {\n        return await executeJs({\n            ...args,\n            reactive: this.cellAttributes.reactive,\n            invalidated$: this.invalidated$,\n        })\n    }\n}",
                "startLine": 29,
                "endLine": 77,
                "references": {
                    "JsCellExecutor": "@nav/api/Notebook.JsCellExecutor",
                    "JsCellAttributes": "@nav/api/Notebook.JsCellAttributes",
                    "State": "@nav/api/Notebook.State",
                    "CellTrait.cellId": "@nav/api/Notebook.CellTrait.cellId",
                    "CellTrait.content$": "@nav/api/Notebook.CellTrait.content$",
                    "ExecArgs": "@nav/api/Notebook.ExecArgs",
                    "Scope": "@nav/api/Notebook.Scope",
                    "CellTrait.execute": "@nav/api/Notebook.CellTrait.execute",
                    "JsCellView": "@nav/api/Notebook.JsCellView",
                    "CellTrait": "@nav/api/Notebook.CellTrait"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "JsCellView",
            "documentation": {
                "sections": [
                    {
                        "content": "Represents a Javascript cell within a  [NotebookPage](@nav/api/Notebook.NotebookPage) .\n\nThey are typically included from a DOM definition with tag name  `js-cell` , in this case\nassociated attributes are provided as DOM attributes; see  [JsCellAttributes](@nav/api/Notebook.JsCellAttributes) .",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "JsCellView",
            "attributes": [
                {
                    "name": "cellId",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Cell unique ID.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "JsCellExecutor.cellId",
                    "code": {
                        "filePath": "src/lib/notebook/js-cell-view.ts",
                        "declaration": "public readonly cellId: string",
                        "implementation": "",
                        "startLine": 30,
                        "endLine": 31,
                        "references": {
                            "cellId": "@nav/api/Notebook.JsCellExecutor.cellId",
                            "CellTrait.cellId": "@nav/api/Notebook.CellTrait.cellId"
                        }
                    }
                },
                {
                    "name": "class",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Classes associated to the view.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "JsCellView.class",
                    "code": {
                        "filePath": "src/lib/notebook/js-cell-view.ts",
                        "declaration": "public readonly class = 'mknb-JsCellView'",
                        "implementation": "",
                        "startLine": 90,
                        "endLine": 91,
                        "references": {
                            "class": "@nav/api/Notebook.JsCellView.class",
                            "VirtualDOM.class": "-1"
                        }
                    }
                },
                {
                    "name": "content",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Initial source code.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "JsCellExecutor.content",
                    "code": {
                        "filePath": "src/lib/notebook/js-cell-view.ts",
                        "declaration": "public readonly content: string",
                        "implementation": "",
                        "startLine": 34,
                        "endLine": 35,
                        "references": {
                            "content": "@nav/api/Notebook.JsCellExecutor.content"
                        }
                    }
                },
                {
                    "name": "content$",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Observable over the source content of the cell.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "JsCellExecutor.content$",
                    "code": {
                        "filePath": "src/lib/notebook/js-cell-view.ts",
                        "declaration": "public readonly content$: BehaviorSubject<string>",
                        "implementation": "",
                        "startLine": 50,
                        "endLine": 51,
                        "references": {
                            "content$": "@nav/api/Notebook.JsCellExecutor.content$",
                            "CellTrait.content$": "@nav/api/Notebook.CellTrait.content$"
                        }
                    }
                },
                {
                    "name": "invalidated$",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Emit when the cell is invalidated.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "JsCellExecutor.invalidated$",
                    "code": {
                        "filePath": "src/lib/notebook/js-cell-view.ts",
                        "declaration": "public readonly invalidated$: Observable<unknown>",
                        "implementation": "",
                        "startLine": 39,
                        "endLine": 40,
                        "references": {
                            "invalidated$": "@nav/api/Notebook.JsCellExecutor.invalidated$"
                        }
                    }
                },
                {
                    "name": "state",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "State manager, owned by the parent  [NotebookPage](@nav/api/Notebook.NotebookPage) .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "JsCellExecutor.state",
                    "code": {
                        "filePath": "src/lib/notebook/js-cell-view.ts",
                        "declaration": "public readonly state: State",
                        "implementation": "",
                        "startLine": 43,
                        "endLine": 44,
                        "references": {
                            "state": "@nav/api/Notebook.JsCellExecutor.state",
                            "State": "@nav/api/Notebook.State"
                        }
                    }
                }
            ],
            "callables": [
                {
                    "name": "execute",
                    "documentation": {
                        "sections": [
                            {
                                "content": "Execute the cell. See  [execute](@nav/api/Notebook.JsCellExecutor.execute) .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            },
                            {
                                "title": "Arguments",
                                "content": "\n*  **args**: See  [ExecArgs](@nav/api/Notebook.ExecArgs) .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "arguments",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "JsCellView.execute",
                    "code": {
                        "filePath": "",
                        "declaration": "",
                        "implementation": "",
                        "startLine": 1,
                        "endLine": 2,
                        "references": {}
                    },
                    "semantic": {
                        "role": "method",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    }
                }
            ],
            "code": {
                "filePath": "src/lib/notebook/js-cell-view.ts",
                "declaration": "export class JsCellView extends JsCellExecutor implements VirtualDOM<'div'>",
                "implementation": "export class JsCellView extends JsCellExecutor implements VirtualDOM<'div'> {\n    public readonly tag = 'div'\n    /**\n     * Classes associated to the view.\n     */\n    public readonly class = 'mknb-JsCellView'\n    public readonly children: ChildrenLike\n\n    public readonly editorView: CodeSnippetView\n\n    constructor(params: {\n        cellId: string\n        content: string\n        state: State\n        cellAttributes: JsCellAttributes\n    }) {\n        const editorView = new SnippetEditorView({\n            language: 'javascript',\n            readOnly: params.cellAttributes.readOnly,\n            content: params.content,\n            lineNumbers: params.cellAttributes.lineNumbers,\n            onExecute: () => this.state.execute(this.cellId).then(() => {}),\n        })\n\n        super({ ...params, content$: editorView.content$ })\n        this.editorView = editorView\n\n        this.children = [\n            new FutureCellView({\n                language: 'javascript',\n                cellId: this.cellId,\n                state: this.state,\n                editorView: this.editorView,\n                cellAttributes: this.cellAttributes,\n            }),\n        ]\n    }\n}",
                "startLine": 85,
                "endLine": 123,
                "references": {
                    "JsCellView": "@nav/api/Notebook.JsCellView",
                    "JsCellAttributes": "@nav/api/Notebook.JsCellAttributes",
                    "State": "@nav/api/Notebook.State",
                    "JsCellExecutor.constructor": "@nav/api/Notebook.JsCellExecutor.constructor",
                    "JsCellExecutor.cellAttributes": "@nav/api/Notebook.JsCellExecutor.cellAttributes",
                    "JsCellExecutor.cellId": "@nav/api/Notebook.JsCellExecutor.cellId",
                    "VirtualDOM.children": "-1",
                    "VirtualDOM.class": "-1",
                    "JsCellExecutor.content": "@nav/api/Notebook.JsCellExecutor.content",
                    "JsCellExecutor.content$": "@nav/api/Notebook.JsCellExecutor.content$",
                    "CodeSnippetView": "@nav/api/MainModule/MdWidgets.CodeSnippetView",
                    "JsCellExecutor.invalidated$": "@nav/api/Notebook.JsCellExecutor.invalidated$",
                    "JsCellExecutor.state": "@nav/api/Notebook.JsCellExecutor.state",
                    "VirtualDOM.tag": "-1",
                    "ExecArgs": "@nav/api/Notebook.ExecArgs",
                    "Scope": "@nav/api/Notebook.Scope",
                    "JsCellExecutor.execute": "@nav/api/Notebook.JsCellExecutor.execute",
                    "JsCellExecutor": "@nav/api/Notebook.JsCellExecutor"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "MdCellView",
            "documentation": {
                "sections": [
                    {
                        "content": "Represents a Markdown cell within a  [NotebookPage](@nav/api/Notebook.NotebookPage) .\n\nThey are typically included from a DOM definition with tag name  `md-cell` , in this case\nassociated attributes are provided as DOM attributes; see  [CellCommonAttributes](@nav/api/Notebook.CellCommonAttributes) .",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "MdCellView",
            "attributes": [
                {
                    "name": "cellId",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Cell unique ID.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "MdCellView.cellId",
                    "code": {
                        "filePath": "src/lib/notebook/md-cell-view.ts",
                        "declaration": "public readonly cellId: string",
                        "implementation": "",
                        "startLine": 62,
                        "endLine": 63,
                        "references": {
                            "cellId": "@nav/api/Notebook.MdCellView.cellId",
                            "CellTrait.cellId": "@nav/api/Notebook.CellTrait.cellId"
                        }
                    }
                },
                {
                    "name": "class",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Classes associated to the view.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "MdCellView.class",
                    "code": {
                        "filePath": "src/lib/notebook/md-cell-view.ts",
                        "declaration": "public readonly class = 'mknb-MdCellView'",
                        "implementation": "",
                        "startLine": 60,
                        "endLine": 61,
                        "references": {
                            "class": "@nav/api/Notebook.MdCellView.class",
                            "VirtualDOM.class": "-1"
                        }
                    }
                },
                {
                    "name": "content$",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Observable over the source content of the cell.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "MdCellView.content$",
                    "code": {
                        "filePath": "src/lib/notebook/md-cell-view.ts",
                        "declaration": "public readonly content$: BehaviorSubject<string>",
                        "implementation": "",
                        "startLine": 73,
                        "endLine": 74,
                        "references": {
                            "content$": "@nav/api/Notebook.MdCellView.content$",
                            "CellTrait.content$": "@nav/api/Notebook.CellTrait.content$"
                        }
                    }
                },
                {
                    "name": "state",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "State manager, owned by the parent  [NotebookPage](@nav/api/Notebook.NotebookPage) .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "MdCellView.state",
                    "code": {
                        "filePath": "src/lib/notebook/md-cell-view.ts",
                        "declaration": "public readonly state: State",
                        "implementation": "",
                        "startLine": 67,
                        "endLine": 68,
                        "references": {
                            "state": "@nav/api/Notebook.MdCellView.state",
                            "State": "@nav/api/Notebook.State"
                        }
                    }
                }
            ],
            "callables": [
                {
                    "name": "execute",
                    "documentation": {
                        "sections": [
                            {
                                "content": "Execute the cell. Because markdown cell can include other cells, this function own a dedicated  [State](@nav/api/Notebook.State) ).",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            },
                            {
                                "title": "Arguments",
                                "content": "\n*  **args**: See  [ExecArgs](@nav/api/Notebook.ExecArgs) .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "arguments",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "MdCellView.execute",
                    "code": {
                        "filePath": "src/lib/notebook/md-cell-view.ts",
                        "declaration": "async execute({\n        scope,\n        owningState,\n        cellId,\n        src,\n        output$,\n    }: ExecArgs): Promise<Scope>",
                        "implementation": "async execute({\n        scope,\n        owningState,\n        cellId,\n        src,\n        output$,\n    }: ExecArgs): Promise<Scope> {\n        const state = new State({\n            initialScope: scope,\n            parent: { state: owningState, cellId },\n            router: this.state.router,\n        })\n        const patchSrc = src\n            .replace(/\\${/g, '<js-inlined>')\n            .replace(/}\\$/g, '</js-inlined>')\n\n        const vdom = parseMd({\n            src: patchSrc,\n            ...this.parserOptions,\n            views: {\n                'js-inlined': (elem) => {\n                    return new InlinedCode({\n                        src: elem.textContent,\n                        scope,\n                        invalidated$: this.invalidated$,\n                    })\n                },\n                ...notebookViews({\n                    state: state,\n                    cellOptions: {\n                        readOnly: true,\n                        lineNumbers: false,\n                    },\n                }),\n            },\n        })\n        output$.next(vdom)\n        return await state.execute(state.ids.slice(-1)[0])\n    }",
                        "startLine": 113,
                        "endLine": 152,
                        "references": {
                            "execute": "@nav/api/Notebook.MdCellView.execute",
                            "ExecArgs": "@nav/api/Notebook.ExecArgs",
                            "Scope": "@nav/api/Notebook.Scope"
                        }
                    },
                    "semantic": {
                        "role": "method",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    }
                }
            ],
            "code": {
                "filePath": "src/lib/notebook/md-cell-view.ts",
                "declaration": "export class MdCellView implements VirtualDOM<'div'>, CellTrait",
                "implementation": "export class MdCellView implements VirtualDOM<'div'>, CellTrait {\n    public readonly tag = 'div'\n    /**\n     * Classes associated to the view.\n     */\n    public readonly class = 'mknb-MdCellView'\n    public readonly children: ChildrenLike\n    public readonly cellId: string\n    public readonly cellAttributes: JsCellAttributes\n    /**\n     * State manager, owned by the parent {@link NotebookPage}.\n     */\n    public readonly state: State\n\n    public readonly editorView: CodeSnippetView\n    /**\n     * Observable over the source content of the cell.\n     */\n    public readonly content$: BehaviorSubject<string>\n\n    public readonly parserOptions: MdParsingOptions\n    public readonly invalidated$: Observable<unknown>\n\n    constructor(params: {\n        cellId: string\n        content: string\n        state: State\n        parserOptions: MdParsingOptions\n        cellAttributes: MdCellAttributes\n    }) {\n        Object.assign(this, params)\n        this.invalidated$ = this.state.invalidated$.pipe(\n            filter((cellId) => cellId === this.cellId),\n        )\n        this.editorView = new SnippetEditorView({\n            language: 'markdown',\n            readOnly: false,\n            content: params.content,\n            lineNumbers: this.cellAttributes.lineNumbers,\n            onExecute: () => this.state.execute(this.cellId).then(() => {}),\n        })\n        this.content$ = this.editorView.content$\n        this.children = [\n            new FutureCellView({\n                language: 'markdown',\n                cellId: this.cellId,\n                state: this.state,\n                editorView: this.editorView,\n                cellAttributes: this.cellAttributes,\n            }),\n        ]\n    }\n\n    /**\n     * Execute the cell. Because markdown cell can include other cells, this function own a dedicated {@link State}).\n     *\n     * @param args See {@link ExecArgs}.\n     */\n    async execute({\n        scope,\n        owningState,\n        cellId,\n        src,\n        output$,\n    }: ExecArgs): Promise<Scope> {\n        const state = new State({\n            initialScope: scope,\n            parent: { state: owningState, cellId },\n            router: this.state.router,\n        })\n        const patchSrc = src\n            .replace(/\\${/g, '<js-inlined>')\n            .replace(/}\\$/g, '</js-inlined>')\n\n        const vdom = parseMd({\n            src: patchSrc,\n            ...this.parserOptions,\n            views: {\n                'js-inlined': (elem) => {\n                    return new InlinedCode({\n                        src: elem.textContent,\n                        scope,\n                        invalidated$: this.invalidated$,\n                    })\n                },\n                ...notebookViews({\n                    state: state,\n                    cellOptions: {\n                        readOnly: true,\n                        lineNumbers: false,\n                    },\n                }),\n            },\n        })\n        output$.next(vdom)\n        return await state.execute(state.ids.slice(-1)[0])\n    }\n}",
                "startLine": 55,
                "endLine": 153,
                "references": {
                    "MdCellView": "@nav/api/Notebook.MdCellView",
                    "CellCommonAttributes": "@nav/api/Notebook.CellCommonAttributes",
                    "MdParsingOptions": "@nav/api/MainModule.MdParsingOptions",
                    "State": "@nav/api/Notebook.State",
                    "JsCellAttributes": "@nav/api/Notebook.JsCellAttributes",
                    "CellTrait.cellId": "@nav/api/Notebook.CellTrait.cellId",
                    "VirtualDOM.children": "-1",
                    "VirtualDOM.class": "-1",
                    "CellTrait.content$": "@nav/api/Notebook.CellTrait.content$",
                    "CodeSnippetView": "@nav/api/MainModule/MdWidgets.CodeSnippetView",
                    "VirtualDOM.tag": "-1",
                    "ExecArgs": "@nav/api/Notebook.ExecArgs",
                    "Scope": "@nav/api/Notebook.Scope",
                    "CellTrait.execute": "@nav/api/Notebook.CellTrait.execute",
                    "CellTrait": "@nav/api/Notebook.CellTrait"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "NotebookPage",
            "documentation": {
                "sections": [
                    {
                        "content": "Represents a page of a notebook.\n\nA notebook page is a markdown content including definition of executable cells\n(*e.g.*  [JsCellView](@nav/api/Notebook.JsCellView) ,  [MdCellView](@nav/api/Notebook.MdCellView) ) as well as other related components.\n\nCells run in the order of inclusion, and share their top level scope.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "NotebookPage",
            "attributes": [
                {
                    "name": "class",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Classes associated to the view.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "NotebookPage.class",
                    "code": {
                        "filePath": "src/lib/notebook/notebook-page.ts",
                        "declaration": "public readonly class = 'mknb-NotebookPage'",
                        "implementation": "",
                        "startLine": 147,
                        "endLine": 148,
                        "references": {
                            "class": "@nav/api/Notebook.NotebookPage.class",
                            "VirtualDOM.class": "-1"
                        }
                    }
                },
                {
                    "name": "initialScope",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Initial scope provided to the first executing cell.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "NotebookPage.initialScope",
                    "code": {
                        "filePath": "src/lib/notebook/notebook-page.ts",
                        "declaration": "public readonly initialScope: Partial<Scope>",
                        "implementation": "",
                        "startLine": 156,
                        "endLine": 157,
                        "references": {
                            "initialScope": "@nav/api/Notebook.NotebookPage.initialScope",
                            "Scope": "@nav/api/Notebook.Scope"
                        }
                    }
                },
                {
                    "name": "state",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "State manager.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "NotebookPage.state",
                    "code": {
                        "filePath": "src/lib/notebook/notebook-page.ts",
                        "declaration": "public readonly state: State",
                        "implementation": "",
                        "startLine": 160,
                        "endLine": 161,
                        "references": {
                            "state": "@nav/api/Notebook.NotebookPage.state",
                            "State": "@nav/api/Notebook.State"
                        }
                    }
                }
            ],
            "callables": [
                {
                    "name": "new NotebookPage",
                    "documentation": {
                        "sections": [
                            {
                                "content": "Constructs the page.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            },
                            {
                                "title": "Arguments",
                                "content": "\n*  **params**: The parameters\n*  **initialScope**: Initial scope provided to the first executing cell.\n*  **options**: Global options for the page, in particular defined the default attribute for the various\ncells.\n*  **router**: Application's router.\n*  **src**: Markdown source content. To fetch from a URL leave it empty & provide instead\nthe  `url`  attribute.\n*  **url**: Url pointing to the markdown content, only used if the  `src`  attribute is not provided.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "arguments",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "NotebookPage.new NotebookPage",
                    "code": {
                        "filePath": "src/lib/notebook/notebook-page.ts",
                        "declaration": "constructor(params: {\n        url?: string\n        src?: string\n        router: Router\n        initialScope?: Partial<Scope>\n        options?: NotebookOptions\n    })",
                        "implementation": "constructor(params: {\n        url?: string\n        src?: string\n        router: Router\n        initialScope?: Partial<Scope>\n        options?: NotebookOptions\n    }) {\n        Object.assign(this, params)\n        if (params.src === undefined && params.url === undefined) {\n            console.error(\n                'Neither url or src parameter provided to the notebook page.',\n            )\n            return\n        }\n        this.state = new State({\n            router: this.router,\n            initialScope: this.initialScope,\n        })\n\n        const source$ =\n            params.src !== undefined\n                ? of(params.src)\n                : from(fetch(this.url).then((resp) => resp.text())).pipe(\n                      take(1),\n                  )\n        const cellOptions = {\n            ...defaultCellAttributes,\n            ...(params.options?.defaultCellAttributes || {}),\n        }\n        this.children = [\n            {\n                source$,\n                vdomMap: (src: string) => {\n                    const vdom = parseMd({\n                        src,\n                        router: this.router,\n                        ...(this.options?.markdown || {}),\n                        views: {\n                            ...(this.options?.markdown?.views || {}),\n                            ...notebookViews({\n                                state: this.state,\n                                cellOptions,\n                            }),\n                        },\n                    })\n                    if (params?.options?.runAtStart) {\n                        this.state.execute(this.state.ids.slice(-1)[0]).then()\n                    }\n                    return vdom\n                },\n            },\n        ]\n    }",
                        "startLine": 176,
                        "endLine": 229,
                        "references": {
                            "new NotebookPage": "@nav/api/Notebook.NotebookPage.constructor",
                            "Scope": "@nav/api/Notebook.Scope",
                            "NotebookOptions": "@nav/api/Notebook.NotebookOptions",
                            "Router": "@nav/api/MainModule.Router",
                            "NotebookPage": "@nav/api/Notebook.NotebookPage"
                        }
                    },
                    "semantic": {
                        "role": "constructor",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    }
                }
            ],
            "code": {
                "filePath": "src/lib/notebook/notebook-page.ts",
                "declaration": "export class NotebookPage implements VirtualDOM<'div'>",
                "implementation": "export class NotebookPage implements VirtualDOM<'div'> {\n    public readonly tag = 'div'\n    /**\n     * Classes associated to the view.\n     */\n    public readonly class = 'mknb-NotebookPage'\n    public readonly url: string\n    public readonly views: { [k: string]: ViewGenerator }\n    public readonly router: Router\n    public readonly children: ChildrenLike = []\n\n    /**\n     * Initial scope provided to the first executing cell.\n     */\n    public readonly initialScope: Partial<Scope>\n    /**\n     * State manager.\n     */\n    public readonly state: State\n\n    public readonly options: NotebookOptions\n\n    /**\n     * Constructs the page.\n     *\n     * @param params The parameters\n     * @param params.url Url pointing to the markdown content, only used if the `src` attribute is not provided.\n     * @param params.src Markdown source content. To fetch from a URL leave it empty & provide instead\n     * the `url` attribute.\n     * @param params.router Application's router.\n     * @param params.initialScope Initial scope provided to the first executing cell.\n     * @param params.options Global options for the page, in particular defined the default attribute for the various\n     * cells.\n     */\n    constructor(params: {\n        url?: string\n        src?: string\n        router: Router\n        initialScope?: Partial<Scope>\n        options?: NotebookOptions\n    }) {\n        Object.assign(this, params)\n        if (params.src === undefined && params.url === undefined) {\n            console.error(\n                'Neither url or src parameter provided to the notebook page.',\n            )\n            return\n        }\n        this.state = new State({\n            router: this.router,\n            initialScope: this.initialScope,\n        })\n\n        const source$ =\n            params.src !== undefined\n                ? of(params.src)\n                : from(fetch(this.url).then((resp) => resp.text())).pipe(\n                      take(1),\n                  )\n        const cellOptions = {\n            ...defaultCellAttributes,\n            ...(params.options?.defaultCellAttributes || {}),\n        }\n        this.children = [\n            {\n                source$,\n                vdomMap: (src: string) => {\n                    const vdom = parseMd({\n                        src,\n                        router: this.router,\n                        ...(this.options?.markdown || {}),\n                        views: {\n                            ...(this.options?.markdown?.views || {}),\n                            ...notebookViews({\n                                state: this.state,\n                                cellOptions,\n                            }),\n                        },\n                    })\n                    if (params?.options?.runAtStart) {\n                        this.state.execute(this.state.ids.slice(-1)[0]).then()\n                    }\n                    return vdom\n                },\n            },\n        ]\n    }\n}",
                "startLine": 142,
                "endLine": 230,
                "references": {
                    "NotebookPage": "@nav/api/Notebook.NotebookPage",
                    "Scope": "@nav/api/Notebook.Scope",
                    "NotebookOptions": "@nav/api/Notebook.NotebookOptions",
                    "Router": "@nav/api/MainModule.Router",
                    "VirtualDOM.children": "-1",
                    "VirtualDOM.class": "-1",
                    "State": "@nav/api/Notebook.State",
                    "VirtualDOM.tag": "-1",
                    "ViewGenerator": "@nav/api/MainModule.ViewGenerator"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "OutputsView",
            "documentation": {
                "sections": [
                    {
                        "content": "Represents the output view of a cell (when using *e.g.* the  `display`  function).",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "OutputsView",
            "attributes": [
                {
                    "name": "class",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Classes associated to the view.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "OutputsView.class",
                    "code": {
                        "filePath": "src/lib/notebook/cell-views.ts",
                        "declaration": "public readonly class: string = 'mknb-OutputsView'",
                        "implementation": "",
                        "startLine": 330,
                        "endLine": 331,
                        "references": {
                            "class": "@nav/api/Notebook.OutputsView.class",
                            "VirtualDOM.class": "-1"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/notebook/cell-views.ts",
                "declaration": "export class OutputsView implements VirtualDOM<'div'>",
                "implementation": "export class OutputsView implements VirtualDOM<'div'> {\n    public readonly tag = 'div'\n    /**\n     * Classes associated to the view.\n     */\n    public readonly class: string = 'mknb-OutputsView'\n    public readonly children: ChildrenLike\n    public readonly output$: Observable<Output>\n\n    public readonly style: CSSAttribute\n    /**\n     *\n     * @param params\n     * @param params.output$ Observable over the outputs to display.\n     * @param params.style Style to apply to this element.\n     * @param params.classList Classes added to this element.\n     */\n    constructor(params: {\n        output$: Observable<Output>\n        style?: CSSAttribute\n        classList?: string\n    }) {\n        Object.assign(this, params)\n        this.class = `${this.class} ${params.classList}`\n        const outputs$ = new BehaviorSubject([])\n        this.output$.subscribe((out: Output) => {\n            if (out === undefined) {\n                outputs$.next([])\n                return\n            }\n            outputs$.next([...outputs$.value, out])\n        })\n        this.children = {\n            source$: outputs$,\n            policy: 'sync',\n            vdomMap: (output: AnyVirtualDOM) => output,\n        }\n    }\n}",
                "startLine": 325,
                "endLine": 364,
                "references": {
                    "OutputsView": "@nav/api/Notebook.OutputsView",
                    "Output": "@nav/api/Notebook.Output",
                    "VirtualDOM.children": "-1",
                    "VirtualDOM.class": "-1",
                    "VirtualDOM.style": "-1",
                    "VirtualDOM.tag": "-1"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "PyCellExecutor",
            "documentation": {
                "sections": [
                    {
                        "content": "Represents the execution side of a Python cell within a  [NotebookPage](@nav/api/Notebook.NotebookPage) .\n\nThis implementation does not provide the views (editor, outputs), it is used as it is when loading separated notebook\npages to retrieve exported symbols.\nHowever, this implementation is typically inherited from  [PyCellView](@nav/api/Notebook.PyCellView)  to provide the regular views of\na python cell.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "PyCellExecutor",
            "attributes": [
                {
                    "name": "cellAttributes",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The provided attributes.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "PyCellExecutor.cellAttributes",
                    "code": {
                        "filePath": "src/lib/notebook/py-cell-view.ts",
                        "declaration": "public readonly cellAttributes: PyCellAttributes",
                        "implementation": "",
                        "startLine": 41,
                        "endLine": 42,
                        "references": {
                            "cellAttributes": "@nav/api/Notebook.PyCellExecutor.cellAttributes",
                            "CellCommonAttributes": "@nav/api/Notebook.CellCommonAttributes"
                        }
                    }
                },
                {
                    "name": "cellId",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Cell ID.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "PyCellExecutor.cellId",
                    "code": {
                        "filePath": "src/lib/notebook/py-cell-view.ts",
                        "declaration": "public readonly cellId: string",
                        "implementation": "",
                        "startLine": 27,
                        "endLine": 28,
                        "references": {
                            "cellId": "@nav/api/Notebook.PyCellExecutor.cellId",
                            "CellTrait.cellId": "@nav/api/Notebook.CellTrait.cellId"
                        }
                    }
                },
                {
                    "name": "content$",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Observable over the source content of the cell.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "PyCellExecutor.content$",
                    "code": {
                        "filePath": "src/lib/notebook/py-cell-view.ts",
                        "declaration": "public readonly content$: BehaviorSubject<string>",
                        "implementation": "",
                        "startLine": 46,
                        "endLine": 47,
                        "references": {
                            "content$": "@nav/api/Notebook.PyCellExecutor.content$",
                            "CellTrait.content$": "@nav/api/Notebook.CellTrait.content$"
                        }
                    }
                },
                {
                    "name": "invalidated$",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Emit when the cell is invalidated.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "PyCellExecutor.invalidated$",
                    "code": {
                        "filePath": "src/lib/notebook/py-cell-view.ts",
                        "declaration": "public readonly invalidated$: Observable<unknown>",
                        "implementation": "",
                        "startLine": 32,
                        "endLine": 33,
                        "references": {
                            "invalidated$": "@nav/api/Notebook.PyCellExecutor.invalidated$"
                        }
                    }
                },
                {
                    "name": "state",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "State manager, owned by the parent  [NotebookPage](@nav/api/Notebook.NotebookPage) .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "PyCellExecutor.state",
                    "code": {
                        "filePath": "src/lib/notebook/py-cell-view.ts",
                        "declaration": "public readonly state: State",
                        "implementation": "",
                        "startLine": 36,
                        "endLine": 37,
                        "references": {
                            "state": "@nav/api/Notebook.PyCellExecutor.state",
                            "State": "@nav/api/Notebook.State"
                        }
                    }
                }
            ],
            "callables": [
                {
                    "name": "execute",
                    "documentation": {
                        "sections": [
                            {
                                "content": "Execute the cell. See  [executePy](undefined) .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            },
                            {
                                "title": "Arguments",
                                "content": "\n*  **args**: See  [ExecArgs](@nav/api/Notebook.ExecArgs) .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "arguments",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "PyCellExecutor.execute",
                    "code": {
                        "filePath": "src/lib/notebook/py-cell-view.ts",
                        "declaration": "async execute(args: ExecArgs): Promise<Scope>",
                        "implementation": "async execute(args: ExecArgs): Promise<Scope> {\n        return await executePy({\n            ...args,\n            invalidated$: this.invalidated$,\n        })\n    }",
                        "startLine": 65,
                        "endLine": 71,
                        "references": {
                            "execute": "@nav/api/Notebook.PyCellExecutor.execute",
                            "ExecArgs": "@nav/api/Notebook.ExecArgs",
                            "Scope": "@nav/api/Notebook.Scope"
                        }
                    },
                    "semantic": {
                        "role": "method",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    }
                }
            ],
            "code": {
                "filePath": "src/lib/notebook/py-cell-view.ts",
                "declaration": "export class PyCellExecutor implements CellTrait",
                "implementation": "export class PyCellExecutor implements CellTrait {\n    /**\n     * Cell ID.\n     */\n    public readonly cellId: string\n\n    /**\n     * Emit when the cell is invalidated.\n     */\n    public readonly invalidated$: Observable<unknown>\n    /**\n     * State manager, owned by the parent {@link NotebookPage}.\n     */\n    public readonly state: State\n\n    /**\n     * The provided attributes.\n     */\n    public readonly cellAttributes: PyCellAttributes\n\n    /**\n     * Observable over the source content of the cell.\n     */\n    public readonly content$: BehaviorSubject<string>\n\n    constructor(params: {\n        cellId: string\n        content$: BehaviorSubject<string>\n        state: State\n        cellAttributes: PyCellAttributes\n    }) {\n        Object.assign(this, params)\n        this.invalidated$ = this.state.invalidated$.pipe(\n            filter((cellId) => cellId === this.cellId),\n        )\n    }\n\n    /**\n     * Execute the cell. See {@link executePy}.\n     *\n     * @param args See {@link ExecArgs}.\n     */\n    async execute(args: ExecArgs): Promise<Scope> {\n        return await executePy({\n            ...args,\n            invalidated$: this.invalidated$,\n        })\n    }\n}",
                "startLine": 23,
                "endLine": 72,
                "references": {
                    "PyCellExecutor": "@nav/api/Notebook.PyCellExecutor",
                    "CellCommonAttributes": "@nav/api/Notebook.CellCommonAttributes",
                    "State": "@nav/api/Notebook.State",
                    "CellTrait.cellId": "@nav/api/Notebook.CellTrait.cellId",
                    "CellTrait.content$": "@nav/api/Notebook.CellTrait.content$",
                    "ExecArgs": "@nav/api/Notebook.ExecArgs",
                    "Scope": "@nav/api/Notebook.Scope",
                    "CellTrait.execute": "@nav/api/Notebook.CellTrait.execute",
                    "PyCellView": "@nav/api/Notebook.PyCellView",
                    "CellTrait": "@nav/api/Notebook.CellTrait"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "PyCellView",
            "documentation": {
                "sections": [
                    {
                        "content": "Represents a Python cell within a  [NotebookPage](@nav/api/Notebook.NotebookPage) .\n\nThey are typically included from a DOM definition with tag name  `py-cell` , in this case\nassociated attributes are provided as DOM attributes; see  [PyCellAttributes](@nav/api/Notebook.PyCellAttributes) .",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "PyCellView",
            "attributes": [
                {
                    "name": "cellAttributes",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The provided attributes.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "PyCellExecutor.cellAttributes",
                    "code": {
                        "filePath": "src/lib/notebook/py-cell-view.ts",
                        "declaration": "public readonly cellAttributes: PyCellAttributes",
                        "implementation": "",
                        "startLine": 41,
                        "endLine": 42,
                        "references": {
                            "cellAttributes": "@nav/api/Notebook.PyCellExecutor.cellAttributes",
                            "CellCommonAttributes": "@nav/api/Notebook.CellCommonAttributes"
                        }
                    }
                },
                {
                    "name": "cellId",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Cell ID.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "PyCellExecutor.cellId",
                    "code": {
                        "filePath": "src/lib/notebook/py-cell-view.ts",
                        "declaration": "public readonly cellId: string",
                        "implementation": "",
                        "startLine": 27,
                        "endLine": 28,
                        "references": {
                            "cellId": "@nav/api/Notebook.PyCellExecutor.cellId",
                            "CellTrait.cellId": "@nav/api/Notebook.CellTrait.cellId"
                        }
                    }
                },
                {
                    "name": "class",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Classes associated to the view.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "PyCellView.class",
                    "code": {
                        "filePath": "src/lib/notebook/py-cell-view.ts",
                        "declaration": "public readonly class = 'mknb-JsCellView'",
                        "implementation": "",
                        "startLine": 85,
                        "endLine": 86,
                        "references": {
                            "class": "@nav/api/Notebook.PyCellView.class",
                            "VirtualDOM.class": "-1"
                        }
                    }
                },
                {
                    "name": "content$",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Observable over the source content of the cell.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "PyCellExecutor.content$",
                    "code": {
                        "filePath": "src/lib/notebook/py-cell-view.ts",
                        "declaration": "public readonly content$: BehaviorSubject<string>",
                        "implementation": "",
                        "startLine": 46,
                        "endLine": 47,
                        "references": {
                            "content$": "@nav/api/Notebook.PyCellExecutor.content$",
                            "CellTrait.content$": "@nav/api/Notebook.CellTrait.content$"
                        }
                    }
                },
                {
                    "name": "editorView",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The encapsulated code editor view.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "PyCellView.editorView",
                    "code": {
                        "filePath": "src/lib/notebook/py-cell-view.ts",
                        "declaration": "public readonly editorView: CodeSnippetView",
                        "implementation": "",
                        "startLine": 91,
                        "endLine": 92,
                        "references": {
                            "editorView": "@nav/api/Notebook.PyCellView.editorView",
                            "CodeSnippetView": "@nav/api/MainModule/MdWidgets.CodeSnippetView"
                        }
                    }
                },
                {
                    "name": "invalidated$",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Emit when the cell is invalidated.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "PyCellExecutor.invalidated$",
                    "code": {
                        "filePath": "src/lib/notebook/py-cell-view.ts",
                        "declaration": "public readonly invalidated$: Observable<unknown>",
                        "implementation": "",
                        "startLine": 32,
                        "endLine": 33,
                        "references": {
                            "invalidated$": "@nav/api/Notebook.PyCellExecutor.invalidated$"
                        }
                    }
                },
                {
                    "name": "state",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "State manager, owned by the parent  [NotebookPage](@nav/api/Notebook.NotebookPage) .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "PyCellExecutor.state",
                    "code": {
                        "filePath": "src/lib/notebook/py-cell-view.ts",
                        "declaration": "public readonly state: State",
                        "implementation": "",
                        "startLine": 36,
                        "endLine": 37,
                        "references": {
                            "state": "@nav/api/Notebook.PyCellExecutor.state",
                            "State": "@nav/api/Notebook.State"
                        }
                    }
                }
            ],
            "callables": [
                {
                    "name": "execute",
                    "documentation": {
                        "sections": [
                            {
                                "content": "Execute the cell. See  [executePy](undefined) .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            },
                            {
                                "title": "Arguments",
                                "content": "\n*  **args**: See  [ExecArgs](@nav/api/Notebook.ExecArgs) .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "arguments",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "PyCellView.execute",
                    "code": {
                        "filePath": "",
                        "declaration": "",
                        "implementation": "",
                        "startLine": 1,
                        "endLine": 2,
                        "references": {}
                    },
                    "semantic": {
                        "role": "method",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    }
                }
            ],
            "code": {
                "filePath": "src/lib/notebook/py-cell-view.ts",
                "declaration": "export class PyCellView extends PyCellExecutor implements VirtualDOM<'div'>",
                "implementation": "export class PyCellView extends PyCellExecutor implements VirtualDOM<'div'> {\n    public readonly tag = 'div'\n    /**\n     * Classes associated to the view.\n     */\n    public readonly class = 'mknb-JsCellView'\n    public readonly children: ChildrenLike\n\n    /**\n     * The encapsulated code editor view.\n     */\n    public readonly editorView: CodeSnippetView\n\n    constructor(params: {\n        cellId: string\n        content: string\n        state: State\n        cellAttributes: PyCellAttributes\n    }) {\n        const editorView = new SnippetEditorView({\n            language: 'python',\n            readOnly: params.cellAttributes.readOnly,\n            content: params.content,\n            lineNumbers: params.cellAttributes.lineNumbers,\n            onExecute: () => this.state.execute(this.cellId).then(() => {}),\n        })\n\n        super({ ...params, content$: editorView.content$ })\n        this.editorView = editorView\n\n        this.children = [\n            new FutureCellView({\n                language: 'python',\n                cellId: this.cellId,\n                state: this.state,\n                editorView: this.editorView,\n                cellAttributes: this.cellAttributes,\n            }),\n        ]\n    }\n}",
                "startLine": 80,
                "endLine": 121,
                "references": {
                    "PyCellView": "@nav/api/Notebook.PyCellView",
                    "CellCommonAttributes": "@nav/api/Notebook.CellCommonAttributes",
                    "State": "@nav/api/Notebook.State",
                    "PyCellExecutor.constructor": "@nav/api/Notebook.PyCellExecutor.constructor",
                    "PyCellExecutor.cellAttributes": "@nav/api/Notebook.PyCellExecutor.cellAttributes",
                    "PyCellExecutor.cellId": "@nav/api/Notebook.PyCellExecutor.cellId",
                    "VirtualDOM.children": "-1",
                    "VirtualDOM.class": "-1",
                    "PyCellExecutor.content$": "@nav/api/Notebook.PyCellExecutor.content$",
                    "CodeSnippetView": "@nav/api/MainModule/MdWidgets.CodeSnippetView",
                    "PyCellExecutor.invalidated$": "@nav/api/Notebook.PyCellExecutor.invalidated$",
                    "PyCellExecutor.state": "@nav/api/Notebook.PyCellExecutor.state",
                    "VirtualDOM.tag": "-1",
                    "ExecArgs": "@nav/api/Notebook.ExecArgs",
                    "Scope": "@nav/api/Notebook.Scope",
                    "PyCellExecutor.execute": "@nav/api/Notebook.PyCellExecutor.execute",
                    "PyCellExecutor": "@nav/api/Notebook.PyCellExecutor"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "SnippetEditorView",
            "documentation": {
                "sections": [
                    {
                        "content": "View that displays code snippet in edition mode.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "SnippetEditorView",
            "attributes": [
                {
                    "name": "children",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The children of the associated HTML element.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "CodeSnippetView.children",
                    "code": {
                        "filePath": "src/lib/md-widgets/code-snippet.view.ts",
                        "declaration": "public readonly children: ChildrenLike",
                        "implementation": "",
                        "startLine": 96,
                        "endLine": 97,
                        "references": {
                            "children": "@nav/api/MainModule/MdWidgets.CodeSnippetView.children",
                            "VirtualDOM.children": "-1"
                        }
                    }
                },
                {
                    "name": "class",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The class list of the associated HTML element.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "CodeSnippetView.class",
                    "code": {
                        "filePath": "src/lib/md-widgets/code-snippet.view.ts",
                        "declaration": "public readonly class = 'mkdocs-ts CodeSnippetView w-100 overflow-auto mb-3'",
                        "implementation": "",
                        "startLine": 86,
                        "endLine": 87,
                        "references": {
                            "class": "@nav/api/MainModule/MdWidgets.CodeSnippetView.class",
                            "VirtualDOM.class": "-1"
                        }
                    }
                },
                {
                    "name": "codeMirrorConfiguration",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The code mirror configuration.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "CodeSnippetView.codeMirrorConfiguration",
                    "code": {
                        "filePath": "src/lib/md-widgets/code-snippet.view.ts",
                        "declaration": "public readonly codeMirrorConfiguration = {\n        lineNumbers: true,\n        lineWrapping: false,\n        indentUnit: 4,\n        readOnly: true,\n    }",
                        "implementation": "",
                        "startLine": 76,
                        "endLine": 77,
                        "references": {
                            "codeMirrorConfiguration": "@nav/api/MainModule/MdWidgets.CodeSnippetView.codeMirrorConfiguration"
                        }
                    }
                },
                {
                    "name": "style",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The style of the associated HTML element.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "CodeSnippetView.style",
                    "code": {
                        "filePath": "src/lib/md-widgets/code-snippet.view.ts",
                        "declaration": "public readonly style = {\n        fontSize: 'small',\n    }",
                        "implementation": "",
                        "startLine": 90,
                        "endLine": 91,
                        "references": {
                            "style": "@nav/api/MainModule/MdWidgets.CodeSnippetView.style",
                            "VirtualDOM.style": "-1"
                        }
                    }
                },
                {
                    "name": "tag",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The tag of the associated HTML element.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "CodeSnippetView.tag",
                    "code": {
                        "filePath": "src/lib/md-widgets/code-snippet.view.ts",
                        "declaration": "public readonly tag = 'div'",
                        "implementation": "",
                        "startLine": 72,
                        "endLine": 73,
                        "references": {
                            "tag": "@nav/api/MainModule/MdWidgets.CodeSnippetView.tag",
                            "VirtualDOM.tag": "-1"
                        }
                    }
                },
                {
                    "name": "hlLineClass",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Class appended to the line DOM for highlighted lines.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "CodeSnippetView.hlLineClass",
                    "code": {
                        "filePath": "src/lib/md-widgets/code-snippet.view.ts",
                        "declaration": "static hlLineClass = 'mkdocs-ts-bg-highlight'",
                        "implementation": "",
                        "startLine": 67,
                        "endLine": 68,
                        "references": {
                            "hlLineClass": "@nav/api/MainModule/MdWidgets.CodeSnippetView.hlLineClass"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/notebook/cell-views.ts",
                "declaration": "export class SnippetEditorView extends CodeSnippetView",
                "implementation": "export class SnippetEditorView extends CodeSnippetView {\n    /**\n     *\n     * @param params\n     * @param params.readOnly Whether the code is read-only.\n     * @param params.content The editor initial content.\n     * @param params.language The language of the cell.\n     * @param params.lineNumbers Whether to display line numbers.\n     * @param params.onExecute The action triggered upon execution (on 'Ctrl-Enter').\n     */\n    constructor({\n        language,\n        readOnly,\n        content,\n        lineNumbers,\n        onExecute,\n    }: {\n        content: string\n        language: 'markdown' | 'javascript' | 'python'\n        readOnly: boolean\n        lineNumbers: boolean\n        onExecute: () => void\n    }) {\n        super({\n            content,\n            language,\n            cmConfig: {\n                lineNumbers,\n                lineWrapping: false,\n                indentUnit: 4,\n                readOnly,\n                extraKeys: {\n                    'Ctrl-Enter': onExecute,\n                },\n            },\n        })\n    }\n}",
                "startLine": 166,
                "endLine": 204,
                "references": {
                    "SnippetEditorView": "@nav/api/Notebook.SnippetEditorView",
                    "CodeSnippetView.constructor": "@nav/api/MainModule/MdWidgets.CodeSnippetView.constructor",
                    "CodeSnippetView.children": "@nav/api/MainModule/MdWidgets.CodeSnippetView.children",
                    "CodeSnippetView.class": "@nav/api/MainModule/MdWidgets.CodeSnippetView.class",
                    "CodeSnippetView.codeMirrorConfiguration": "@nav/api/MainModule/MdWidgets.CodeSnippetView.codeMirrorConfiguration",
                    "CodeSnippetView.content$": "@nav/api/MainModule/MdWidgets.CodeSnippetView.content$",
                    "CodeSnippetView.style": "@nav/api/MainModule/MdWidgets.CodeSnippetView.style",
                    "CodeSnippetView.tag": "@nav/api/MainModule/MdWidgets.CodeSnippetView.tag",
                    "CodeLanguage": "@nav/api/MainModule/MdWidgets.CodeLanguage",
                    "CodeSnippetView.cmDependencies$": "@nav/api/MainModule/MdWidgets.CodeSnippetView.cmDependencies$",
                    "CodeSnippetView.hlLineClass": "@nav/api/MainModule/MdWidgets.CodeSnippetView.hlLineClass",
                    "CodeSnippetView.fetchCmDependencies$": "@nav/api/MainModule/MdWidgets.CodeSnippetView.fetchCmDependencies$",
                    "CodeSnippetView": "@nav/api/MainModule/MdWidgets.CodeSnippetView"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "State",
            "documentation": {
                "sections": [
                    {
                        "content": "Represents the state of a  [NotebookPage](@nav/api/Notebook.NotebookPage) .",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "State",
            "attributes": [
                {
                    "name": "cellIds$",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Observables over the cell IDs included in the associated  [NotebookPage](@nav/api/Notebook.NotebookPage) .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "State.cellIds$",
                    "code": {
                        "filePath": "src/lib/notebook/state.ts",
                        "declaration": "public readonly cellIds$ = new BehaviorSubject<string[]>([])",
                        "implementation": "",
                        "startLine": 147,
                        "endLine": 148,
                        "references": {
                            "cellIds$": "@nav/api/Notebook.State.cellIds$"
                        }
                    }
                },
                {
                    "name": "cells",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "List of the cells in the page.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "State.cells",
                    "code": {
                        "filePath": "src/lib/notebook/state.ts",
                        "declaration": "public readonly cells: CellTrait[] = []",
                        "implementation": "",
                        "startLine": 166,
                        "endLine": 167,
                        "references": {
                            "cells": "@nav/api/Notebook.State.cells",
                            "CellTrait": "@nav/api/Notebook.CellTrait"
                        }
                    }
                },
                {
                    "name": "cellsStatus$",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Observables over the cell's status keyed by the cell's ID.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "State.cellsStatus$",
                    "code": {
                        "filePath": "src/lib/notebook/state.ts",
                        "declaration": "public readonly cellsStatus$: { [k: string]: BehaviorSubject<CellStatus> } =\n        {}",
                        "implementation": "",
                        "startLine": 141,
                        "endLine": 142,
                        "references": {
                            "cellsStatus$": "@nav/api/Notebook.State.cellsStatus$",
                            "CellStatus": "@nav/api/Notebook.CellStatus"
                        }
                    }
                },
                {
                    "name": "deportedOutputsViews",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The deported output views as a list of their associated cell ID.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "State.deportedOutputsViews",
                    "code": {
                        "filePath": "src/lib/notebook/state.ts",
                        "declaration": "public readonly deportedOutputsViews: string[] = []",
                        "implementation": "",
                        "startLine": 157,
                        "endLine": 158,
                        "references": {
                            "deportedOutputsViews": "@nav/api/Notebook.State.deportedOutputsViews"
                        }
                    }
                },
                {
                    "name": "executing$",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Observables over whether the cell is currently executing keyed by the cell's ID.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "State.executing$",
                    "code": {
                        "filePath": "src/lib/notebook/state.ts",
                        "declaration": "public readonly executing$: { [k: string]: BehaviorSubject<boolean> } = {}",
                        "implementation": "",
                        "startLine": 152,
                        "endLine": 153,
                        "references": {
                            "executing$": "@nav/api/Notebook.State.executing$"
                        }
                    }
                },
                {
                    "name": "ids",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "List of the cell IDs in the page.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "State.ids",
                    "code": {
                        "filePath": "src/lib/notebook/state.ts",
                        "declaration": "public readonly ids: string[] = []",
                        "implementation": "",
                        "startLine": 162,
                        "endLine": 163,
                        "references": {
                            "ids": "@nav/api/Notebook.State.ids"
                        }
                    }
                },
                {
                    "name": "initialScope",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The initial scope (provided to the first cell when executed).",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "State.initialScope",
                    "code": {
                        "filePath": "src/lib/notebook/state.ts",
                        "declaration": "public readonly initialScope: Scope",
                        "implementation": "",
                        "startLine": 171,
                        "endLine": 172,
                        "references": {
                            "initialScope": "@nav/api/Notebook.State.initialScope",
                            "Scope": "@nav/api/Notebook.Scope"
                        }
                    }
                },
                {
                    "name": "invalidated$",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Observable that emits the ID of invalidated cells.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "State.invalidated$",
                    "code": {
                        "filePath": "src/lib/notebook/state.ts",
                        "declaration": "public readonly invalidated$ = new Subject<string>()",
                        "implementation": "",
                        "startLine": 129,
                        "endLine": 130,
                        "references": {
                            "invalidated$": "@nav/api/Notebook.State.invalidated$"
                        }
                    }
                },
                {
                    "name": "outputs$",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Observables over the cell's output keyed by the cell's ID.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "State.outputs$",
                    "code": {
                        "filePath": "src/lib/notebook/state.ts",
                        "declaration": "public readonly outputs$: { [k: string]: ReplaySubject<Output> } = {}",
                        "implementation": "",
                        "startLine": 133,
                        "endLine": 134,
                        "references": {
                            "outputs$": "@nav/api/Notebook.State.outputs$",
                            "Output": "@nav/api/Notebook.Output"
                        }
                    }
                },
                {
                    "name": "parent",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Optional related parent state (*e.g.*  [MdCellView](@nav/api/Notebook.MdCellView)  own their own executing state created upon execution).",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "State.parent",
                    "code": {
                        "filePath": "src/lib/notebook/state.ts",
                        "declaration": "public readonly parent?: { state: State; cellId: string }",
                        "implementation": "",
                        "startLine": 175,
                        "endLine": 176,
                        "references": {
                            "parent": "@nav/api/Notebook.State.parent",
                            "State": "@nav/api/Notebook.State"
                        }
                    }
                },
                {
                    "name": "router",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The application router, used to import modules from other notebook pages.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "State.router",
                    "code": {
                        "filePath": "src/lib/notebook/state.ts",
                        "declaration": "public readonly router: Router",
                        "implementation": "",
                        "startLine": 180,
                        "endLine": 181,
                        "references": {
                            "router": "@nav/api/Notebook.State.router",
                            "Router": "@nav/api/MainModule.Router"
                        }
                    }
                },
                {
                    "name": "scopes$",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Observables over the cell's entering scopes keyed by the cell's ID.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "State.scopes$",
                    "code": {
                        "filePath": "src/lib/notebook/state.ts",
                        "declaration": "public readonly scopes$: {\n        [k: string]: BehaviorSubject<Scope | undefined>\n    } = {}",
                        "implementation": "",
                        "startLine": 122,
                        "endLine": 123,
                        "references": {
                            "scopes$": "@nav/api/Notebook.State.scopes$",
                            "Scope": "@nav/api/Notebook.Scope"
                        }
                    }
                },
                {
                    "name": "src$",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Observables over the cell's source keyed by the cell's ID.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "State.src$",
                    "code": {
                        "filePath": "src/lib/notebook/state.ts",
                        "declaration": "public readonly src$: { [k: string]: BehaviorSubject<string> } = {}",
                        "implementation": "",
                        "startLine": 137,
                        "endLine": 138,
                        "references": {
                            "src$": "@nav/api/Notebook.State.src$"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/notebook/state.ts",
                "declaration": "export class State",
                "implementation": "export class State {\n    /**\n     * Observables over the cell's entering scopes keyed by the cell's ID.\n     */\n    public readonly scopes$: {\n        [k: string]: BehaviorSubject<Scope | undefined>\n    } = {}\n\n    /**\n     * Observable that emits the ID of invalidated cells.\n     */\n    public readonly invalidated$ = new Subject<string>()\n    /**\n     * Observables over the cell's output keyed by the cell's ID.\n     */\n    public readonly outputs$: { [k: string]: ReplaySubject<Output> } = {}\n    /**\n     * Observables over the cell's source keyed by the cell's ID.\n     */\n    public readonly src$: { [k: string]: BehaviorSubject<string> } = {}\n    /**\n     * Observables over the cell's status keyed by the cell's ID.\n     */\n    public readonly cellsStatus$: { [k: string]: BehaviorSubject<CellStatus> } =\n        {}\n\n    /**\n     * Observables over the cell IDs included in the associated {@link NotebookPage}.\n     */\n    public readonly cellIds$ = new BehaviorSubject<string[]>([])\n\n    /**\n     * Observables over whether the cell is currently executing keyed by the cell's ID.\n     */\n    public readonly executing$: { [k: string]: BehaviorSubject<boolean> } = {}\n\n    /**\n     * The deported output views as a list of their associated cell ID.\n     */\n    public readonly deportedOutputsViews: string[] = []\n\n    /**\n     * List of the cell IDs in the page.\n     */\n    public readonly ids: string[] = []\n    /**\n     * List of the cells in the page.\n     */\n    public readonly cells: CellTrait[] = []\n\n    /**\n     * The initial scope (provided to the first cell when executed).\n     */\n    public readonly initialScope: Scope\n    /**\n     * Optional related parent state (*e.g.* {@link MdCellView} own their own executing state created upon execution).\n     */\n    public readonly parent?: { state: State; cellId: string }\n\n    /**\n     * The application router, used to import modules from other notebook pages.\n     */\n    public readonly router: Router\n\n    public readonly modules: {\n        [k: string]: { state: State; exports: Scope }\n    } = {}\n\n    constructor(params: {\n        initialScope?: Partial<Scope>\n        router: Router\n        parent?: { state: State; cellId: string }\n    }) {\n        Object.assign(this, params)\n        this.initialScope = {\n            let: params.initialScope?.let || {},\n            const: {\n                webpm,\n                Views,\n                ...(params.initialScope?.const || {}),\n            },\n            python: params.initialScope?.python || {},\n        }\n\n        if (params.parent) {\n            params.parent.state.invalidated$\n                .pipe(filter((cellId) => cellId === params.parent.cellId))\n                .subscribe(() => {\n                    if (this.ids.length === 0) {\n                        return\n                    }\n                    this.unreadyCells({ afterCellId: this.ids[0] })\n                    Object.values(this.outputs$).forEach((output$) =>\n                        output$.next(undefined),\n                    )\n                })\n        }\n    }\n\n    appendCell(cell: CellTrait) {\n        this.ids.push(cell.cellId)\n        this.cellIds$.next(this.ids)\n        this.cells.push(cell)\n        if (!this.outputs$[cell.cellId]) {\n            this.outputs$[cell.cellId] = new ReplaySubject()\n            this.executing$[cell.cellId] = new BehaviorSubject(false)\n            this.src$[cell.cellId] = cell.content$\n        }\n\n        this.cellsStatus$[cell.cellId] = new BehaviorSubject<CellStatus>(\n            this.ids.length === 1 ? 'ready' : 'unready',\n        )\n        this.scopes$[cell.cellId] =\n            Object.keys(this.scopes$).length == 0\n                ? new BehaviorSubject(this.initialScope)\n                : new BehaviorSubject(undefined)\n        cell.content$.subscribe((src) => {\n            this.updateSrc({ cellId: cell.cellId, src })\n        })\n    }\n\n    registerDeportedOutputsView({\n        cellId,\n        classList,\n        style,\n        inlined,\n        fullScreen,\n    }: {\n        cellId: string\n        classList: string\n        style: CSSAttribute\n        inlined: boolean\n        fullScreen: boolean\n    }): OutputsView {\n        if (!this.outputs$[cellId]) {\n            this.outputs$[cellId] = new ReplaySubject()\n            this.executing$[cellId] = new BehaviorSubject(false)\n        }\n        const view = new DeportedOutputsView({\n            output$: this.outputs$[cellId],\n            style,\n            classList,\n            fullScreen,\n            inlined,\n        })\n        this.deportedOutputsViews.push(cellId)\n        return view\n    }\n\n    updateSrc({ cellId, src }: { cellId: string; src: string }) {\n        if (!this.src$[cellId]) {\n            this.src$[cellId] = new BehaviorSubject(src)\n        }\n        this.cellsStatus$[cellId].next('ready')\n        this.unreadyCells({ afterCellId: cellId })\n        if (this.parent) {\n            this.parent.state.unreadyCells({ afterCellId: this.parent.cellId })\n        }\n    }\n    async execute(id: string, rootExecution: boolean = true) {\n        if (this.ids.length === 0) {\n            return this.initialScope\n        }\n        const index = this.ids.indexOf(id)\n        this.cellsStatus$[id].next('pending')\n        if (!this.scopes$[id].value) {\n            await this.execute(this.ids[index - 1], false)\n        }\n        const scope$ = this.scopes$[id]\n        const output$ = this.outputs$[id]\n\n        output$.next(undefined)\n        this.cellsStatus$[id].next('executing')\n        this.executing$[id].next(true)\n        const scope = await this.cells[index].execute({\n            src: this.src$[id].value,\n            scope: scope$.getValue(),\n            output$,\n            load: this.loadModule(id),\n            cellId: id,\n            owningState: this,\n        })\n        this.cellsStatus$[id].next('success')\n        const nextId = this.ids[index + 1]\n        const remainingIds = this.ids.slice(index + 2)\n        if (nextId) {\n            this.scopes$[nextId].next(scope)\n            this.cellsStatus$[nextId].next('ready')\n        }\n        nextId && this.scopes$[nextId].next(scope)\n        remainingIds.forEach((id) => {\n            rootExecution && this.cellsStatus$[id].next('unready')\n            this.scopes$[id].next(undefined)\n            this.executing$[id].next(false)\n        })\n        return scope\n    }\n    private invalidateCells(cellId: string) {\n        this.invalidated$.next(cellId)\n    }\n\n    private dispose() {\n        this.cells.forEach((cell) => {\n            this.invalidateCells(cell.cellId)\n        })\n        Object.values(this.modules).forEach(({ state }) => {\n            state.dispose()\n        })\n    }\n\n    unreadyCells({ afterCellId }: { afterCellId: string }) {\n        const index = this.ids.indexOf(afterCellId)\n        this.invalidateCells(afterCellId)\n        const remainingIds = this.ids.slice(index + 1)\n        remainingIds.forEach((id) => {\n            this.cellsStatus$[id].next('unready')\n            this.scopes$[id].next(undefined)\n            this.executing$[id].next(false)\n            this.invalidateCells(id)\n        })\n    }\n\n    private loadModule(cellId: string) {\n        const components = ({\n            state,\n        }: {\n            state: State\n            cellOptions: CellCommonAttributes\n        }) => {\n            return {\n                'js-cell': (elem) => {\n                    const id =\n                        elem.getAttribute('cell-id') || elem.getAttribute('id')\n                    const reactive = elem.getAttribute('reactive')\n                    const cell = new JsCellExecutor({\n                        cellId: id,\n                        content$: new BehaviorSubject(elem.textContent),\n                        state: state,\n                        cellAttributes: {\n                            reactive,\n                        },\n                    })\n                    state.appendCell(cell)\n                    return { tag: 'div' as const }\n                },\n                'py-cell': (elem) => {\n                    const id =\n                        elem.getAttribute('cell-id') || elem.getAttribute('id')\n                    const cell = new PyCellExecutor({\n                        cellId: id,\n                        content$: new BehaviorSubject(elem.textContent),\n                        state: state,\n                        cellAttributes: {},\n                    })\n                    state.appendCell(cell)\n                    return { tag: 'div' as const }\n                },\n            }\n        }\n\n        return (path: string) => {\n            const router = this.router\n            if (this.modules[path]) {\n                this.modules[path].state.dispose()\n            }\n            const module$ = router.getNav({ path }).pipe(\n                switchMap((nav) => {\n                    const nbPage = nav.html({\n                        router,\n                    }) as unknown as NotebookPage\n                    return fromFetch(nbPage.url)\n                }),\n                switchMap((resp) => resp.text()),\n                switchMap((src) => {\n                    const state = new State({\n                        router,\n                        parent: { state: this, cellId },\n                    })\n                    parseMd({\n                        src: extractExportedCode(src),\n                        router,\n                        views: {\n                            ...components({\n                                state,\n                                cellOptions: defaultCellAttributes,\n                            }),\n                        },\n                    })\n                    return from(state.execute(state.ids.slice(-1)[0])).pipe(\n                        map((scope) => {\n                            this.modules[path] = { exports: scope, state }\n                            return this.modules[path]\n                        }),\n                    )\n                }),\n            )\n\n            return firstValueFrom(module$).then(({ exports }) => ({\n                ...exports.const,\n                ...exports.let,\n                ...exports.python,\n            }))\n        }\n    }\n}",
                "startLine": 118,
                "endLine": 423,
                "references": {
                    "State": "@nav/api/Notebook.State",
                    "Scope": "@nav/api/Notebook.Scope",
                    "Router": "@nav/api/MainModule.Router",
                    "CellTrait": "@nav/api/Notebook.CellTrait",
                    "CellStatus": "@nav/api/Notebook.CellStatus",
                    "Output": "@nav/api/Notebook.Output",
                    "OutputsView": "@nav/api/Notebook.OutputsView"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "CellTrait",
            "documentation": {
                "sections": [
                    {
                        "content": "Trait for a Cell within a  [NotebookPage](@nav/api/Notebook.NotebookPage) .",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "CellTrait",
            "attributes": [
                {
                    "name": "cellId",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Cell unique ID.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "CellTrait.cellId",
                    "code": {
                        "filePath": "src/lib/notebook/state.ts",
                        "declaration": "cellId: string",
                        "implementation": "",
                        "startLine": 104,
                        "endLine": 105,
                        "references": {
                            "cellId": "@nav/api/Notebook.CellTrait.cellId"
                        }
                    }
                },
                {
                    "name": "content$",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Observable over the source content of the cell.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "CellTrait.content$",
                    "code": {
                        "filePath": "src/lib/notebook/state.ts",
                        "declaration": "content$: BehaviorSubject<string>",
                        "implementation": "",
                        "startLine": 108,
                        "endLine": 109,
                        "references": {
                            "content$": "@nav/api/Notebook.CellTrait.content$"
                        }
                    }
                },
                {
                    "name": "execute",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Define the implementation of cell execution.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "CellTrait.execute",
                    "code": {
                        "filePath": "src/lib/notebook/state.ts",
                        "declaration": "execute: (args: ExecArgs) => Promise<Scope>",
                        "implementation": "",
                        "startLine": 112,
                        "endLine": 113,
                        "references": {
                            "execute": "@nav/api/Notebook.CellTrait.execute",
                            "ExecArgs": "@nav/api/Notebook.ExecArgs",
                            "Scope": "@nav/api/Notebook.Scope"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/notebook/state.ts",
                "declaration": "export interface CellTrait",
                "implementation": "export interface CellTrait {\n    /**\n     * Cell unique ID.\n     */\n    cellId: string\n    /**\n     * Observable over the source content of the cell.\n     */\n    content$: BehaviorSubject<string>\n    /**\n     * Define the implementation of cell execution.\n     */\n    execute: (args: ExecArgs) => Promise<Scope>\n}",
                "startLine": 100,
                "endLine": 114,
                "references": {
                    "CellTrait": "@nav/api/Notebook.CellTrait",
                    "ExecArgs": "@nav/api/Notebook.ExecArgs",
                    "Scope": "@nav/api/Notebook.Scope",
                    "JsCellExecutor": "@nav/api/Notebook.JsCellExecutor",
                    "MdCellView": "@nav/api/Notebook.MdCellView",
                    "PyCellExecutor": "@nav/api/Notebook.PyCellExecutor"
                }
            },
            "semantic": {
                "role": "interface",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "CellCommonAttributes",
            "documentation": {
                "sections": [
                    {
                        "content": "The common set for attributes of a notebook cell.\n\nWhen provided from a DOM element in the markdown source, they are defined using kebab case:\n ```\n<some-cell line-numbers='true' read-only='false'></some-cell>\n```",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "CellCommonAttributes",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/notebook/notebook-page.ts",
                "declaration": "export type CellCommonAttributes = {\n    /**\n     * Whether to display line numbers on cell.\n     */\n    lineNumbers?: boolean\n    /**\n     * Whether the cell is readonly.\n     */\n    readOnly?: boolean\n}",
                "implementation": "",
                "startLine": 18,
                "endLine": 19,
                "references": {
                    "CellCommonAttributes": "@nav/api/Notebook.CellCommonAttributes"
                }
            },
            "semantic": {
                "role": "type-alias",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "ExecArgs",
            "documentation": {
                "sections": [
                    {
                        "content": "Arguments used to execute a cell, see  [CellTrait.execute](@nav/api/Notebook.CellTrait.execute) .",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "ExecArgs",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/notebook/state.ts",
                "declaration": "export type ExecArgs = {\n    /**\n     * Cell ID.\n     */\n    cellId: string\n    /**\n     * Source to execute.\n     */\n    src: string\n\n    /**\n     * The function used to load a submodule from a notebook page.\n     *\n     * @param path Navigation path of the submodule.\n     * @returns The exported symbols.\n     */\n    load: (path: string) => Promise<{ [k: string]: unknown }>\n\n    /**\n     * Subject in which output (*e.g.* when using  ̀display` in a {@link JsCellView}) are sent.\n     */\n    output$: Subject<Output>\n    /**\n     * Owning state of the cell.\n     */\n    owningState: State\n    /**\n     * Entering scope of the cell.\n     */\n    scope: Scope\n}",
                "implementation": "",
                "startLine": 65,
                "endLine": 66,
                "references": {
                    "ExecArgs": "@nav/api/Notebook.ExecArgs",
                    "Output": "@nav/api/Notebook.Output",
                    "State": "@nav/api/Notebook.State",
                    "Scope": "@nav/api/Notebook.Scope"
                }
            },
            "semantic": {
                "role": "type-alias",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "JsCellAttributes",
            "documentation": {
                "sections": [
                    {
                        "content": "All attributes available for a javascript cell: the common ones + 'reactive'.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "JsCellAttributes",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/notebook/js-cell-view.ts",
                "declaration": "export type JsCellAttributes = CellCommonAttributes & {\n    /**\n     * If the cell is reactive, Observables & Promises referenced are automatically resolved.\n     * It uses a 'combineLatest' policy.\n     */\n    reactive: true\n}",
                "implementation": "",
                "startLine": 12,
                "endLine": 13,
                "references": {
                    "JsCellAttributes": "@nav/api/Notebook.JsCellAttributes",
                    "CellCommonAttributes": "@nav/api/Notebook.CellCommonAttributes"
                }
            },
            "semantic": {
                "role": "type-alias",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "MdCellAttributes",
            "documentation": {
                "sections": [
                    {
                        "content": "All attributes available for a Markdown cell are the common ones for now.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "MdCellAttributes",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/notebook/md-cell-view.ts",
                "declaration": "export type MdCellAttributes = CellCommonAttributes",
                "implementation": "",
                "startLine": 14,
                "endLine": 15,
                "references": {
                    "MdCellAttributes": "@nav/api/Notebook.MdCellAttributes",
                    "CellCommonAttributes": "@nav/api/Notebook.CellCommonAttributes"
                }
            },
            "semantic": {
                "role": "type-alias",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "NotebookOptions",
            "documentation": {
                "sections": [
                    {
                        "content": "Global options for a  [NotebookPage](@nav/api/Notebook.NotebookPage) .",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "NotebookOptions",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/notebook/notebook-page.ts",
                "declaration": "export type NotebookOptions = {\n    /**\n     * Whether to run all the cells of a notebook page when loaded.\n     */\n    runAtStart?: boolean\n    /**\n     * The default values for cell's attribute.\n     */\n    defaultCellAttributes?: CellCommonAttributes\n\n    /**\n     * Options for markdown parsing.\n     */\n    markdown?: MdParsingOptions\n}",
                "implementation": "",
                "startLine": 40,
                "endLine": 41,
                "references": {
                    "NotebookOptions": "@nav/api/Notebook.NotebookOptions",
                    "CellCommonAttributes": "@nav/api/Notebook.CellCommonAttributes",
                    "MdParsingOptions": "@nav/api/MainModule.MdParsingOptions"
                }
            },
            "semantic": {
                "role": "type-alias",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "Output",
            "documentation": {
                "sections": [
                    {
                        "content": "Type of the outputs generated by a cell.\n\nThe type  `undefined`  is a signal to clear the outputs displayed.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "Output",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/notebook/state.ts",
                "declaration": "export type Output = AnyVirtualDOM | undefined",
                "implementation": "",
                "startLine": 60,
                "endLine": 61,
                "references": {
                    "Output": "@nav/api/Notebook.Output"
                }
            },
            "semantic": {
                "role": "type-alias",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "PyCellAttributes",
            "documentation": {
                "sections": [
                    {
                        "content": "All attributes available for a python cell are the common ones for now.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "PyCellAttributes",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/notebook/py-cell-view.ts",
                "declaration": "export type PyCellAttributes = CellCommonAttributes",
                "implementation": "",
                "startLine": 12,
                "endLine": 13,
                "references": {
                    "PyCellAttributes": "@nav/api/Notebook.PyCellAttributes",
                    "CellCommonAttributes": "@nav/api/Notebook.CellCommonAttributes"
                }
            },
            "semantic": {
                "role": "type-alias",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "Scope",
            "documentation": {
                "sections": [
                    {
                        "content": "Represents the scope of a cell.\n\nThis is a work in progress: at least functions and classes are missing.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "Scope",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/notebook/state.ts",
                "declaration": "export type Scope = {\n    /**\n     * The `let` variables: keyed by their name and mapped to their values.\n     */\n    let: { [k: string]: unknown }\n    /**\n     * The `const` variables: keyed by their name and mapped to their values.\n     */\n    const: { [k: string]: unknown }\n\n    /**\n     * The exported globals of python runtime.\n     */\n    python: { [k: string]: unknown }\n}",
                "implementation": "",
                "startLine": 39,
                "endLine": 40,
                "references": {
                    "Scope": "@nav/api/Notebook.Scope"
                }
            },
            "semantic": {
                "role": "type-alias",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        }
    ],
    "callables": [
        {
            "name": "executeJs",
            "documentation": {
                "sections": [
                    {
                        "content": "Execute a given javascript source content.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    },
                    {
                        "title": "Arguments",
                        "content": "\n*  **invalidated$**: Observable that emits when the associated cell is invalidated.\n*  **load**: The function used to load a submodule from another notebook page.\n*  **output$**: Subject in which output views are sent (when using  `display`  function).\n*  **reactive**: If true, observables & promises are resolved before cell execution using a  `combineLatest` \npolicy.\n*  **scope**: The entering scope.\n*  **src**: The source to execute",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "arguments",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    },
                    {
                        "title": "Returns",
                        "content": "Promise over the scope at exit",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "returns",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "executeJs",
            "code": {
                "filePath": "src/lib/notebook/js-execution.ts",
                "declaration": "export async function executeJs({\n    src,\n    scope,\n    output$,\n    load,\n    reactive,\n    invalidated$,\n}: {\n    src: string\n    scope: Scope\n    output$: Subject<AnyVirtualDOM>\n    load: (path: string) => Promise<{ [k: string]: unknown }>\n    reactive?: boolean\n    invalidated$: Observable<unknown>\n}): Promise<Scope>",
                "implementation": "export async function executeJs({\n    src,\n    scope,\n    output$,\n    load,\n    reactive,\n    invalidated$,\n}: {\n    src: string\n    scope: Scope\n    output$: Subject<AnyVirtualDOM>\n    load: (path: string) => Promise<{ [k: string]: unknown }>\n    reactive?: boolean\n    invalidated$: Observable<unknown>\n}): Promise<Scope> {\n    const ast = parseProgram(src)\n    const declarations = extractGlobalDeclarations(ast)\n    const displayInOutput = (...element: HTMLElement[]) =>\n        display(output$, ...element)\n\n    let footer = `\nreturn { \n    const:{ ${extractKeys(scope.const)} ${extractKeys(declarations.const)} },\n    let:{ ${extractKeys(scope.let)} ${extractKeys(declarations.let)} },\n    python:{ ${extractKeys(scope.python)} },\n}\n    `\n    let wrapped = src\n    if (reactive) {\n        const patched = patchReactiveCell({ ast, scope, declarations, src })\n        footer = patched ? patched.footer : footer\n        wrapped = patched ? patched.wrapped : wrapped\n    }\n    const srcPatched = `\nreturn async (scope, {display, output$, load, invalidated$}) => {\n    // header\nconst {${extractKeys({ ...scope.const, ...scope.python })}} = {...scope.const, ...scope.python}\nlet {${extractKeys(scope.let)}} = scope.let\n\n    // original src\n    \n${wrapped}\n    \n    // footer\n${footer}\n}\n    `\n    const scopeOut = await new Function(srcPatched)()(scope, {\n        display: displayInOutput,\n        load,\n        invalidated$,\n        output$,\n    })\n    console.log('JS cell execution done', { src, scopeIn: scope, scopeOut })\n    return scopeOut\n}",
                "startLine": 79,
                "endLine": 135,
                "references": {
                    "executeJs": "@nav/api/Notebook.executeJs",
                    "Scope": "@nav/api/Notebook.Scope"
                }
            },
            "semantic": {
                "role": "function",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "executeJsStatement",
            "documentation": {
                "sections": [
                    {
                        "content": "Execute a given javascript statement. This execution is reactive by default.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    },
                    {
                        "title": "Arguments",
                        "content": "\n*  **invalidated$**: Observable that emits when the associated cell is invalidated.\n*  **output$**: Subject in which output views are sent (when using  `display`  function).\n*  **scope**: The entering scope.\n*  **src**: The source to execute",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "arguments",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    },
                    {
                        "title": "Returns",
                        "content": "Promise over the scope at exit",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "returns",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "executeJsStatement",
            "code": {
                "filePath": "src/lib/notebook/js-execution.ts",
                "declaration": "export async function executeJsStatement({\n    src,\n    scope,\n    output$,\n    invalidated$,\n}: {\n    src: string\n    scope: Scope\n    output$: Subject<Output>\n    invalidated$: Observable<unknown>\n})",
                "implementation": "export async function executeJsStatement({\n    src,\n    scope,\n    output$,\n    invalidated$,\n}: {\n    src: string\n    scope: Scope\n    output$: Subject<Output>\n    invalidated$: Observable<unknown>\n}) {\n    const displayInOutput = (...element: HTMLElement[]) =>\n        display(output$, ...element)\n    const ast = parseProgram(src)\n    const declarations = extractGlobalDeclarations(ast)\n    const patchedReactive = patchReactiveCell({\n        ast,\n        scope,\n        declarations,\n        src: `display(${src})`,\n    })\n\n    const srcPatched = `\nreturn async (scope, {display, invalidated$, output$}) => {\n    // header\nconst {${extractKeys(scope.const)}} = scope.const\nlet {${extractKeys(scope.let)}} = scope.let\n\n    // original src\n    \n${patchedReactive.wrapped}\n    \n}\n    `\n    const scopeOut = await new Function(srcPatched)()(scope, {\n        display: displayInOutput,\n        invalidated$,\n        output$,\n    })\n    console.log('JS statement execution done', { scopeIn: scope, scopeOut })\n    return scopeOut\n}",
                "startLine": 23,
                "endLine": 65,
                "references": {
                    "executeJsStatement": "@nav/api/Notebook.executeJsStatement",
                    "Output": "@nav/api/Notebook.Output",
                    "Scope": "@nav/api/Notebook.Scope"
                }
            },
            "semantic": {
                "role": "function",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        }
    ],
    "files": [
        {
            "name": "index.ts",
            "path": "src/lib/notebook/views/index.ts",
            "documentation": {
                "sections": [
                    {
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "content": "This module gathers the definition of simple views to use within a notebook page.",
                        "contentType": "markdown"
                    }
                ]
            }
        },
        {
            "name": "cell-views.ts",
            "path": "src/lib/notebook/cell-views.ts",
            "documentation": {
                "sections": [
                    {
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "content": "This file gathers various views used when rendering the .",
                        "contentType": "markdown"
                    }
                ]
            }
        },
        {
            "name": "md-cell-view.ts",
            "path": "src/lib/notebook/md-cell-view.ts",
            "documentation": {
                "sections": [
                    {
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "content": "",
                        "contentType": "markdown"
                    }
                ]
            }
        },
        {
            "name": "js-cell-view.ts",
            "path": "src/lib/notebook/js-cell-view.ts",
            "documentation": {
                "sections": [
                    {
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "content": "",
                        "contentType": "markdown"
                    }
                ]
            }
        },
        {
            "name": "notebook-page.ts",
            "path": "src/lib/notebook/notebook-page.ts",
            "documentation": {
                "sections": [
                    {
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "content": "",
                        "contentType": "markdown"
                    }
                ]
            }
        },
        {
            "name": "py-cell-view.ts",
            "path": "src/lib/notebook/py-cell-view.ts",
            "documentation": {
                "sections": [
                    {
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "content": "",
                        "contentType": "markdown"
                    }
                ]
            }
        },
        {
            "name": "state.ts",
            "path": "src/lib/notebook/state.ts",
            "documentation": {
                "sections": [
                    {
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "content": "",
                        "contentType": "markdown"
                    }
                ]
            }
        },
        {
            "name": "js-execution.ts",
            "path": "src/lib/notebook/js-execution.ts",
            "documentation": {
                "sections": [
                    {
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "content": "",
                        "contentType": "markdown"
                    }
                ]
            }
        }
    ],
    "children": [
        {
            "name": "Views",
            "path": "mkdocs-ts/Notebook.Views",
            "isLeaf": true
        }
    ],
    "semantic": {
        "role": "module",
        "labels": [],
        "attributes": {},
        "relations": {}
    }
}
