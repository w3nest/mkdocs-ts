{
    "name": "Views",
    "documentation": {
        "sections": []
    },
    "path": "",
    "attributes": [],
    "types": [
        {
            "name": "DefaultLayoutView",
            "documentation": {
                "sections": [
                    {
                        "content": "Defines the default layout:\n*  A top banner at the top.\n*  Navigation on the left-side.\n*  Page's html content as main content.\n*  On the right the table of content.\n\nDepending on the screen size, the navigation and TOC can be collapsed into a top-banner menu.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "DefaultLayoutView",
            "attributes": [
                {
                    "name": "displayModeNav$",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The display mode regarding the navigation panel.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "DefaultLayoutView.displayModeNav$",
                    "code": {
                        "filePath": "src/lib/views/default-layout.view.ts",
                        "declaration": "public readonly displayModeNav$ = new BehaviorSubject<DisplayMode>('Full')",
                        "implementation": "",
                        "startLine": 96,
                        "endLine": 97,
                        "references": {
                            "displayModeNav$": "@nav/api/MainModule/Views.DefaultLayoutView.displayModeNav$",
                            "DisplayMode": "@nav/api/MainModule/Views.DisplayMode"
                        }
                    }
                },
                {
                    "name": "displayModeToc$",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The display mode regarding the table of content.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "DefaultLayoutView.displayModeToc$",
                    "code": {
                        "filePath": "src/lib/views/default-layout.view.ts",
                        "declaration": "public readonly displayModeToc$ = new BehaviorSubject<DisplayMode>('Full')",
                        "implementation": "",
                        "startLine": 100,
                        "endLine": 101,
                        "references": {
                            "displayModeToc$": "@nav/api/MainModule/Views.DefaultLayoutView.displayModeToc$",
                            "DisplayMode": "@nav/api/MainModule/Views.DisplayMode"
                        }
                    }
                }
            ],
            "callables": [
                {
                    "name": "new DefaultLayoutView",
                    "documentation": {
                        "sections": [
                            {
                                "content": "Initializes a new instance.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            },
                            {
                                "title": "Arguments",
                                "content": "\n*  **footer**: Optional custom footer view to use, default to  [FooterView](@nav/api/MainModule/Views.FooterView) .\n*  **layoutOptions**: Display options regarding sizing of the main elements in the page.\n*  **name**: The name of the application or a VirtualDOM to display instead as title.\nIf the parameter  `topBanner`  is provided, this name is forwarded as  `title`  parameter.\n*  **router**: The router.\n*  **topBanner**: Optional custom top-banner view to use, default to  [TopBannerView](@nav/api/MainModule/Views.TopBannerView) .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "arguments",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "DefaultLayoutView.new DefaultLayoutView",
                    "code": {
                        "filePath": "src/lib/views/default-layout.view.ts",
                        "declaration": "constructor({\n        router,\n        name,\n        topBanner,\n        footer,\n        layoutOptions,\n    }: {\n        router: Router\n        name: string | AnyVirtualDOM\n        topBanner?: LayoutElementView\n        footer?: LayoutElementView\n        layoutOptions?: Partial<LayoutOptions>\n    })",
                        "implementation": "constructor({\n        router,\n        name,\n        topBanner,\n        footer,\n        layoutOptions,\n    }: {\n        router: Router\n        name: string | AnyVirtualDOM\n        topBanner?: LayoutElementView\n        footer?: LayoutElementView\n        layoutOptions?: Partial<LayoutOptions>\n    }) {\n        this.layoutOptions = Object.assign(\n            this.layoutOptions,\n            layoutOptions || {},\n        )\n        const wrapperSideNav = (side: 'left' | 'right') => ({\n            tag: 'div' as const,\n            class: 'mkdocs-WrapperSideNav',\n            style: {\n                width:\n                    side === 'left'\n                        ? this.layoutOptions.navWidth\n                        : this.layoutOptions.tocWidth,\n            },\n        })\n        this.connectedCallback = (e: HTMLElement) => {\n            const resizeObserver = new ResizeObserver((entries) => {\n                const width = entries[0].contentRect.width\n                e.classList.remove(\n                    'mkdocs-DefaultLayoutView',\n                    'mkdocs-DefaultLayoutView-s',\n                    'mkdocs-DefaultLayoutView-xs',\n                    'mkdocs-DefaultLayoutView-xxs',\n                )\n\n                if (width < 1300) {\n                    e.classList.add('mkdocs-DefaultLayoutView-s')\n                }\n\n                if (width < 1000) {\n                    e.classList.add('mkdocs-DefaultLayoutView-xxs')\n                    this.displayModeNav$.next('Minimized')\n                    this.displayModeToc$.next('Minimized')\n                    return\n                }\n                if (width < 1300) {\n                    e.classList.add('mkdocs-DefaultLayoutView-xs')\n                    this.displayModeNav$.next('Minimized')\n                    this.displayModeToc$.next('Full')\n                    return\n                }\n                e.classList.add('mkdocs-DefaultLayoutView')\n                this.displayModeNav$.next('Full')\n                this.displayModeToc$.next('Full')\n            })\n            resizeObserver.observe(e)\n        }\n        const viewInputs = {\n            title: name,\n            router,\n            displayModeNav$: this.displayModeNav$,\n            displayModeToc$: this.displayModeToc$,\n            layoutOptions: this.layoutOptions,\n        }\n        const topBannerView = topBanner\n            ? topBanner(viewInputs)\n            : new TopBannerView({\n                  name,\n                  displayModeNav$: this.displayModeNav$,\n                  displayModeToc$: this.displayModeToc$,\n                  router,\n              })\n        const footerView = footer ? footer(viewInputs) : new FooterView()\n        this.children = [\n            topBannerView,\n            {\n                tag: 'div',\n                class: 'flex-grow-1 w-100 overflow-auto pt-2',\n                style: {\n                    minHeight: '0px',\n                },\n                connectedCallback: (e) => {\n                    router.scrollableElement = e\n                },\n                children: [\n                    {\n                        tag: 'div',\n                        class: 'd-flex justify-content-center pt-5 w-100',\n                        children: [\n                            {\n                                source$: this.displayModeNav$.pipe(\n                                    distinctUntilChanged(),\n                                ),\n                                vdomMap: (mode: DisplayMode): AnyVirtualDOM => {\n                                    return mode === 'Minimized'\n                                        ? { tag: 'div' }\n                                        : {\n                                              ...wrapperSideNav('left'),\n                                              children: [\n                                                  new NavigationView({\n                                                      router,\n                                                  }),\n                                              ],\n                                          }\n                                },\n                            },\n                            {\n                                tag: 'div',\n                                style: {\n                                    width: this.layoutOptions.pageWidth,\n                                    maxWidth: this.layoutOptions.pageMaxWidth,\n                                    height: 'fit-content',\n                                    minHeight: '100%',\n                                },\n                                children: [\n                                    {\n                                        tag: 'div',\n                                        class: `w-100`,\n                                        style: {\n                                            paddingLeft:\n                                                this.layoutOptions.pageXPadding,\n                                            paddingRight:\n                                                this.layoutOptions.pageXPadding,\n                                        },\n                                        children: [\n                                            new PageView({ router: router }),\n                                        ],\n                                    },\n                                ],\n                            },\n                            {\n                                source$: this.displayModeToc$.pipe(\n                                    distinctUntilChanged(),\n                                ),\n                                vdomMap: (mode: DisplayMode): AnyVirtualDOM => {\n                                    return mode === 'Minimized'\n                                        ? { tag: 'div' }\n                                        : {\n                                              ...wrapperSideNav('right'),\n                                              children: [\n                                                  new TocWrapperView({\n                                                      router,\n                                                  }),\n                                              ],\n                                          }\n                                },\n                            },\n                        ],\n                    },\n                    {\n                        tag: 'footer',\n                        style: {\n                            position: 'sticky' as const,\n                            top: '100%',\n                        },\n                        children: [footerView],\n                    },\n                ],\n            },\n        ]\n    }",
                        "startLine": 118,
                        "endLine": 281,
                        "references": {
                            "new DefaultLayoutView": "@nav/api/MainModule/Views.DefaultLayoutView.constructor",
                            "LayoutElementView": "@nav/api/MainModule/Views.LayoutElementView",
                            "LayoutOptions": "@nav/api/MainModule/Views.LayoutOptions",
                            "Router": "@nav/api/MainModule.Router",
                            "DefaultLayoutView": "@nav/api/MainModule/Views.DefaultLayoutView"
                        }
                    },
                    "semantic": {
                        "role": "constructor",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    }
                }
            ],
            "code": {
                "filePath": "src/lib/views/default-layout.view.ts",
                "declaration": "export class DefaultLayoutView implements VirtualDOM<'div'>",
                "implementation": "export class DefaultLayoutView implements VirtualDOM<'div'> {\n    public readonly layoutOptions: LayoutOptions = defaultLayoutOptions()\n\n    public readonly tag = 'div'\n    public readonly children: AnyVirtualDOM[]\n    public readonly class =\n        'mkdocs-DefaultLayoutView d-flex flex-column h-100 w-100 overflow-y-auto'\n\n    /**\n     * The display mode regarding the navigation panel.\n     */\n    public readonly displayModeNav$ = new BehaviorSubject<DisplayMode>('Full')\n    /**\n     * The display mode regarding the table of content.\n     */\n    public readonly displayModeToc$ = new BehaviorSubject<DisplayMode>('Full')\n\n    public readonly connectedCallback: (e: HTMLElement) => undefined\n\n    public readonly style = {\n        position: 'relative' as const,\n    }\n    /**\n     * Initializes a new instance.\n     *\n     * @param _p\n     * @param _p.router The router.\n     * @param _p.name The name of the application or a VirtualDOM to display instead as title.\n     * If the parameter `topBanner` is provided, this name is forwarded as `title` parameter.\n     * @param _p.topBanner Optional custom top-banner view to use, default to {@link TopBannerView}.\n     * @param _p.footer Optional custom footer view to use, default to {@link FooterView}.\n     * @param _p.layoutOptions Display options regarding sizing of the main elements in the page.\n     */\n    constructor({\n        router,\n        name,\n        topBanner,\n        footer,\n        layoutOptions,\n    }: {\n        router: Router\n        name: string | AnyVirtualDOM\n        topBanner?: LayoutElementView\n        footer?: LayoutElementView\n        layoutOptions?: Partial<LayoutOptions>\n    }) {\n        this.layoutOptions = Object.assign(\n            this.layoutOptions,\n            layoutOptions || {},\n        )\n        const wrapperSideNav = (side: 'left' | 'right') => ({\n            tag: 'div' as const,\n            class: 'mkdocs-WrapperSideNav',\n            style: {\n                width:\n                    side === 'left'\n                        ? this.layoutOptions.navWidth\n                        : this.layoutOptions.tocWidth,\n            },\n        })\n        this.connectedCallback = (e: HTMLElement) => {\n            const resizeObserver = new ResizeObserver((entries) => {\n                const width = entries[0].contentRect.width\n                e.classList.remove(\n                    'mkdocs-DefaultLayoutView',\n                    'mkdocs-DefaultLayoutView-s',\n                    'mkdocs-DefaultLayoutView-xs',\n                    'mkdocs-DefaultLayoutView-xxs',\n                )\n\n                if (width < 1300) {\n                    e.classList.add('mkdocs-DefaultLayoutView-s')\n                }\n\n                if (width < 1000) {\n                    e.classList.add('mkdocs-DefaultLayoutView-xxs')\n                    this.displayModeNav$.next('Minimized')\n                    this.displayModeToc$.next('Minimized')\n                    return\n                }\n                if (width < 1300) {\n                    e.classList.add('mkdocs-DefaultLayoutView-xs')\n                    this.displayModeNav$.next('Minimized')\n                    this.displayModeToc$.next('Full')\n                    return\n                }\n                e.classList.add('mkdocs-DefaultLayoutView')\n                this.displayModeNav$.next('Full')\n                this.displayModeToc$.next('Full')\n            })\n            resizeObserver.observe(e)\n        }\n        const viewInputs = {\n            title: name,\n            router,\n            displayModeNav$: this.displayModeNav$,\n            displayModeToc$: this.displayModeToc$,\n            layoutOptions: this.layoutOptions,\n        }\n        const topBannerView = topBanner\n            ? topBanner(viewInputs)\n            : new TopBannerView({\n                  name,\n                  displayModeNav$: this.displayModeNav$,\n                  displayModeToc$: this.displayModeToc$,\n                  router,\n              })\n        const footerView = footer ? footer(viewInputs) : new FooterView()\n        this.children = [\n            topBannerView,\n            {\n                tag: 'div',\n                class: 'flex-grow-1 w-100 overflow-auto pt-2',\n                style: {\n                    minHeight: '0px',\n                },\n                connectedCallback: (e) => {\n                    router.scrollableElement = e\n                },\n                children: [\n                    {\n                        tag: 'div',\n                        class: 'd-flex justify-content-center pt-5 w-100',\n                        children: [\n                            {\n                                source$: this.displayModeNav$.pipe(\n                                    distinctUntilChanged(),\n                                ),\n                                vdomMap: (mode: DisplayMode): AnyVirtualDOM => {\n                                    return mode === 'Minimized'\n                                        ? { tag: 'div' }\n                                        : {\n                                              ...wrapperSideNav('left'),\n                                              children: [\n                                                  new NavigationView({\n                                                      router,\n                                                  }),\n                                              ],\n                                          }\n                                },\n                            },\n                            {\n                                tag: 'div',\n                                style: {\n                                    width: this.layoutOptions.pageWidth,\n                                    maxWidth: this.layoutOptions.pageMaxWidth,\n                                    height: 'fit-content',\n                                    minHeight: '100%',\n                                },\n                                children: [\n                                    {\n                                        tag: 'div',\n                                        class: `w-100`,\n                                        style: {\n                                            paddingLeft:\n                                                this.layoutOptions.pageXPadding,\n                                            paddingRight:\n                                                this.layoutOptions.pageXPadding,\n                                        },\n                                        children: [\n                                            new PageView({ router: router }),\n                                        ],\n                                    },\n                                ],\n                            },\n                            {\n                                source$: this.displayModeToc$.pipe(\n                                    distinctUntilChanged(),\n                                ),\n                                vdomMap: (mode: DisplayMode): AnyVirtualDOM => {\n                                    return mode === 'Minimized'\n                                        ? { tag: 'div' }\n                                        : {\n                                              ...wrapperSideNav('right'),\n                                              children: [\n                                                  new TocWrapperView({\n                                                      router,\n                                                  }),\n                                              ],\n                                          }\n                                },\n                            },\n                        ],\n                    },\n                    {\n                        tag: 'footer',\n                        style: {\n                            position: 'sticky' as const,\n                            top: '100%',\n                        },\n                        children: [footerView],\n                    },\n                ],\n            },\n        ]\n    }\n}",
                "startLine": 85,
                "endLine": 282,
                "references": {
                    "DefaultLayoutView": "@nav/api/MainModule/Views.DefaultLayoutView",
                    "LayoutElementView": "@nav/api/MainModule/Views.LayoutElementView",
                    "LayoutOptions": "@nav/api/MainModule/Views.LayoutOptions",
                    "Router": "@nav/api/MainModule.Router",
                    "VirtualDOM.children": "-1",
                    "VirtualDOM.class": "-1",
                    "VirtualDOM.connectedCallback": "-1",
                    "DisplayMode": "@nav/api/MainModule/Views.DisplayMode",
                    "VirtualDOM.style": "-1",
                    "VirtualDOM.tag": "-1"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "ExpandedNavigationView",
            "documentation": {
                "sections": [
                    {
                        "content": "The modal navigation view when expanded.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "ExpandedNavigationView",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/views/navigation.view.ts",
                "declaration": "export class ExpandedNavigationView implements VirtualDOM<'div'>",
                "implementation": "export class ExpandedNavigationView implements VirtualDOM<'div'> {\n    static menuWidth = '250px'\n    public readonly router: Router\n\n    public readonly tag = 'div'\n    public readonly class = 'mkdocs-ExpandedNavigationView h-100 w-100 border'\n    public readonly children: ChildrenLike\n    public readonly style = {\n        top: '0px',\n        left: '0px',\n        position: 'absolute' as const,\n        backgroundColor: 'rgba(0,0,0,0)',\n        zIndex: 10,\n        transition: 'background-color 0.2s ease 0s',\n    }\n    public readonly displayModeToc$: Observable<DisplayMode>\n    public readonly onclick: (elem: MouseEvent) => void\n    public readonly connectedCallback = (elem: HTMLElement) => {\n        setTimeout(() => (elem.style.backgroundColor = 'rgba(0,0,0,0.4)'), 0)\n    }\n    constructor(params: {\n        router: Router\n        collapse: () => void\n        displayModeToc$: Observable<DisplayMode>\n        footer?: AnyVirtualDOM\n    }) {\n        Object.assign(this, params)\n        this.children = [\n            {\n                tag: 'div',\n                class: 'h-100 d-flex flex-column',\n                style: {\n                    width: ExpandedNavigationView.menuWidth,\n                    marginLeft: `-${ExpandedNavigationView.menuWidth}`,\n                    backgroundColor: 'white',\n                    transition: 'margin 0.2s ease 0s',\n                },\n                connectedCallback: (elem) =>\n                    setTimeout(() => (elem.style.marginLeft = '0px'), 0),\n                children: {\n                    policy: 'replace',\n                    source$: this.router.explorerState.selectedNode$,\n                    vdomMap: (node: NavNodeBase) => {\n                        return [\n                            new ModalNavParentView({\n                                router: this.router,\n                                node,\n                                displayModeToc$: this.displayModeToc$,\n                            }),\n                            {\n                                tag: 'div',\n                                class: 'flex-grow-1 overflow-auto',\n                                children: [\n                                    new ModalNavChildrenView({\n                                        router: this.router,\n                                        node,\n                                    }),\n                                ],\n                            },\n                            params.footer && {\n                                tag: 'div',\n                                class: 'w-100 py-3 border px-2 bg-light text-dark',\n                                children: [params.footer],\n                            },\n                        ]\n                    },\n                },\n            },\n        ]\n        this.onclick = (ev) => {\n            if (ev.target['vDom'] === this) {\n                const htmlElement = ev.target as HTMLElement\n                htmlElement.children[0]['style'].marginLeft =\n                    `-${ExpandedNavigationView.menuWidth}`\n                htmlElement.style.backgroundColor = 'rgba(0,0,0,0)'\n                setTimeout(() => params.collapse(), 200)\n            }\n        }\n    }\n}",
                "startLine": 230,
                "endLine": 310,
                "references": {
                    "ExpandedNavigationView": "@nav/api/MainModule/Views.ExpandedNavigationView",
                    "DisplayMode": "@nav/api/MainModule/Views.DisplayMode",
                    "Router": "@nav/api/MainModule.Router",
                    "VirtualDOM.children": "-1",
                    "VirtualDOM.class": "-1",
                    "VirtualDOM.onclick": "-1",
                    "VirtualDOM.style": "-1",
                    "VirtualDOM.tag": "-1",
                    "VirtualDOM.connectedCallback": "-1"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "FooterView",
            "documentation": {
                "sections": [
                    {
                        "content": "The page footer.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "FooterView",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/views/page.view.ts",
                "declaration": "export class FooterView implements VirtualDOM<'div'>",
                "implementation": "export class FooterView implements VirtualDOM<'div'> {\n    public readonly tag = 'div'\n    public readonly class = 'w-100 mkdocs-FooterView d-flex align-items-center'\n    public readonly children: ChildrenLike\n\n    public readonly style = {\n        padding: '0.9em',\n        backgroundColor: 'black',\n        color: 'white',\n    }\n    constructor() {\n        this.children = [\n            {\n                tag: 'div',\n                class: 'flex-grow-1',\n            },\n            {\n                tag: 'div',\n                class: 'd-flex align-items-center',\n                children: [\n                    {\n                        tag: 'div',\n                        innerText: 'Made with',\n                    },\n                    {\n                        tag: 'div',\n                        class: 'mx-2',\n                    },\n                    {\n                        tag: 'a',\n                        innerText: 'mkdocs-ts',\n                        target: '_blank',\n                        href: 'https://github.com/youwol/mkdocs-ts',\n                    },\n                ],\n            },\n            {\n                tag: 'div',\n                style: {\n                    flexGrow: 2,\n                },\n            },\n        ]\n    }\n}",
                "startLine": 59,
                "endLine": 104,
                "references": {
                    "FooterView": "@nav/api/MainModule/Views.FooterView",
                    "VirtualDOM.children": "-1",
                    "VirtualDOM.class": "-1",
                    "VirtualDOM.style": "-1",
                    "VirtualDOM.tag": "-1"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "ModalNavChildrenView",
            "documentation": {
                "sections": [
                    {
                        "content": "The part of  [ExpandedNavigationView](@nav/api/MainModule/Views.ExpandedNavigationView)  that allows to navigate forward to children.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "ModalNavChildrenView",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/views/navigation.view.ts",
                "declaration": "export class ModalNavChildrenView implements VirtualDOM<'div'>",
                "implementation": "export class ModalNavChildrenView implements VirtualDOM<'div'> {\n    public readonly router: Router\n    public readonly node: NavNodeBase\n    public readonly tag = 'div'\n    public readonly class = 'mkdocs-ModalNavChildrenView'\n    public readonly children: ChildrenLike\n    constructor(params: { router: Router; node: NavNodeBase }) {\n        Object.assign(this, params)\n        const node = this.node.children\n            ? this.node\n            : this.router.explorerState.getParent(this.node.id)\n\n        const source$ = this.router.explorerState.getChildren$(node)\n        // Following call trigger children resolution if needed\n        try {\n            this.router.explorerState.getChildren(node)\n        } catch (e) {\n            this.children = []\n            return\n        }\n\n        this.children = {\n            policy: 'replace',\n            source$: source$,\n            vdomMap: (children: NavNodeBase[]) => {\n                return children.map((child) => {\n                    return {\n                        tag: 'div',\n                        class: 'border-bottom px-3 py-2',\n                        children: [\n                            new NavigationHeader({\n                                node: child,\n                                router: this.router,\n                                withChildren: child.children && [\n                                    {\n                                        tag: 'div',\n                                        class: 'fas fa-chevron-right',\n                                    },\n                                ],\n                            }),\n                        ],\n                    }\n                })\n            },\n        }\n    }\n}",
                "startLine": 361,
                "endLine": 408,
                "references": {
                    "ModalNavChildrenView": "@nav/api/MainModule/Views.ModalNavChildrenView",
                    "NavNodeBase": "@nav/api/MainModule.NavNodeBase",
                    "Router": "@nav/api/MainModule.Router",
                    "VirtualDOM.children": "-1",
                    "VirtualDOM.class": "-1",
                    "VirtualDOM.tag": "-1"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "ModalNavParentView",
            "documentation": {
                "sections": [
                    {
                        "content": "The part of  [ExpandedNavigationView](@nav/api/MainModule/Views.ExpandedNavigationView)  that allows to navigate back to parent.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "ModalNavParentView",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/views/navigation.view.ts",
                "declaration": "export class ModalNavParentView implements VirtualDOM<'div'>",
                "implementation": "export class ModalNavParentView implements VirtualDOM<'div'> {\n    public readonly router: Router\n    public readonly node: NavNodeBase\n    public readonly tag = 'div'\n    public readonly class =\n        'mkdocs-ModalNavParentView w-100 py-3 border px-2 bg-light text-dark'\n    public readonly style = {\n        position: 'sticky' as const,\n        top: '0px',\n    }\n    public readonly children: ChildrenLike\n    public readonly displayModeToc$: Observable<DisplayMode>\n\n    constructor(params: {\n        router: Router\n        node: NavNodeBase\n        displayModeToc$: Observable<DisplayMode>\n    }) {\n        Object.assign(this, params)\n\n        this.children = [\n            {\n                tag: 'i',\n                class:\n                    this.node.id === '/'\n                        ? 'fas fa-arrow-left fv-text-disabled'\n                        : 'fas fa-arrow-left fv-hover-text-focus fv-pointer',\n                onclick: () => {\n                    this.router.navigateToParent()\n                },\n            },\n            new NavigationHeader(params),\n            {\n                source$: this.displayModeToc$.pipe(distinctUntilChanged()),\n                vdomMap: (mode: DisplayMode) => {\n                    return mode !== 'Minimized'\n                        ? { tag: 'div' }\n                        : new ModalTocView({ router: this.router })\n                },\n            },\n        ]\n    }\n}",
                "startLine": 314,
                "endLine": 357,
                "references": {
                    "ModalNavParentView": "@nav/api/MainModule/Views.ModalNavParentView",
                    "DisplayMode": "@nav/api/MainModule/Views.DisplayMode",
                    "NavNodeBase": "@nav/api/MainModule.NavNodeBase",
                    "Router": "@nav/api/MainModule.Router",
                    "VirtualDOM.children": "-1",
                    "VirtualDOM.class": "-1",
                    "VirtualDOM.style": "-1",
                    "VirtualDOM.tag": "-1"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "ModalNavigationView",
            "documentation": {
                "sections": [
                    {
                        "content": "The 'collapsed' navigation view (when the screen size is not large enough).\n\nIt can be either in a state 'expanded' (the modal is displayed on the left, see  [ExpandedNavigationView](@nav/api/MainModule/Views.ExpandedNavigationView) ),\nor not (only the drop-down button to expand the modal is visible).",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "ModalNavigationView",
            "attributes": [
                {
                    "name": "expanded$",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Wether the modal is expanded or not.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "ModalNavigationView.expanded$",
                    "code": {
                        "filePath": "src/lib/views/navigation.view.ts",
                        "declaration": "public readonly expanded$ = new BehaviorSubject(false)",
                        "implementation": "",
                        "startLine": 196,
                        "endLine": 197,
                        "references": {
                            "expanded$": "@nav/api/MainModule/Views.ModalNavigationView.expanded$"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/views/navigation.view.ts",
                "declaration": "export class ModalNavigationView implements VirtualDOM<'div'>",
                "implementation": "export class ModalNavigationView implements VirtualDOM<'div'> {\n    public readonly router: Router\n\n    public readonly tag = 'div'\n    public readonly children: ChildrenLike\n    public readonly class = 'mkdocs-ModalNavigationView'\n    /**\n     * Wether the modal is expanded or not.\n     */\n    public readonly expanded$ = new BehaviorSubject(false)\n    public readonly displayModeToc$: Observable<DisplayMode>\n    constructor(params: {\n        router: Router\n        displayModeToc$: Observable<DisplayMode>\n        footer?: AnyVirtualDOM\n    }) {\n        Object.assign(this, params)\n\n        this.children = [\n            {\n                source$: this.expanded$,\n                vdomMap: (expanded) => {\n                    return expanded\n                        ? new ExpandedNavigationView({\n                              router: this.router,\n                              collapse: () => this.expanded$.next(false),\n                              displayModeToc$: this.displayModeToc$,\n                              footer: params.footer,\n                          })\n                        : {\n                              tag: 'div',\n                              class: 'fas fa-bars p-1 fv-pointer fv-hover-text-focus',\n                              onclick: () => this.expanded$.next(true),\n                          }\n                },\n            },\n        ]\n    }\n}",
                "startLine": 187,
                "endLine": 226,
                "references": {
                    "ModalNavigationView": "@nav/api/MainModule/Views.ModalNavigationView",
                    "DisplayMode": "@nav/api/MainModule/Views.DisplayMode",
                    "Router": "@nav/api/MainModule.Router",
                    "VirtualDOM.children": "-1",
                    "VirtualDOM.class": "-1",
                    "VirtualDOM.tag": "-1"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "ModalTocView",
            "documentation": {
                "sections": [
                    {
                        "content": "The TOC with the  [ExpandedNavigationView](@nav/api/MainModule/Views.ExpandedNavigationView)  if it can not be displayed as standalone entity on screen.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "ModalTocView",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/views/navigation.view.ts",
                "declaration": "export class ModalTocView implements VirtualDOM<'div'>",
                "implementation": "export class ModalTocView implements VirtualDOM<'div'> {\n    public readonly tag = 'div'\n    public readonly children: ChildrenLike\n    public readonly router: Router\n    public readonly class = 'mkdocs-ModalTocView'\n    public readonly expanded$ = new BehaviorSubject(false)\n    constructor(params: { router: Router }) {\n        Object.assign(this, params)\n        this.children = [\n            {\n                tag: 'div',\n                class: 'd-flex align-items-center fv-hover-text-focus fv-pointer',\n                onclick: () => this.expanded$.next(!this.expanded$.value),\n                children: [\n                    {\n                        tag: 'div',\n                        class: 'fas fa-list-ul',\n                    },\n                    {\n                        tag: 'div',\n                        class: 'pb-2 pt-1 mx-2',\n                        innerText: 'Table of Content',\n                    },\n                    {\n                        tag: 'div',\n                        class: {\n                            source$: this.expanded$,\n                            vdomMap: (expanded) =>\n                                expanded ? 'fa-chevron-up' : 'fa-chevron-down',\n                            wrapper: (d) => `fas ${d} flex-grow-1 text-right`,\n                        },\n                    },\n                ],\n            },\n            {\n                tag: 'div',\n                style: {\n                    maxHeight: '25vh',\n                    overflowY: 'auto' as const,\n                    overflowX: 'hidden' as const,\n                },\n                class: {\n                    source$: this.expanded$,\n                    vdomMap: (expanded) => (expanded ? 'd-block' : 'd-none'),\n                },\n                children: [new TocWrapperView({ router: this.router })],\n            },\n        ]\n    }\n}",
                "startLine": 412,
                "endLine": 462,
                "references": {
                    "ModalTocView": "@nav/api/MainModule/Views.ModalTocView",
                    "Router": "@nav/api/MainModule.Router",
                    "VirtualDOM.children": "-1",
                    "VirtualDOM.class": "-1",
                    "VirtualDOM.tag": "-1"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "NavigationView",
            "documentation": {
                "sections": [
                    {
                        "content": "The 'regular' navigation view (when the screen size is large enough).",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "NavigationView",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/views/navigation.view.ts",
                "declaration": "export class NavigationView implements VirtualDOM<'div'>",
                "implementation": "export class NavigationView implements VirtualDOM<'div'> {\n    public readonly router: Router\n\n    public readonly tag = 'div'\n    public readonly class =\n        'mkdocs-NavigationView h-100 w-100 mkdocs-thin-v-scroller'\n    public readonly children: ChildrenLike\n\n    constructor(params: { router: Router }) {\n        Object.assign(this, params)\n\n        this.children = [\n            new ImmutableTree.View({\n                state: this.router.explorerState,\n                headerView: (explorerState, node) => {\n                    return new NavigationHeader({\n                        node,\n                        router: this.router,\n                        withChildren: node.children &&\n                            node.id !== '/' && [\n                                new HandlerView({\n                                    node: node,\n                                    expandedNodes$:\n                                        this.router.explorerState\n                                            .expandedNodes$,\n                                }),\n                            ],\n                    })\n                },\n                options: {\n                    autoScroll: {\n                        trigger: 'not-visible',\n                        top: 50,\n                    },\n                },\n            }),\n        ]\n    }\n}",
                "startLine": 141,
                "endLine": 180,
                "references": {
                    "NavigationView": "@nav/api/MainModule/Views.NavigationView",
                    "Router": "@nav/api/MainModule.Router",
                    "VirtualDOM.children": "-1",
                    "VirtualDOM.class": "-1",
                    "VirtualDOM.tag": "-1"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "PageView",
            "documentation": {
                "sections": [
                    {
                        "content": "The main content of the page.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "PageView",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/views/page.view.ts",
                "declaration": "export class PageView implements VirtualDOM<'div'>",
                "implementation": "export class PageView implements VirtualDOM<'div'> {\n    public readonly router: Router\n    public readonly tag = 'div'\n    public readonly class = 'mkdocs-PageView w-100 mkdocs-ts-page'\n    public readonly children: ChildrenLike\n\n    public readonly connectedCallback: (html: RxHTMLElement<'div'>) => void\n\n    constructor(params: { router: Router }) {\n        Object.assign(this, params)\n        this.children = [\n            {\n                source$: this.router.currentPage$,\n                vdomMap: ({ html, sectionId }) => {\n                    return {\n                        tag: 'div',\n                        children: [html as AnyVirtualDOM],\n                        connectedCallback: (page) => {\n                            this.router.scrollTo(sectionId)\n                            this.router.setDisplayedPage({ page })\n                            replaceCrossReferences(page, this.router)\n                        },\n                    }\n                },\n            },\n        ]\n    }\n}",
                "startLine": 12,
                "endLine": 40,
                "references": {
                    "PageView": "@nav/api/MainModule/Views.PageView",
                    "Router": "@nav/api/MainModule.Router",
                    "VirtualDOM.children": "-1",
                    "VirtualDOM.class": "-1",
                    "VirtualDOM.connectedCallback": "-1",
                    "VirtualDOM.tag": "-1"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "SourcesLink",
            "documentation": {
                "sections": [
                    {
                        "content": "A badge to encapsulate a link on an online repository of source code.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "SourcesLink",
            "attributes": [],
            "callables": [
                {
                    "name": "new SourcesLink",
                    "documentation": {
                        "sections": [
                            {
                                "content": "Initializes a new instance.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            },
                            {
                                "title": "Arguments",
                                "content": "\n*  **href**: URL to the repo.\n*  **name**: Displayed name.\n*  **version**: Displayed version.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "arguments",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "SourcesLink.new SourcesLink",
                    "code": {
                        "filePath": "src/lib/views/top-banner-classic.view.ts",
                        "declaration": "constructor({\n        href,\n        name,\n        version,\n    }: {\n        href: string\n        name: string\n        version: string\n    })",
                        "implementation": "constructor({\n        href,\n        name,\n        version,\n    }: {\n        href: string\n        name: string\n        version: string\n    }) {\n        this.href = href\n        this.children = [\n            {\n                tag: 'div',\n                class: 'my-auto',\n                style: {\n                    fontSize: 'larger',\n                },\n                children: [\n                    {\n                        tag: 'i',\n                        class: 'fas fa-code-branch',\n                    },\n                ],\n            },\n            {\n                tag: 'i',\n                class: 'mx-1',\n            },\n            {\n                tag: 'div',\n                class: 'd-flex flex-column',\n                style: {\n                    fontSize: 'smaller',\n                },\n                children: [\n                    {\n                        tag: 'div',\n                        innerText: name,\n                    },\n                    {\n                        tag: 'div',\n                        class: 'd-flex align-items-center',\n                        style: {\n                            fontSize: 'x-small',\n                        },\n                        children: [\n                            {\n                                tag: 'i',\n                                class: 'fas fa-tag',\n                            },\n                            {\n                                tag: 'i',\n                                class: 'mx-1',\n                            },\n                            {\n                                tag: 'div',\n                                innerText: version,\n                            },\n                        ],\n                    },\n                ],\n            },\n        ]\n    }",
                        "startLine": 285,
                        "endLine": 349,
                        "references": {
                            "new SourcesLink": "@nav/api/MainModule/Views.SourcesLink.constructor",
                            "SourcesLink": "@nav/api/MainModule/Views.SourcesLink"
                        }
                    },
                    "semantic": {
                        "role": "constructor",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    }
                }
            ],
            "code": {
                "filePath": "src/lib/views/top-banner-classic.view.ts",
                "declaration": "export class SourcesLink implements VirtualDOM<'a'>",
                "implementation": "export class SourcesLink implements VirtualDOM<'a'> {\n    public readonly tag = 'a'\n    public readonly href: string\n    public readonly target = '_blank'\n    public readonly class =\n        'd-flex align-items-center mkdocs-text-4 mkdocs-hover-text-5 fv-pointer'\n    public readonly children: ChildrenLike\n\n    /**\n     * Initializes a new instance.\n     *\n     * @param _p\n     * @param _p.href URL to the repo.\n     * @param _p.name Displayed name.\n     * @param _p.version Displayed version.\n     */\n    constructor({\n        href,\n        name,\n        version,\n    }: {\n        href: string\n        name: string\n        version: string\n    }) {\n        this.href = href\n        this.children = [\n            {\n                tag: 'div',\n                class: 'my-auto',\n                style: {\n                    fontSize: 'larger',\n                },\n                children: [\n                    {\n                        tag: 'i',\n                        class: 'fas fa-code-branch',\n                    },\n                ],\n            },\n            {\n                tag: 'i',\n                class: 'mx-1',\n            },\n            {\n                tag: 'div',\n                class: 'd-flex flex-column',\n                style: {\n                    fontSize: 'smaller',\n                },\n                children: [\n                    {\n                        tag: 'div',\n                        innerText: name,\n                    },\n                    {\n                        tag: 'div',\n                        class: 'd-flex align-items-center',\n                        style: {\n                            fontSize: 'x-small',\n                        },\n                        children: [\n                            {\n                                tag: 'i',\n                                class: 'fas fa-tag',\n                            },\n                            {\n                                tag: 'i',\n                                class: 'mx-1',\n                            },\n                            {\n                                tag: 'div',\n                                innerText: version,\n                            },\n                        ],\n                    },\n                ],\n            },\n        ]\n    }\n}",
                "startLine": 269,
                "endLine": 350,
                "references": {
                    "SourcesLink": "@nav/api/MainModule/Views.SourcesLink",
                    "VirtualDOM.children": "-1",
                    "VirtualDOM.class": "-1",
                    "VirtualDOM.href": "-1",
                    "VirtualDOM.tag": "-1",
                    "VirtualDOM.target": "-1"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "TOCView",
            "documentation": {
                "sections": [
                    {
                        "content": "The table of content view when the screen is large enough to display it, otherwise see  [ModalTocView](@nav/api/MainModule/Views.ModalTocView)",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "TOCView",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/views/toc.view.ts",
                "declaration": "export class TOCView implements VirtualDOM<'div'>",
                "implementation": "export class TOCView implements VirtualDOM<'div'> {\n    public readonly router: Router\n    public readonly html: HTMLElement\n    public readonly tag = 'div'\n    public readonly class = 'mkdocs-TOCView h-100'\n    public readonly children: ChildrenLike\n    public readonly style = {\n        lineHeight: '1.5em',\n    }\n\n    public readonly indexFirstVisibleHeading$ = new BehaviorSubject<number>(0)\n    public readonly connectedCallback: (elem: RxHTMLElement<'div'>) => void\n    public readonly disconnectedCallback: (elem: RxHTMLElement<'div'>) => void\n\n    constructor(params: {\n        html: HTMLElement\n        router: Router\n        domConvertor?: (e: HTMLHeadingElement) => AnyVirtualDOM\n    }) {\n        Object.assign(this, params)\n        const queryHeadings = supportedHeadingTags\n            .reduce((acc, e) => `${acc},${e}`, '')\n            .toLowerCase()\n            .slice(1)\n        const headingsArray = (): HTMLElement[] =>\n            Array.from(this.html.querySelectorAll(queryHeadings))\n        const headings$ = new BehaviorSubject<HTMLElement[]>(headingsArray())\n\n        const allMutations$ = new Subject<MutationRecord[]>()\n\n        const observer = new MutationObserver((mutationsList) => {\n            allMutations$.next(mutationsList)\n        })\n\n        const headingsMutation$ = allMutations$.pipe(\n            filter((mutationsList) => {\n                const addedNodes: Node[] = mutationsList\n                    .map((mut) =>\n                        mut.type === 'childList'\n                            ? [...mut.addedNodes, ...mut.removedNodes]\n                            : [],\n                    )\n                    .flat()\n                return (\n                    addedNodes.find(\n                        (node) =>\n                            node['tagName'] && node['tagName'].startsWith('H'),\n                    ) !== undefined\n                )\n            }),\n            debounceTime(200),\n        )\n\n        this.connectedCallback = (elem) => {\n            timer(1000, -1).subscribe(() => {\n                headings$.next(headingsArray())\n            })\n            observer.observe(this.html, { childList: true, subtree: true })\n            elem.ownSubscriptions(\n                this.router.htmlUpdated$.subscribe(() => {\n                    headings$.next(headingsArray())\n                }),\n            )\n            elem.ownSubscriptions(\n                timer(1000, -1)\n                    .pipe(switchMap(() => headingsMutation$))\n                    .subscribe(() => {\n                        headings$.next(headingsArray())\n                    }),\n            )\n        }\n        this.disconnectedCallback = () => {\n            observer.disconnect()\n        }\n        this.router.scrollableElement.onscroll = () => {\n            this.getFirstVisible(headings$.value)\n        }\n\n        this.children = [\n            {\n                tag: 'ul',\n                class: 'p-0 h-100 mkdocs-thin-v-scroller',\n                connectedCallback: (elem: RxHTMLElement<'ul'>) => {\n                    elem.ownSubscriptions(\n                        this.indexFirstVisibleHeading$\n                            .pipe(debounceTime(200))\n                            .subscribe((index) => {\n                                const headings = [\n                                    ...elem.querySelectorAll('li'),\n                                ]\n                                const br = elem.getBoundingClientRect()\n                                const offset = headings[index]?.offsetTop || 0\n                                elem.scrollTo({\n                                    top: offset - br.top,\n                                    left: 0,\n                                    behavior: 'smooth',\n                                })\n                            }),\n                    )\n                },\n                children: {\n                    policy: 'replace',\n                    source$: headings$,\n                    vdomMap: (headingsArray: HTMLElement[]) => {\n                        return headingsArray.map(\n                            (heading: HTMLHeadingElement, index: number) => {\n                                return new TocItemView({\n                                    heading,\n                                    index,\n                                    indexFirstVisibleHeading$:\n                                        this.indexFirstVisibleHeading$,\n                                    router: this.router,\n                                    domConvertor: params.domConvertor,\n                                })\n                            },\n                        )\n                    },\n                },\n            },\n        ]\n    }\n    getFirstVisible(headings: HTMLElement[]) {\n        for (let i = 0; i < headings.length; i++) {\n            const rect = headings[i].getBoundingClientRect()\n\n            if (rect.top >= 0 && rect.bottom <= window.innerHeight) {\n                this.indexFirstVisibleHeading$.next(i)\n                return\n            }\n        }\n    }\n}",
                "startLine": 48,
                "endLine": 180,
                "references": {
                    "TOCView": "@nav/api/MainModule/Views.TOCView",
                    "Router": "@nav/api/MainModule.Router",
                    "VirtualDOM.children": "-1",
                    "VirtualDOM.class": "-1",
                    "VirtualDOM.connectedCallback": "-1",
                    "VirtualDOM.disconnectedCallback": "-1",
                    "VirtualDOM.style": "-1",
                    "VirtualDOM.tag": "-1"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "TopBannerClassicView",
            "documentation": {
                "sections": [
                    {
                        "content": "This tob banner includes a logo, a badge (displayed above the TOC view), and navigation short-cuts.\n\nIt is usually used as  `topBanner`  parameters of  [DefaultLayoutView](@nav/api/MainModule/Views.DefaultLayoutView) 's constructor.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "TopBannerClassicView",
            "attributes": [],
            "callables": [
                {
                    "name": "new TopBannerClassicView",
                    "documentation": {
                        "sections": [
                            {
                                "content": "Initializes a new instance.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            },
                            {
                                "title": "Arguments",
                                "content": "\n*  **params**: Most of them are forwarded from  [DefaultLayoutView](@nav/api/MainModule/Views.DefaultLayoutView) .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "arguments",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "TopBannerClassicView.new TopBannerClassicView",
                    "code": {
                        "filePath": "src/lib/views/top-banner-classic.view.ts",
                        "declaration": "constructor(params: TopBannerClassicParams)",
                        "implementation": "constructor(params: TopBannerClassicParams) {\n        this.children = [\n            new MainColumn(params),\n            {\n                source$: params.displayModeToc$,\n                vdomMap: (mode: DisplayMode) =>\n                    mode === 'Full' ? new RightColumn(params) : { tag: 'div' },\n            },\n        ]\n    }",
                        "startLine": 64,
                        "endLine": 74,
                        "references": {
                            "new TopBannerClassicView": "@nav/api/MainModule/Views.TopBannerClassicView.constructor",
                            "TopBannerClassicParams": "@nav/api/MainModule/Views.TopBannerClassicParams",
                            "TopBannerClassicView": "@nav/api/MainModule/Views.TopBannerClassicView"
                        }
                    },
                    "semantic": {
                        "role": "constructor",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    }
                }
            ],
            "code": {
                "filePath": "src/lib/views/top-banner-classic.view.ts",
                "declaration": "export class TopBannerClassicView implements VirtualDOM<'div'>",
                "implementation": "export class TopBannerClassicView implements VirtualDOM<'div'> {\n    public readonly tag = 'div'\n    public readonly class =\n        'mkdocs-TopBannerClassicView w-100 mkdocs-bg-5 mkdocs-text-5 py-2 d-flex justify-content-center'\n    public readonly children: ChildrenLike\n\n    /**\n     * Initializes a new instance.\n     *\n     * @param params Most of them are forwarded from {@link DefaultLayoutView}.\n     */\n    constructor(params: TopBannerClassicParams) {\n        this.children = [\n            new MainColumn(params),\n            {\n                source$: params.displayModeToc$,\n                vdomMap: (mode: DisplayMode) =>\n                    mode === 'Full' ? new RightColumn(params) : { tag: 'div' },\n            },\n        ]\n    }\n}",
                "startLine": 53,
                "endLine": 75,
                "references": {
                    "TopBannerClassicView": "@nav/api/MainModule/Views.TopBannerClassicView",
                    "TopBannerClassicParams": "@nav/api/MainModule/Views.TopBannerClassicParams",
                    "VirtualDOM.children": "-1",
                    "VirtualDOM.class": "-1",
                    "VirtualDOM.tag": "-1"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "TopBannerView",
            "documentation": {
                "sections": [
                    {
                        "content": "Simple top banner definition, including:\n*  Eventually a dropdown menu to expand the  [ModalNavigationView](@nav/api/MainModule/Views.ModalNavigationView)  (on small screen)\n*  A title",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "TopBannerView",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/views/top-banner.view.ts",
                "declaration": "export class TopBannerView extends TopBannerBase",
                "implementation": "export class TopBannerView extends TopBannerBase {\n    public readonly tag = 'div'\n    public readonly class =\n        'mkdocs-TopBannerView fv-text-primary fv-bg-background'\n\n    constructor({\n        name,\n        displayModeNav$,\n        displayModeToc$,\n        router,\n    }: {\n        name: string | AnyVirtualDOM\n        displayModeNav$: Subject<DisplayMode>\n        displayModeToc$: Subject<DisplayMode>\n        router: Router\n    }) {\n        const title: AnyVirtualDOM =\n            typeof name === 'string'\n                ? {\n                      tag: 'div',\n                      class: 'd-flex align-items-center',\n                      style: {\n                          width: '12.1em',\n                          padding: '1.2em 0 1.2em 0',\n                      },\n                      children: [\n                          {\n                              tag: 'a',\n                              class: 'fas fa-book-reader',\n                          },\n                          {\n                              tag: 'div',\n                              class: 'mx-3',\n                          },\n                          {\n                              tag: 'div',\n                              innerText: name,\n                              style: {\n                                  fontWeight: 700,\n                                  fontSize: '1.2em',\n                              },\n                          },\n                      ],\n                  }\n                : name\n\n        super({\n            innerView: {\n                tag: 'div',\n                class: 'd-flex flex-column justify-content-center h-100',\n                children: [\n                    {\n                        tag: 'div',\n                        class: 'd-flex mx-auto align-items-center justify-content-center px-5',\n                        children: [\n                            {\n                                source$: displayModeNav$.pipe(\n                                    distinctUntilChanged(),\n                                ),\n                                vdomMap: (mode: DisplayMode) => {\n                                    return mode === 'Full'\n                                        ? { tag: 'div' }\n                                        : new ModalNavigationView({\n                                              router,\n                                              displayModeToc$: displayModeToc$,\n                                          })\n                                },\n                            },\n                            {\n                                tag: 'div',\n                                class: 'mx-3',\n                            },\n                            title,\n                            {\n                                tag: 'div',\n                                style: {\n                                    width: '800px',\n                                },\n                            },\n                            {\n                                tag: 'div',\n                                style: {\n                                    width: '12.1em',\n                                    padding: '1.2em 0 1.2em 0',\n                                },\n                            },\n                        ],\n                    },\n                ],\n            },\n        })\n    }\n}",
                "startLine": 14,
                "endLine": 107,
                "references": {
                    "TopBannerView": "@nav/api/MainModule/Views.TopBannerView",
                    "DisplayMode": "@nav/api/MainModule/Views.DisplayMode",
                    "Router": "@nav/api/MainModule.Router",
                    "TopBannerBase.constructor": "-1",
                    "TopBannerBase.children": "-1",
                    "TopBannerBase.class": "-1",
                    "TopBannerBase.innerView": "-1",
                    "TopBannerBase.style": "-1",
                    "TopBannerBase.tag": "-1",
                    "TopBannerBase.ClassSelector": "-1",
                    "TopBannerBase.baseClass": "-1"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "LayoutOptions",
            "documentation": {
                "sections": [
                    {
                        "content": "Hints regarding sizing of the main elements on the page.\n\nThe 'page' element refers to the text-content area.\n\nSee  [defaultLayoutOptions](@nav/api/MainModule/Views.defaultLayoutOptions) .",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "LayoutOptions",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/views/default-layout.view.ts",
                "declaration": "export type LayoutOptions = {\n    /**\n     * Navigation panel's width.\n     */\n    navWidth: string\n    /**\n     * Page's width.\n     */\n    pageWidth: string\n    /**\n     * Page's maximum width.\n     */\n    pageMaxWidth: string\n    /**\n     * Horizontal padding of the main page.\n     */\n    pageXPadding: string\n    /**\n     * TOC panel's width.\n     */\n    tocWidth: string\n}",
                "implementation": "",
                "startLine": 26,
                "endLine": 27,
                "references": {
                    "LayoutOptions": "@nav/api/MainModule/Views.LayoutOptions"
                }
            },
            "semantic": {
                "role": "type-alias",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "TopBannerClassicParams",
            "documentation": {
                "sections": [
                    {
                        "content": "Parameters for  [TopBannerClassicView](@nav/api/MainModule/Views.TopBannerClassicView) .",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "TopBannerClassicParams",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/views/top-banner-classic.view.ts",
                "declaration": "export type TopBannerClassicParams = {\n    /**\n     * Router, forwared when used within {@link DefaultLayoutView}.\n     */\n    router: Router\n    /**\n     * Emit the current display mode regarding navigation, forwared when used within {@link DefaultLayoutView}.\n     */\n    displayModeNav$: Subject<DisplayMode>\n    /**\n     * Emit the current display mode regarding TOC, forwared when used within {@link DefaultLayoutView}.\n     */\n    displayModeToc$: Subject<DisplayMode>\n    /**\n     * Layout sizing options, forwarded when used within {@link DefaultLayoutView}.\n     */\n    layoutOptions: LayoutOptions\n    /**\n     * The title, forwarded when used within {@link DefaultLayoutView}.\n     */\n    title: AnyVirtualDOM | string\n    /**\n     * The logo.\n     */\n    logo: AnyVirtualDOM\n    /**\n     * The badge.\n     */\n    badge: AnyVirtualDOM\n}",
                "implementation": "",
                "startLine": 17,
                "endLine": 18,
                "references": {
                    "TopBannerClassicParams": "@nav/api/MainModule/Views.TopBannerClassicParams",
                    "DisplayMode": "@nav/api/MainModule/Views.DisplayMode",
                    "LayoutOptions": "@nav/api/MainModule/Views.LayoutOptions",
                    "Router": "@nav/api/MainModule.Router"
                }
            },
            "semantic": {
                "role": "type-alias",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        }
    ],
    "callables": [
        {
            "name": "defaultLayoutOptions",
            "documentation": {
                "sections": [
                    {
                        "content": "Default layout options.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "defaultLayoutOptions",
            "code": {
                "filePath": "src/lib/views/default-layout.view.ts",
                "declaration": "defaultLayoutOptions = () => {\n    return {\n        navWidth: '250px',\n        pageWidth: '95%',\n        pageMaxWidth: '47em',\n        tocWidth: '250px',\n        pageXPadding: '3em',\n    }\n}",
                "implementation": "",
                "startLine": 52,
                "endLine": 53,
                "references": {
                    "defaultLayoutOptions": "@nav/api/MainModule/Views.defaultLayoutOptions"
                }
            },
            "semantic": {
                "role": "function",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "popupModal",
            "documentation": {
                "sections": [
                    {
                        "content": "Popup a modal on screen with a blury background.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "popupModal",
            "code": {
                "filePath": "src/lib/views/modal.view.ts",
                "declaration": "export function popupModal({\n    content,\n    maxWidth,\n    maxHeight,\n}: {\n    content: AnyVirtualDOM\n    maxWidth?: string\n    maxHeight?: string\n})",
                "implementation": "export function popupModal({\n    content,\n    maxWidth,\n    maxHeight,\n}: {\n    content: AnyVirtualDOM\n    maxWidth?: string\n    maxHeight?: string\n}) {\n    let element: HTMLElement\n    maxWidth = maxWidth || '75%'\n    maxHeight = maxHeight || '75%'\n    const vdom: AnyVirtualDOM = {\n        tag: 'div',\n        style: {\n            position: 'absolute',\n            top: '0vh',\n            left: '0vw',\n            width: '100vw',\n            height: '100vh',\n            zIndex: 10,\n            backdropFilter: 'blur(2px)',\n        },\n        class: 'd-flex flex-column justify-content-center',\n        children: [\n            {\n                tag: 'div',\n                class: `p-2 border rounded mx-auto d-flex flex-column justify-content-center mkdocs-bg-0 overflow-auto`,\n                children: [content],\n                style: {\n                    maxHeight: maxHeight,\n                    maxWidth: maxWidth,\n                },\n                connectedCallback: (elem: HTMLElement) => {\n                    const firstChild = elem.firstChild\n                    if (isSizeRelativeToParent(firstChild, 'width')) {\n                        elem.style.width = maxWidth\n                    }\n                    if (isSizeRelativeToParent(firstChild, 'height')) {\n                        elem.style.height = maxHeight\n                    }\n                },\n                onclick: (ev) => {\n                    ev.stopPropagation()\n                },\n            },\n        ],\n        connectedCallback: (elem: HTMLElement) => {\n            element = elem\n        },\n        onclick: () => {\n            element && element.remove()\n        },\n    }\n    document.body.appendChild(render(vdom))\n}",
                "startLine": 46,
                "endLine": 102,
                "references": {
                    "popupModal": "@nav/api/MainModule/Views.popupModal"
                }
            },
            "semantic": {
                "role": "function",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        }
    ],
    "files": [
        {
            "name": "default-layout.view.ts",
            "path": "src/lib/views/default-layout.view.ts",
            "documentation": {
                "sections": [
                    {
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "content": "",
                        "contentType": "markdown"
                    }
                ]
            }
        },
        {
            "name": "navigation.view.ts",
            "path": "src/lib/views/navigation.view.ts",
            "documentation": {
                "sections": [
                    {
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "content": "This file gathers views related to navigation.",
                        "contentType": "markdown"
                    }
                ]
            }
        },
        {
            "name": "page.view.ts",
            "path": "src/lib/views/page.view.ts",
            "documentation": {
                "sections": [
                    {
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "content": "",
                        "contentType": "markdown"
                    }
                ]
            }
        },
        {
            "name": "top-banner-classic.view.ts",
            "path": "src/lib/views/top-banner-classic.view.ts",
            "documentation": {
                "sections": [
                    {
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "content": "",
                        "contentType": "markdown"
                    }
                ]
            }
        },
        {
            "name": "toc.view.ts",
            "path": "src/lib/views/toc.view.ts",
            "documentation": {
                "sections": [
                    {
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "content": "This file gathers views related to table of content.",
                        "contentType": "markdown"
                    }
                ]
            }
        },
        {
            "name": "top-banner.view.ts",
            "path": "src/lib/views/top-banner.view.ts",
            "documentation": {
                "sections": [
                    {
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "content": "",
                        "contentType": "markdown"
                    }
                ]
            }
        },
        {
            "name": "modal.view.ts",
            "path": "src/lib/views/modal.view.ts",
            "documentation": {
                "sections": [
                    {
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "content": "",
                        "contentType": "markdown"
                    }
                ]
            }
        }
    ],
    "children": [],
    "semantic": {
        "role": "module",
        "labels": [],
        "attributes": {},
        "relations": {}
    }
}
