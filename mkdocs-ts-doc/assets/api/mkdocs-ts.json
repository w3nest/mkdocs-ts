{
    "name": "@youwol/mkdocs-ts",
    "documentation": {
        "sections": []
    },
    "path": "",
    "attributes": [],
    "types": [],
    "callables": [],
    "files": [
        {
            "name": "index.ts",
            "path": "src/backends/index.ts",
            "documentation": {
                "sections": [
                    {
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "content": "Backends available to parse code API.\n\nBackend API generators are in charge to convert project's sources files into a set of 'API' files,\neach file representing one module of the project.\n\n**Conditions for Generation**:\n   - The language is organized hierarchically into modules.\n   - Modules can contain entities grouped as , ,\n     or .\n   - For each entity, it should be possible to construct a  attribute, which includes:\n     - Extracting documentation from the source code.\n     - Extracting declaration and optionally implementation from the source code.\n     - Extracting the list of known types involved from a declaration (if applicable).\n   - For , it should be possible to extract associated lists of  and\n   .\n   - All entities have a  property providing language-specific semantic information\n   (e.g., `role`, `class`, `interface`, `abstract class`, etc., for ).\n   - All entities are associated with .",
                        "contentType": "markdown"
                    }
                ]
            }
        },
        {
            "name": "index.ts",
            "path": "src/lib/code-api/index.ts",
            "documentation": {
                "sections": [
                    {
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "content": "Auxiliary module to provide code api documentation.\n\n\nOnce 'backend' data has been generated, customization of the output is using a layer running in the\nbrowser. For now, the customization is essentially defined using css through the  attribute.\nIts purpose is to link  attribute to display options.\n\nFor instance,\n<a target='_blank'\nhref=\"/api/assets-gateway/cdn-backend/resources/QHlvdXdvbC9ta2RvY3MtdHM=/latest/assets/ts-typedoc.css\">this</a>\n is the default css file of the .",
                        "contentType": "markdown"
                    }
                ]
            }
        },
        {
            "name": "index.ts",
            "path": "src/index.ts",
            "documentation": {
                "sections": [
                    {
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "content": "Main module of the library.",
                        "contentType": "markdown"
                    }
                ]
            }
        }
    ],
    "children": [
        {
            "name": "Backends",
            "path": "mkdocs-ts.Backends",
            "isLeaf": false
        },
        {
            "name": "CodeApi",
            "path": "mkdocs-ts.CodeApi",
            "isLeaf": true
        },
        {
            "name": "MainModule",
            "path": "mkdocs-ts.MainModule",
            "isLeaf": false
        }
    ],
    "semantic": {
        "role": "",
        "labels": [],
        "attributes": {},
        "relations": {}
    }
}
